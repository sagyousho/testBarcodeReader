/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/H_barcodeReader.js":
/*!********************************!*\
  !*** ./src/H_barcodeReader.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"H_BarCodeReader\": () => (/* binding */ H_BarCodeReader)\n/* harmony export */ });\n/* harmony import */ var _quagga_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quagga.min */ \"./src/quagga.min.js\");\n/* harmony import */ var _quagga_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_quagga_min__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Libs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Libs */ \"./src/Libs.js\");\n// import { Quagga } from \"quagga\";\r\n\r\n// import { HumanResourcesAPI } from \"./HumanResourcesAPI\";\r\n\r\n\r\nclass H_BarCodeReader {\r\n\r\n  /**\r\n   * 初期設定\r\n   * @param {object} setting\r\n   */\r\n  constructor(setting) {\r\n    this.setting = setting;\r\n    this.logicalProcessors = navigator.hardwareConcurrency; //処理を行う論理CPU数設定(default:PCスペックの最大数)\r\n\r\n    //inputStream\r\n    this.type = setting.inputStream.type; //スキャン方式(default:\"LiveStream\")\r\n    this.target = document.getElementById(setting.inputStream.target); //カメラ映像を表示するHTML要素設定(default:barord-scan-area)\r\n    this.decodeBarCodeRate = setting.inputStream.decodeBarCodeRate; //(default:3)\r\n    this.successTimeout = setting.inputStream.successTimeout; //検出が成功したときの遅延時間(default:500)\r\n    this.codeRepetition = setting.inputStream.codeRepetition; //コードの繰り返しを受け入れ可否(default:true)\r\n    this.tryVertical = setting.inputStream.tryVertical; //垂直のバーコードの読み取り(defaulut:true)\r\n    this.frameRate = setting.inputStream.frameRate; //フレームレート(default:15)\r\n    this.width = setting.inputStream.width; //横幅(default:)\r\n    this.height = setting.inputStream.height; //縦幅(default:)\r\n    this.facingMode = setting.inputStream.facingMode; //バックカメラの利用を設定(フロントカメラは\"user\")(default:environment(バックカメラ))\r\n    this.frequency = setting.inputStream.frequency; //スキャン精度 1秒あたりの最大スキャン回数(default:10)\r\n    // スキャンしない範囲設定\r\n    this.top = setting.inputStream.area.top;\r\n    this.right = setting.inputStream.area.right;\r\n    this.left = setting.inputStream.area.left;\r\n    this.bottom = setting.inputStream.area.bottom;\r\n\r\n    //decoder\r\n    this.readers = setting.decoder.readers; //バーコード方式(default:\"code_128_reader\")\r\n    this.multiple = setting.decoder.multiple; //複数検知(default:false)\r\n\r\n    //locate\r\n    this.locate = setting.locate; //バーコードの位置を特定する機能(default:true)\r\n    this.halfSample = setting.locate.halfSample; //バーコードの位置を特定する機能(default:true)\r\n    this.patchSize = setting.locate.patchSize; //バーコード読み取りサイズ(default:\"medium\")\r\n\r\n    //extra\r\n    this.codeCheckCount = setting.codeCheckCount; //スキャンしたコードのチェック回数(default:3)\r\n    this.scanBoxLineColor = setting.scanBoxLineColor; //バーコード検知の枠の色(default:\"green\")\r\n    this.scanBoxLineWidth = setting.scanBoxLineWidth; //バーコード検知の枠の幅(default:2)\r\n    this.successBoxLineColor = setting.successBoxLineColor; //バーコード読取り時の枠の色(default:\"yellow\")\r\n    this.successBoxLineWidth = setting.successBoxLineWidth; //バーコード読取り時の枠の幅(default:2)\r\n    this.successLineColor = setting.successLineColor; //バーコード検出完了時の色(default:\"red\")\r\n    this.successLineWidth = setting.successLineWidth; //バーコード検出完了時の幅(default:3)\r\n    this.successAudioSource = setting.successAudioSource; //検出完了時の音声path(default:3)\r\n    this.scanTimeOut = setting.scanTimeOut; //\"自動停止時間(秒設定)\"\r\n    this.checkCount = setting.checkCount; //\"検知判定回数\"\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * バーコードスキャンスタート\r\n   */\r\n  startScanner() {\r\n    // console.log(this.setting);\r\n    const scanTimeOut = this.scanTimeOut;\r\n    const scanBoxLineColor = this.scanBoxLineColor;\r\n    const scanBoxLineWidth = this.scanBoxLineWidth;\r\n    const successBoxLineColor = this.successBoxLineColor;\r\n    const successBoxLineWidth = this.successBoxLineWidth;\r\n    const successLineColor = this.successLineColor;\r\n    const successLineWidth = this.successLineWidth;\r\n    const codeCheckCount = this.codeCheckCount;\r\n    // const resourcesAPI = new HumanResourcesAPI(this.setting);\r\n    const libs = new _Libs__WEBPACK_IMPORTED_MODULE_1__.Libs();\r\n    let decodedValue;\r\n    const date = new Date();\r\n    const now = date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate();\r\n    const messageElem = document.getElementById(\"result-message\");\r\n\r\n    // 設定初期化;\r\n    _quagga_min__WEBPACK_IMPORTED_MODULE_0__.init(\r\n      {\r\n        numOfWorkers: this.logicalProcessors,\r\n        inputStream: {\r\n          type: this.type,\r\n          target: this.target,\r\n          frequency: this.frequency,\r\n          area: {\r\n            top: this.top,\r\n            right: this.right,\r\n            left: this.left,\r\n            bottom: this.bottom \r\n          },\r\n          constraints: {\r\n            decodeBarCodeRate: this.decodeBarCodeRate,\r\n            successTimeout: this.successTimeout,\r\n            codeRepetition: this.codeRepetition,\r\n            tryVertical: this.tryVertical,\r\n            frameRate: this.frameRate,\r\n            width: this.width,\r\n            height: this.height,\r\n            facingMode: this.facingMode,\r\n          },\r\n        },\r\n        decoder: {\r\n          multiple: this.multiple,\r\n          readers: [ this.readers ],\r\n        },\r\n        locate: this.locate,\r\n        locater: {\r\n          halfSample: this.halfSample,\r\n          patchSize: this.patchSize,\r\n        },\r\n      },\r\n      function (err) {\r\n        if (err) {\r\n          console.error(err);\r\n          return;\r\n        }\r\n\r\n        //バーコード読み取りスタート\r\n        console.log(\"Initialization finished. Ready to start\");\r\n        _quagga_min__WEBPACK_IMPORTED_MODULE_0__.start();\r\n\r\n        //一定時間バーコードを読み取りしないと停止\r\n        let count = 0\r\n        let interval = setInterval(() => {\r\n          if (count >= scanTimeOut) {\r\n            count = 0;\r\n            _quagga_min__WEBPACK_IMPORTED_MODULE_0__.stop();\r\n            clearInterval(interval);\r\n          }\r\n          if (decodedValue) {\r\n            count = 0;\r\n            decodedValue = null;\r\n          }\r\n          count++;\r\n        }, 1000)\r\n        \r\n        \r\n      }\r\n    );\r\n\r\n\r\n    _quagga_min__WEBPACK_IMPORTED_MODULE_0__.onProcessed(function (result) {\r\n      var drawingCtx = _quagga_min__WEBPACK_IMPORTED_MODULE_0__.canvas.ctx.overlay,\r\n        drawingCanvas = _quagga_min__WEBPACK_IMPORTED_MODULE_0__.canvas.dom.overlay;\r\n    // 検知時の処理\r\n      if (result) {\r\n        if (result.boxes) {\r\n          drawingCtx.clearRect(\r\n            0,\r\n            0,\r\n            parseInt(drawingCanvas.getAttribute(\"width\")),\r\n            parseInt(drawingCanvas.getAttribute(\"height\"))\r\n          );\r\n          result.boxes\r\n            .filter(function (box) {\r\n              return box !== result.box;\r\n            })\r\n            .forEach(function (box) {\r\n              _quagga_min__WEBPACK_IMPORTED_MODULE_0__.ImageDebug.drawPath(\r\n                box,\r\n                {\r\n                  x: 0,\r\n                  y: 1,\r\n                },\r\n                drawingCtx,\r\n                {\r\n                  color: scanBoxLineColor,\r\n                  lineWidth: scanBoxLineWidth,\r\n                }\r\n              );\r\n            });\r\n        }\r\n\r\n        // 検知完了時の処理\r\n        if (result.box) {\r\n          _quagga_min__WEBPACK_IMPORTED_MODULE_0__.ImageDebug.drawPath(\r\n            result.box,\r\n            {\r\n              x: 0,\r\n              y: 1,\r\n            },\r\n            drawingCtx,\r\n            {\r\n              // color: \"#00F\",\r\n              color: successBoxLineColor,\r\n              lineWidth: successBoxLineWidth,\r\n            }\r\n          );\r\n        }\r\n\r\n        if (result.codeResult && result.codeResult.code) {\r\n          _quagga_min__WEBPACK_IMPORTED_MODULE_0__.ImageDebug.drawPath(\r\n            result.line,\r\n            {\r\n              x: \"x\",\r\n              y: \"y\",\r\n            },\r\n            drawingCtx,\r\n            {\r\n              color: successLineColor,\r\n              lineWidth: successLineWidth,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    //barcode read call back\r\n    let scanResults = [];\r\n    let resultBuffer = [];\r\n\r\n    _quagga_min__WEBPACK_IMPORTED_MODULE_0__.onDetected(function (result) {\r\n\r\n      let isErr = false;\r\n      result.codeResult.decodedCodes.find((data) => {\r\n        if (data.error) {\r\n          if (parseFloat(data.error) > 0.19) {\r\n            isErr = true;\r\n          }\r\n        }\r\n      });\r\n      if (isErr) return;\r\n\r\n      // エラー率の中央値が0.1以上なら除外\r\n      const errors = result.codeResult.decodedCodes.filter((_) => _.error !== undefined).map((_) => _.error);\r\n      // 中央値を取得\r\n      const median = function() {\r\n        errors.sort((a, b) => a - b);\r\n        const half = Math.floor(errors.length / 2);\r\n        if (errors.length % 2 === 1)\r\n            return errors[half]\r\n        return (errors[half - 1] + errors[half]) / 2.0\r\n      }\r\n\r\n      if (median > 0.1) {\r\n        return;\r\n      }\r\n\r\n    // 3回連続で同じ値だった場合のみ採用\r\n      scanResults.push(result.codeResult.code)\r\n      if (scanResults.length < codeCheckCount) {\r\n        return;\r\n      }\r\n\r\n      if (scanResults[0] !== scanResults[1]) {\r\n        scanResults.shift();\r\n        return;\r\n      }\r\n\r\n      \r\n      // 複数回目は前回と値が違う時だけ発火\r\n      if (resultBuffer.length > 0) {\r\n        if (resultBuffer.slice(-1)[0] === result.codeResult.code) {\r\n          return;\r\n        }\r\n      }\r\n      \r\n      resultBuffer.push(result.codeResult.code);\r\n\r\n      //読み取り成功時の処理\r\n      decodedValue = result.codeResult.code; //バーコード\r\n      console.log(decodedValue);\r\n      // messageElem.textcontent = decodedValue;\r\n      document.getElementById('result-message').textContent = decodedValue;\r\n      libs.countTextRemove(messageElem, 5);\r\n      // セッションストレージの存在確認\r\n      // let comeInData = now + '_in_' + decodedValue;\r\n      // let comeOutData = now + '_out_' + decodedValue;\r\n      // if (!sessionStorage.getItem(comeInData)) {\r\n      //   let comeOutTime = sessionStorage.getItem(comeOutData);\r\n      //   // console.log(\"comeInTime:\" + comeInTime);\r\n      //   let diffSecond = libs.getDiffTime(comeOutTime);\r\n      //   if (diffSecond > 60) {\r\n      //     sessionStorage.setItem(comeInData, libs.getNowTime());\r\n      //     console.log(\"in_comeinTime:\" + sessionStorage.getItem(comeInData));\r\n      //     resourcesAPI.api('POST', { barcode: decodedValue, date: now }, 'in');\r\n      //   } else {\r\n      //       messageElem.textcontent = \"短時間での連続読み取りを検出しました\"\r\n      //     libs.countTextRemove(messageElem, 5);\r\n      //     }\r\n      // } else {\r\n      //   if (sessionStorage.getItem(comeOutData)) {\r\n      //     sessionStorage.removeItem(comeOutData);\r\n      //   } else {\r\n      //     let comeInTime = sessionStorage.getItem(comeInData);\r\n      //     // console.log(\"comeInTime:\" + comeInTime);\r\n      //     let diffSecond = libs.getDiffTime(comeInTime);\r\n      //     // console.log(\"diffsecond:\" + diffSecond);\r\n      //     if (diffSecond > 60) {\r\n      //       sessionStorage.removeItem(comeInData);\r\n      //       resourcesAPI.api('PUT', { barcode: decodedValue, date: now }, 'out');\r\n      //       sessionStorage.setItem(comeOutData, libs.getNowTime());\r\n      //     } else {\r\n      //       messageElem.textcontent = \"短時間での連続読み取りを検出しました\"\r\n      //       libs.countTextRemove(messageElem, 5);\r\n      //     }\r\n      //   }\r\n      // }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\ndocument.getElementById(\"camera-stop\").addEventListener('click', () => {\r\n  _quagga_min__WEBPACK_IMPORTED_MODULE_0__.stop();\r\n})\r\n\r\n\r\n\n\n//# sourceURL=webpack://test/./src/H_barcodeReader.js?");

/***/ }),

/***/ "./src/Libs.js":
/*!*********************!*\
  !*** ./src/Libs.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Libs\": () => (/* binding */ Libs)\n/* harmony export */ });\nclass Libs\r\n{\r\n  createToken()\r\n  {\r\n    const N = 32;\r\n    return btoa(String.fromCharCode(...crypto.getRandomValues(new Uint8Array(N)))).substring(0,N)\r\n  }\r\n\r\n  getNowTime()\r\n  {\r\n    const date = new Date();\r\n    return date.getTime();\r\n  }\r\n  \r\n\r\n  /**\r\n   * 時間の比較計算\r\n   * @param {date} oldTime:現在日時と比較したい時間 \r\n   * @returns {int}\r\n   */\r\n  getDiffTime(oldTime)\r\n  {\r\n    const date = new Date();\r\n    const nowTime = date.getTime();\r\n    const diffTime = nowTime - oldTime;\r\n    return Math.floor(diffTime / (1000));\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {HTMLElement} elem \r\n   * @param {int} min \r\n   */\r\n  countTextRemove(elem, min)\r\n  {\r\n    let count = min * 1000;\r\n    setTimeout(() => {\r\n      elem.textContent = \"\";\r\n    }, count);\r\n  }\r\n}\n\n//# sourceURL=webpack://test/./src/Libs.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _H_barcodeReader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./H_barcodeReader */ \"./src/H_barcodeReader.js\");\n\r\n\r\n\r\n// window.addEventListener(\"DOMContentLoaded\", () => {\r\ndocument.getElementById('camera-start').addEventListener('click', () => {\r\n  try {\r\n    var settingData = __webpack_require__(/*! ../dist/setting.json */ \"./dist/setting.json\");\r\n    console.log(settingData);\r\n    const HBarCodeReader = new _H_barcodeReader__WEBPACK_IMPORTED_MODULE_0__.H_BarCodeReader(settingData);\r\n    HBarCodeReader.startScanner();\r\n  } catch (e) {\r\n    console.log(e); //例外処理\r\n    // 設定ファイルの読み込みに失敗した場合、以下の設定にする\r\n    alert(\"エラー：\" + e.message)\r\n}\r\n});\r\n\n\n//# sourceURL=webpack://test/./src/index.js?");

/***/ }),

/***/ "./src/quagga.min.js":
/*!***************************!*\
  !*** ./src/quagga.min.js ***!
  \***************************/
/***/ ((module) => {

eval("(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(true)\r\n\t\tmodule.exports = factory();\r\n\telse {}\r\n})(window, function() {\r\nreturn /******/ (function(modules) { // webpackBootstrap\r\n/******/ \t// The module cache\r\n/******/ \tvar installedModules = {};\r\n/******/\r\n/******/ \t// The require function\r\n/******/ \tfunction __nested_webpack_require_552__(moduleId) {\r\n/******/\r\n/******/ \t\t// Check if module is in cache\r\n/******/ \t\tif(installedModules[moduleId]) {\r\n/******/ \t\t\treturn installedModules[moduleId].exports;\r\n/******/ \t\t}\r\n/******/ \t\t// Create a new module (and put it into the cache)\r\n/******/ \t\tvar module = installedModules[moduleId] = {\r\n/******/ \t\t\ti: moduleId,\r\n/******/ \t\t\tl: false,\r\n/******/ \t\t\texports: {}\r\n/******/ \t\t};\r\n/******/\r\n/******/ \t\t// Execute the module function\r\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_552__);\r\n/******/\r\n/******/ \t\t// Flag the module as loaded\r\n/******/ \t\tmodule.l = true;\r\n/******/\r\n/******/ \t\t// Return the exports of the module\r\n/******/ \t\treturn module.exports;\r\n/******/ \t}\r\n/******/\r\n/******/\r\n/******/ \t// expose the modules object (__webpack_modules__)\r\n/******/ \t__nested_webpack_require_552__.m = modules;\r\n/******/\r\n/******/ \t// expose the module cache\r\n/******/ \t__nested_webpack_require_552__.c = installedModules;\r\n/******/\r\n/******/ \t// define getter function for harmony exports\r\n/******/ \t__nested_webpack_require_552__.d = function(exports, name, getter) {\r\n/******/ \t\tif(!__nested_webpack_require_552__.o(exports, name)) {\r\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\r\n/******/ \t\t}\r\n/******/ \t};\r\n/******/\r\n/******/ \t// define __esModule on exports\r\n/******/ \t__nested_webpack_require_552__.r = function(exports) {\r\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n/******/ \t\t}\r\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n/******/ \t};\r\n/******/\r\n/******/ \t// create a fake namespace object\r\n/******/ \t// mode & 1: value is a module id, require it\r\n/******/ \t// mode & 2: merge all properties of value into the ns\r\n/******/ \t// mode & 4: return value when already ns object\r\n/******/ \t// mode & 8|1: behave like require\r\n/******/ \t__nested_webpack_require_552__.t = function(value, mode) {\r\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_552__(value);\r\n/******/ \t\tif(mode & 8) return value;\r\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\r\n/******/ \t\tvar ns = Object.create(null);\r\n/******/ \t\t__nested_webpack_require_552__.r(ns);\r\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\r\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_552__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\r\n/******/ \t\treturn ns;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\r\n/******/ \t__nested_webpack_require_552__.n = function(module) {\r\n/******/ \t\tvar getter = module && module.__esModule ?\r\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\r\n/******/ \t\t\tfunction getModuleExports() { return module; };\r\n/******/ \t\t__nested_webpack_require_552__.d(getter, 'a', getter);\r\n/******/ \t\treturn getter;\r\n/******/ \t};\r\n/******/\r\n/******/ \t// Object.prototype.hasOwnProperty.call\r\n/******/ \t__nested_webpack_require_552__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\r\n/******/\r\n/******/ \t// __webpack_public_path__\r\n/******/ \t__nested_webpack_require_552__.p = \"/\";\r\n/******/\r\n/******/\r\n/******/ \t// Load entry module and return exports\r\n/******/ \treturn __nested_webpack_require_552__(__nested_webpack_require_552__.s = 89);\r\n/******/ })\r\n/************************************************************************/\r\n/******/ ([\r\n/* 0 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 1 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _assertThisInitialized(self) {\r\n  if (self === void 0) {\r\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n  }\r\n\r\n  return self;\r\n}\r\n\r\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 2 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _getPrototypeOf(o) {\r\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\r\n    return o.__proto__ || Object.getPrototypeOf(o);\r\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  return _getPrototypeOf(o);\r\n}\r\n\r\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 3 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _classCallCheck(instance, Constructor) {\r\n  if (!(instance instanceof Constructor)) {\r\n    throw new TypeError(\"Cannot call a class as a function\");\r\n  }\r\n}\r\n\r\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 4 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _defineProperties(target, props) {\r\n  for (var i = 0; i < props.length; i++) {\r\n    var descriptor = props[i];\r\n    descriptor.enumerable = descriptor.enumerable || false;\r\n    descriptor.configurable = true;\r\n    if (\"value\" in descriptor) descriptor.writable = true;\r\n    Object.defineProperty(target, descriptor.key, descriptor);\r\n  }\r\n}\r\n\r\nfunction _createClass(Constructor, protoProps, staticProps) {\r\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n  if (staticProps) _defineProperties(Constructor, staticProps);\r\n  Object.defineProperty(Constructor, \"prototype\", {\r\n    writable: false\r\n  });\r\n  return Constructor;\r\n}\r\n\r\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 5 */\r\n/***/ (function(module, exports, __nested_webpack_require_6579__) {\r\n\r\nvar _typeof = __nested_webpack_require_6579__(20)[\"default\"];\r\n\r\nvar assertThisInitialized = __nested_webpack_require_6579__(1);\r\n\r\nfunction _possibleConstructorReturn(self, call) {\r\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\r\n    return call;\r\n  } else if (call !== void 0) {\r\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\r\n  }\r\n\r\n  return assertThisInitialized(self);\r\n}\r\n\r\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 6 */\r\n/***/ (function(module, exports, __nested_webpack_require_7208__) {\r\n\r\nvar setPrototypeOf = __nested_webpack_require_7208__(41);\r\n\r\nfunction _inherits(subClass, superClass) {\r\n  if (typeof superClass !== \"function\" && superClass !== null) {\r\n    throw new TypeError(\"Super expression must either be null or a function\");\r\n  }\r\n\r\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n    constructor: {\r\n      value: subClass,\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  });\r\n  Object.defineProperty(subClass, \"prototype\", {\r\n    writable: false\r\n  });\r\n  if (superClass) setPrototypeOf(subClass, superClass);\r\n}\r\n\r\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 7 */\r\n/***/ (function(module, exports, __nested_webpack_require_7965__) {\r\n\r\nmodule.exports = {\r\n  EPSILON: __nested_webpack_require_7965__(62),\r\n  create: __nested_webpack_require_7965__(63),\r\n  clone: __nested_webpack_require_7965__(156),\r\n  fromValues: __nested_webpack_require_7965__(157),\r\n  copy: __nested_webpack_require_7965__(158),\r\n  set: __nested_webpack_require_7965__(159),\r\n  equals: __nested_webpack_require_7965__(160),\r\n  exactEquals: __nested_webpack_require_7965__(161),\r\n  add: __nested_webpack_require_7965__(162),\r\n  subtract: __nested_webpack_require_7965__(64),\r\n  sub: __nested_webpack_require_7965__(163),\r\n  multiply: __nested_webpack_require_7965__(65),\r\n  mul: __nested_webpack_require_7965__(164),\r\n  divide: __nested_webpack_require_7965__(66),\r\n  div: __nested_webpack_require_7965__(165),\r\n  inverse: __nested_webpack_require_7965__(166),\r\n  min: __nested_webpack_require_7965__(167),\r\n  max: __nested_webpack_require_7965__(168),\r\n  rotate: __nested_webpack_require_7965__(169),\r\n  floor: __nested_webpack_require_7965__(170),\r\n  ceil: __nested_webpack_require_7965__(171),\r\n  round: __nested_webpack_require_7965__(172),\r\n  scale: __nested_webpack_require_7965__(173),\r\n  scaleAndAdd: __nested_webpack_require_7965__(174),\r\n  distance: __nested_webpack_require_7965__(67),\r\n  dist: __nested_webpack_require_7965__(175),\r\n  squaredDistance: __nested_webpack_require_7965__(68),\r\n  sqrDist: __nested_webpack_require_7965__(176),\r\n  length: __nested_webpack_require_7965__(69),\r\n  len: __nested_webpack_require_7965__(177),\r\n  squaredLength: __nested_webpack_require_7965__(70),\r\n  sqrLen: __nested_webpack_require_7965__(178),\r\n  negate: __nested_webpack_require_7965__(179),\r\n  normalize: __nested_webpack_require_7965__(180),\r\n  dot: __nested_webpack_require_7965__(181),\r\n  cross: __nested_webpack_require_7965__(182),\r\n  lerp: __nested_webpack_require_7965__(183),\r\n  random: __nested_webpack_require_7965__(184),\r\n  transformMat2: __nested_webpack_require_7965__(185),\r\n  transformMat2d: __nested_webpack_require_7965__(186),\r\n  transformMat3: __nested_webpack_require_7965__(187),\r\n  transformMat4: __nested_webpack_require_7965__(188),\r\n  forEach: __nested_webpack_require_7965__(189),\r\n  limit: __nested_webpack_require_7965__(190)\r\n};\r\n\r\n/***/ }),\r\n/* 8 */\r\n/***/ (function(module, exports, __nested_webpack_require_9719__) {\r\n\r\nmodule.exports = __nested_webpack_require_9719__(224);\r\n\r\n/***/ }),\r\n/* 9 */\r\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_9856__) {\r\n\r\n\"use strict\";\r\n\r\n// EXPORTS\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"h\", function() { return /* binding */ imageRef; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"i\", function() { return /* binding */ otsuThreshold; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"b\", function() { return /* binding */ cv_utils_cluster; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"j\", function() { return /* binding */ topGeneric; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"e\", function() { return /* binding */ grayAndHalfSampleFromCanvasData; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"c\", function() { return /* binding */ computeGray; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"f\", function() { return /* binding */ halfSample; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"g\", function() { return /* binding */ hsv2rgb; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"a\", function() { return /* binding */ calculatePatchSize; });\r\n__nested_webpack_require_9856__.d(__webpack_exports__, \"d\", function() { return /* binding */ computeImageArea; });\r\n\r\n// UNUSED EXPORTS: computeIntegralImage2, computeIntegralImage, thresholdImage, computeHistogram, sharpenLine, determineOtsuThreshold, computeBinaryImage, Tracer, DILATE, ERODE, dilate, erode, subtract, bitwiseOr, countNonZero, grayArrayFromImage, grayArrayFromContext, loadImageArray, _computeDivisors, _parseCSSDimensionValues, _dimensionsConverters\r\n\r\n// EXTERNAL MODULE: ./node_modules/gl-vec2/index.js\r\nvar gl_vec2 = __nested_webpack_require_9856__(7);\r\n\r\n// EXTERNAL MODULE: ./node_modules/gl-vec3/index.js\r\nvar gl_vec3 = __nested_webpack_require_9856__(84);\r\n\r\n// CONCATENATED MODULE: ./src/common/cluster.js\r\n// TODO: cluster.js and cv_utils.js are pretty tightly intertwined, making for a complex conversion\r\n// into typescript. be warned. :-)\r\n\r\nvar vec2 = {\r\n  clone: gl_vec2[\"clone\"],\r\n  dot: gl_vec2[\"dot\"]\r\n};\r\n/**\r\n * Creates a cluster for grouping similar orientations of datapoints\r\n */\r\n\r\n/* harmony default export */ var cluster = ({\r\n  create: function create(point, threshold) {\r\n    var points = [];\r\n    var center = {\r\n      rad: 0,\r\n      vec: vec2.clone([0, 0])\r\n    };\r\n    var pointMap = {};\r\n\r\n    function _add(pointToAdd) {\r\n      pointMap[pointToAdd.id] = pointToAdd;\r\n      points.push(pointToAdd);\r\n    }\r\n\r\n    function updateCenter() {\r\n      var i;\r\n      var sum = 0;\r\n\r\n      for (i = 0; i < points.length; i++) {\r\n        sum += points[i].rad;\r\n      }\r\n\r\n      center.rad = sum / points.length;\r\n      center.vec = vec2.clone([Math.cos(center.rad), Math.sin(center.rad)]);\r\n    }\r\n\r\n    function init() {\r\n      _add(point);\r\n\r\n      updateCenter();\r\n    }\r\n\r\n    init();\r\n    return {\r\n      add: function add(pointToAdd) {\r\n        if (!pointMap[pointToAdd.id]) {\r\n          _add(pointToAdd);\r\n\r\n          updateCenter();\r\n        }\r\n      },\r\n      fits: function fits(otherPoint) {\r\n        // check cosine similarity to center-angle\r\n        var similarity = Math.abs(vec2.dot(otherPoint.point.vec, center.vec));\r\n\r\n        if (similarity > threshold) {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      },\r\n      getPoints: function getPoints() {\r\n        return points;\r\n      },\r\n      getCenter: function getCenter() {\r\n        return center;\r\n      }\r\n    };\r\n  },\r\n  createPoint: function createPoint(newPoint, id, property) {\r\n    return {\r\n      rad: newPoint[property],\r\n      point: newPoint,\r\n      id: id\r\n    };\r\n  }\r\n});\r\n// EXTERNAL MODULE: ./src/common/array_helper.ts\r\nvar array_helper = __nested_webpack_require_9856__(11);\r\n\r\n// CONCATENATED MODULE: ./src/common/cv_utils.js\r\n/* eslint-disable no-mixed-operators */\r\n\r\n/* eslint-disable no-bitwise */\r\n\r\n\r\n\r\n\r\nvar cv_utils_vec2 = {\r\n  clone: gl_vec2[\"clone\"]\r\n};\r\nvar vec3 = {\r\n  clone: gl_vec3[\"clone\"]\r\n};\r\n/**\r\n * @param x x-coordinate\r\n * @param y y-coordinate\r\n * @return ImageReference {x,y} Coordinate\r\n */\r\n\r\nfunction imageRef(x, y) {\r\n  var that = {\r\n    x: x,\r\n    y: y,\r\n    toVec2: function toVec2() {\r\n      return cv_utils_vec2.clone([this.x, this.y]);\r\n    },\r\n    toVec3: function toVec3() {\r\n      return vec3.clone([this.x, this.y, 1]);\r\n    },\r\n    round: function round() {\r\n      this.x = this.x > 0.0 ? Math.floor(this.x + 0.5) : Math.floor(this.x - 0.5);\r\n      this.y = this.y > 0.0 ? Math.floor(this.y + 0.5) : Math.floor(this.y - 0.5);\r\n      return this;\r\n    }\r\n  };\r\n  return that;\r\n}\r\n/**\r\n * Computes an integral image of a given grayscale image.\r\n * @param imageDataContainer {ImageDataContainer} the image to be integrated\r\n */\r\n\r\nfunction computeIntegralImage2(imageWrapper, integralWrapper) {\r\n  var imageData = imageWrapper.data;\r\n  var width = imageWrapper.size.x;\r\n  var height = imageWrapper.size.y;\r\n  var integralImageData = integralWrapper.data;\r\n  var sum = 0;\r\n  var posA = 0;\r\n  var posB = 0;\r\n  var posC = 0;\r\n  var posD = 0;\r\n  var x;\r\n  var y; // sum up first column\r\n\r\n  posB = width;\r\n  sum = 0;\r\n\r\n  for (y = 1; y < height; y++) {\r\n    sum += imageData[posA];\r\n    integralImageData[posB] += sum;\r\n    posA += width;\r\n    posB += width;\r\n  }\r\n\r\n  posA = 0;\r\n  posB = 1;\r\n  sum = 0;\r\n\r\n  for (x = 1; x < width; x++) {\r\n    sum += imageData[posA];\r\n    integralImageData[posB] += sum;\r\n    posA++;\r\n    posB++;\r\n  }\r\n\r\n  for (y = 1; y < height; y++) {\r\n    posA = y * width + 1;\r\n    posB = (y - 1) * width + 1;\r\n    posC = y * width;\r\n    posD = (y - 1) * width;\r\n\r\n    for (x = 1; x < width; x++) {\r\n      integralImageData[posA] += imageData[posA] + integralImageData[posB] + integralImageData[posC] - integralImageData[posD];\r\n      posA++;\r\n      posB++;\r\n      posC++;\r\n      posD++;\r\n    }\r\n  }\r\n}\r\nfunction computeIntegralImage(imageWrapper, integralWrapper) {\r\n  var imageData = imageWrapper.data;\r\n  var width = imageWrapper.size.x;\r\n  var height = imageWrapper.size.y;\r\n  var integralImageData = integralWrapper.data;\r\n  var sum = 0; // sum up first row\r\n\r\n  for (var i = 0; i < width; i++) {\r\n    sum += imageData[i];\r\n    integralImageData[i] = sum;\r\n  }\r\n\r\n  for (var v = 1; v < height; v++) {\r\n    sum = 0;\r\n\r\n    for (var u = 0; u < width; u++) {\r\n      sum += imageData[v * width + u];\r\n      integralImageData[v * width + u] = sum + integralImageData[(v - 1) * width + u];\r\n    }\r\n  }\r\n}\r\nfunction thresholdImage(imageWrapper, threshold, targetWrapper) {\r\n  if (!targetWrapper) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    targetWrapper = imageWrapper;\r\n  }\r\n\r\n  var imageData = imageWrapper.data;\r\n  var length = imageData.length;\r\n  var targetData = targetWrapper.data;\r\n\r\n  while (length--) {\r\n    targetData[length] = imageData[length] < threshold ? 1 : 0;\r\n  }\r\n}\r\nfunction computeHistogram(imageWrapper, bitsPerPixel) {\r\n  if (!bitsPerPixel) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    bitsPerPixel = 8;\r\n  }\r\n\r\n  var imageData = imageWrapper.data;\r\n  var length = imageData.length;\r\n  var bitShift = 8 - bitsPerPixel;\r\n  var bucketCnt = 1 << bitsPerPixel;\r\n  var hist = new Int32Array(bucketCnt);\r\n\r\n  while (length--) {\r\n    hist[imageData[length] >> bitShift]++;\r\n  }\r\n\r\n  return hist;\r\n}\r\nfunction sharpenLine(line) {\r\n  var i;\r\n  var length = line.length;\r\n  var left = line[0];\r\n  var center = line[1];\r\n  var right;\r\n\r\n  for (i = 1; i < length - 1; i++) {\r\n    right = line[i + 1]; //  -1 4 -1 kernel\r\n    // eslint-disable-next-line no-param-reassign\r\n\r\n    line[i - 1] = center * 2 - left - right & 255;\r\n    left = center;\r\n    center = right;\r\n  }\r\n\r\n  return line;\r\n}\r\nfunction determineOtsuThreshold(imageWrapper) {\r\n  var bitsPerPixel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\r\n  var hist;\r\n  var bitShift = 8 - bitsPerPixel;\r\n\r\n  function px(init, end) {\r\n    var sum = 0;\r\n\r\n    for (var i = init; i <= end; i++) {\r\n      sum += hist[i];\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  function mx(init, end) {\r\n    var sum = 0;\r\n\r\n    for (var i = init; i <= end; i++) {\r\n      sum += i * hist[i];\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  function determineThreshold() {\r\n    var vet = [0];\r\n    var p1;\r\n    var p2;\r\n    var p12;\r\n    var m1;\r\n    var m2;\r\n    var m12;\r\n    var max = (1 << bitsPerPixel) - 1;\r\n    hist = computeHistogram(imageWrapper, bitsPerPixel);\r\n\r\n    for (var k = 1; k < max; k++) {\r\n      p1 = px(0, k);\r\n      p2 = px(k + 1, max);\r\n      p12 = p1 * p2;\r\n\r\n      if (p12 === 0) {\r\n        p12 = 1;\r\n      }\r\n\r\n      m1 = mx(0, k) * p2;\r\n      m2 = mx(k + 1, max) * p1;\r\n      m12 = m1 - m2;\r\n      vet[k] = m12 * m12 / p12;\r\n    }\r\n\r\n    return array_helper[\"a\" /* default */].maxIndex(vet);\r\n  }\r\n\r\n  var threshold = determineThreshold();\r\n  return threshold << bitShift;\r\n}\r\nfunction otsuThreshold(imageWrapper, targetWrapper) {\r\n  var threshold = determineOtsuThreshold(imageWrapper);\r\n  thresholdImage(imageWrapper, threshold, targetWrapper);\r\n  return threshold;\r\n} // local thresholding\r\n\r\nfunction computeBinaryImage(imageWrapper, integralWrapper, targetWrapper) {\r\n  computeIntegralImage(imageWrapper, integralWrapper);\r\n\r\n  if (!targetWrapper) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    targetWrapper = imageWrapper;\r\n  }\r\n\r\n  var imageData = imageWrapper.data;\r\n  var targetData = targetWrapper.data;\r\n  var width = imageWrapper.size.x;\r\n  var height = imageWrapper.size.y;\r\n  var integralImageData = integralWrapper.data;\r\n  var sum = 0;\r\n  var v;\r\n  var u;\r\n  var kernel = 3;\r\n  var A;\r\n  var B;\r\n  var C;\r\n  var D;\r\n  var avg;\r\n  var size = (kernel * 2 + 1) * (kernel * 2 + 1); // clear out top & bottom-border\r\n\r\n  for (v = 0; v <= kernel; v++) {\r\n    for (u = 0; u < width; u++) {\r\n      targetData[v * width + u] = 0;\r\n      targetData[(height - 1 - v) * width + u] = 0;\r\n    }\r\n  } // clear out left & right border\r\n\r\n\r\n  for (v = kernel; v < height - kernel; v++) {\r\n    for (u = 0; u <= kernel; u++) {\r\n      targetData[v * width + u] = 0;\r\n      targetData[v * width + (width - 1 - u)] = 0;\r\n    }\r\n  }\r\n\r\n  for (v = kernel + 1; v < height - kernel - 1; v++) {\r\n    for (u = kernel + 1; u < width - kernel; u++) {\r\n      A = integralImageData[(v - kernel - 1) * width + (u - kernel - 1)];\r\n      B = integralImageData[(v - kernel - 1) * width + (u + kernel)];\r\n      C = integralImageData[(v + kernel) * width + (u - kernel - 1)];\r\n      D = integralImageData[(v + kernel) * width + (u + kernel)];\r\n      sum = D - C - B + A;\r\n      avg = sum / size;\r\n      targetData[v * width + u] = imageData[v * width + u] > avg + 5 ? 0 : 1;\r\n    }\r\n  }\r\n}\r\nfunction cv_utils_cluster(points, threshold, property) {\r\n  var i;\r\n  var k;\r\n  var thisCluster;\r\n  var point;\r\n  var clusters = [];\r\n\r\n  if (!property) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    property = 'rad';\r\n  }\r\n\r\n  function addToCluster(newPoint) {\r\n    var found = false;\r\n\r\n    for (k = 0; k < clusters.length; k++) {\r\n      thisCluster = clusters[k];\r\n\r\n      if (thisCluster.fits(newPoint)) {\r\n        thisCluster.add(newPoint);\r\n        found = true;\r\n      }\r\n    }\r\n\r\n    return found;\r\n  } // iterate over each cloud\r\n\r\n\r\n  for (i = 0; i < points.length; i++) {\r\n    point = cluster.createPoint(points[i], i, property);\r\n\r\n    if (!addToCluster(point)) {\r\n      clusters.push(cluster.create(point, threshold));\r\n    }\r\n  }\r\n\r\n  return clusters;\r\n}\r\nvar Tracer = {\r\n  trace: function trace(points, vec) {\r\n    var iteration;\r\n    var maxIterations = 10;\r\n    var top = [];\r\n    var result = [];\r\n    var centerPos = 0;\r\n    var currentPos = 0;\r\n\r\n    function trace(idx, forward) {\r\n      var to;\r\n      var toIdx;\r\n      var predictedPos;\r\n      var thresholdX = 1;\r\n      var thresholdY = Math.abs(vec[1] / 10);\r\n      var found = false;\r\n\r\n      function match(pos, predicted) {\r\n        if (pos.x > predicted.x - thresholdX && pos.x < predicted.x + thresholdX && pos.y > predicted.y - thresholdY && pos.y < predicted.y + thresholdY) {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      } // check if the next index is within the vec specifications\r\n      // if not, check as long as the threshold is met\r\n\r\n\r\n      var from = points[idx];\r\n\r\n      if (forward) {\r\n        predictedPos = {\r\n          x: from.x + vec[0],\r\n          y: from.y + vec[1]\r\n        };\r\n      } else {\r\n        predictedPos = {\r\n          x: from.x - vec[0],\r\n          y: from.y - vec[1]\r\n        };\r\n      }\r\n\r\n      toIdx = forward ? idx + 1 : idx - 1;\r\n      to = points[toIdx]; // eslint-disable-next-line no-cond-assign\r\n\r\n      while (to && (found = match(to, predictedPos)) !== true && Math.abs(to.y - from.y) < vec[1]) {\r\n        toIdx = forward ? toIdx + 1 : toIdx - 1;\r\n        to = points[toIdx];\r\n      }\r\n\r\n      return found ? toIdx : null;\r\n    }\r\n\r\n    for (iteration = 0; iteration < maxIterations; iteration++) {\r\n      // randomly select point to start with\r\n      centerPos = Math.floor(Math.random() * points.length); // trace forward\r\n\r\n      top = [];\r\n      currentPos = centerPos;\r\n      top.push(points[currentPos]); // eslint-disable-next-line no-cond-assign\r\n\r\n      while ((currentPos = trace(currentPos, true)) !== null) {\r\n        top.push(points[currentPos]);\r\n      }\r\n\r\n      if (centerPos > 0) {\r\n        currentPos = centerPos; // eslint-disable-next-line no-cond-assign\r\n\r\n        while ((currentPos = trace(currentPos, false)) !== null) {\r\n          top.push(points[currentPos]);\r\n        }\r\n      }\r\n\r\n      if (top.length > result.length) {\r\n        result = top;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n};\r\nvar DILATE = 1;\r\nvar ERODE = 2;\r\nfunction dilate(inImageWrapper, outImageWrapper) {\r\n  var v;\r\n  var u;\r\n  var inImageData = inImageWrapper.data;\r\n  var outImageData = outImageWrapper.data;\r\n  var height = inImageWrapper.size.y;\r\n  var width = inImageWrapper.size.x;\r\n  var sum;\r\n  var yStart1;\r\n  var yStart2;\r\n  var xStart1;\r\n  var xStart2;\r\n\r\n  for (v = 1; v < height - 1; v++) {\r\n    for (u = 1; u < width - 1; u++) {\r\n      yStart1 = v - 1;\r\n      yStart2 = v + 1;\r\n      xStart1 = u - 1;\r\n      xStart2 = u + 1;\r\n      sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\r\n      outImageData[v * width + u] = sum > 0 ? 1 : 0;\r\n    }\r\n  }\r\n}\r\nfunction erode(inImageWrapper, outImageWrapper) {\r\n  var v;\r\n  var u;\r\n  var inImageData = inImageWrapper.data;\r\n  var outImageData = outImageWrapper.data;\r\n  var height = inImageWrapper.size.y;\r\n  var width = inImageWrapper.size.x;\r\n  var sum;\r\n  var yStart1;\r\n  var yStart2;\r\n  var xStart1;\r\n  var xStart2;\r\n\r\n  for (v = 1; v < height - 1; v++) {\r\n    for (u = 1; u < width - 1; u++) {\r\n      yStart1 = v - 1;\r\n      yStart2 = v + 1;\r\n      xStart1 = u - 1;\r\n      xStart2 = u + 1;\r\n      sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\r\n      outImageData[v * width + u] = sum === 5 ? 1 : 0;\r\n    }\r\n  }\r\n}\r\nfunction subtract(aImageWrapper, bImageWrapper, resultImageWrapper) {\r\n  if (!resultImageWrapper) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    resultImageWrapper = aImageWrapper;\r\n  }\r\n\r\n  var length = aImageWrapper.data.length;\r\n  var aImageData = aImageWrapper.data;\r\n  var bImageData = bImageWrapper.data;\r\n  var cImageData = resultImageWrapper.data;\r\n\r\n  while (length--) {\r\n    cImageData[length] = aImageData[length] - bImageData[length];\r\n  }\r\n}\r\nfunction bitwiseOr(aImageWrapper, bImageWrapper, resultImageWrapper) {\r\n  if (!resultImageWrapper) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    resultImageWrapper = aImageWrapper;\r\n  }\r\n\r\n  var length = aImageWrapper.data.length;\r\n  var aImageData = aImageWrapper.data;\r\n  var bImageData = bImageWrapper.data;\r\n  var cImageData = resultImageWrapper.data;\r\n\r\n  while (length--) {\r\n    cImageData[length] = aImageData[length] || bImageData[length];\r\n  }\r\n}\r\nfunction countNonZero(imageWrapper) {\r\n  var length = imageWrapper.data.length;\r\n  var data = imageWrapper.data;\r\n  var sum = 0;\r\n\r\n  while (length--) {\r\n    sum += data[length];\r\n  }\r\n\r\n  return sum;\r\n}\r\nfunction topGeneric(list, top, scoreFunc) {\r\n  var i;\r\n  var minIdx = 0;\r\n  var min = 0;\r\n  var queue = [];\r\n  var score;\r\n  var hit;\r\n  var pos;\r\n\r\n  for (i = 0; i < top; i++) {\r\n    queue[i] = {\r\n      score: 0,\r\n      item: null\r\n    };\r\n  }\r\n\r\n  for (i = 0; i < list.length; i++) {\r\n    score = scoreFunc.apply(this, [list[i]]);\r\n\r\n    if (score > min) {\r\n      hit = queue[minIdx];\r\n      hit.score = score;\r\n      hit.item = list[i];\r\n      min = Number.MAX_VALUE;\r\n\r\n      for (pos = 0; pos < top; pos++) {\r\n        if (queue[pos].score < min) {\r\n          min = queue[pos].score;\r\n          minIdx = pos;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return queue;\r\n}\r\nfunction grayArrayFromImage(htmlImage, offsetX, ctx, array) {\r\n  ctx.drawImage(htmlImage, offsetX, 0, htmlImage.width, htmlImage.height);\r\n  var ctxData = ctx.getImageData(offsetX, 0, htmlImage.width, htmlImage.height).data;\r\n  computeGray(ctxData, array);\r\n}\r\nfunction grayArrayFromContext(ctx, size, offset, array) {\r\n  var ctxData = ctx.getImageData(offset.x, offset.y, size.x, size.y).data;\r\n  computeGray(ctxData, array);\r\n}\r\nfunction grayAndHalfSampleFromCanvasData(canvasData, size, outArray) {\r\n  var topRowIdx = 0;\r\n  var bottomRowIdx = size.x;\r\n  var endIdx = Math.floor(canvasData.length / 4);\r\n  var outWidth = size.x / 2;\r\n  var outImgIdx = 0;\r\n  var inWidth = size.x;\r\n  var i;\r\n\r\n  while (bottomRowIdx < endIdx) {\r\n    for (i = 0; i < outWidth; i++) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      outArray[outImgIdx] = (0.299 * canvasData[topRowIdx * 4 + 0] + 0.587 * canvasData[topRowIdx * 4 + 1] + 0.114 * canvasData[topRowIdx * 4 + 2] + (0.299 * canvasData[(topRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(topRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(topRowIdx + 1) * 4 + 2]) + (0.299 * canvasData[bottomRowIdx * 4 + 0] + 0.587 * canvasData[bottomRowIdx * 4 + 1] + 0.114 * canvasData[bottomRowIdx * 4 + 2]) + (0.299 * canvasData[(bottomRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(bottomRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(bottomRowIdx + 1) * 4 + 2])) / 4;\r\n      outImgIdx++;\r\n      topRowIdx += 2;\r\n      bottomRowIdx += 2;\r\n    }\r\n\r\n    topRowIdx += inWidth;\r\n    bottomRowIdx += inWidth;\r\n  }\r\n}\r\nfunction computeGray(imageData, outArray, config) {\r\n  var l = imageData.length / 4 | 0;\r\n  var singleChannel = config && config.singleChannel === true;\r\n\r\n  if (singleChannel) {\r\n    for (var i = 0; i < l; i++) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      outArray[i] = imageData[i * 4 + 0];\r\n    }\r\n  } else {\r\n    for (var _i = 0; _i < l; _i++) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      outArray[_i] = 0.299 * imageData[_i * 4 + 0] + 0.587 * imageData[_i * 4 + 1] + 0.114 * imageData[_i * 4 + 2];\r\n    }\r\n  }\r\n}\r\nfunction loadImageArray(src, callback) {\r\n  var canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document && document.createElement('canvas');\r\n  var img = new Image();\r\n  img.callback = callback;\r\n\r\n  img.onload = function () {\r\n    // eslint-disable-next-line no-param-reassign\r\n    canvas.width = this.width; // eslint-disable-next-line no-param-reassign\r\n\r\n    canvas.height = this.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.drawImage(this, 0, 0);\r\n    var array = new Uint8Array(this.width * this.height);\r\n    ctx.drawImage(this, 0, 0);\r\n\r\n    var _ctx$getImageData = ctx.getImageData(0, 0, this.width, this.height),\r\n        data = _ctx$getImageData.data;\r\n\r\n    computeGray(data, array);\r\n    this.callback(array, {\r\n      x: this.width,\r\n      y: this.height\r\n    }, this);\r\n  };\r\n\r\n  img.src = src;\r\n}\r\n/**\r\n * @param inImg {ImageWrapper} input image to be sampled\r\n * @param outImg {ImageWrapper} to be stored in\r\n */\r\n\r\nfunction halfSample(inImgWrapper, outImgWrapper) {\r\n  var inImg = inImgWrapper.data;\r\n  var inWidth = inImgWrapper.size.x;\r\n  var outImg = outImgWrapper.data;\r\n  var topRowIdx = 0;\r\n  var bottomRowIdx = inWidth;\r\n  var endIdx = inImg.length;\r\n  var outWidth = inWidth / 2;\r\n  var outImgIdx = 0;\r\n\r\n  while (bottomRowIdx < endIdx) {\r\n    for (var i = 0; i < outWidth; i++) {\r\n      outImg[outImgIdx] = Math.floor((inImg[topRowIdx] + inImg[topRowIdx + 1] + inImg[bottomRowIdx] + inImg[bottomRowIdx + 1]) / 4);\r\n      outImgIdx++;\r\n      topRowIdx += 2;\r\n      bottomRowIdx += 2;\r\n    }\r\n\r\n    topRowIdx += inWidth;\r\n    bottomRowIdx += inWidth;\r\n  }\r\n}\r\nfunction hsv2rgb(hsv) {\r\n  var rgb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\r\n  var h = hsv[0];\r\n  var s = hsv[1];\r\n  var v = hsv[2];\r\n  var c = v * s;\r\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\r\n  var m = v - c;\r\n  var r = 0;\r\n  var g = 0;\r\n  var b = 0;\r\n\r\n  if (h < 60) {\r\n    r = c;\r\n    g = x;\r\n  } else if (h < 120) {\r\n    r = x;\r\n    g = c;\r\n  } else if (h < 180) {\r\n    g = c;\r\n    b = x;\r\n  } else if (h < 240) {\r\n    g = x;\r\n    b = c;\r\n  } else if (h < 300) {\r\n    r = x;\r\n    b = c;\r\n  } else if (h < 360) {\r\n    r = c;\r\n    b = x;\r\n  } // eslint-disable-next-line no-param-reassign\r\n\r\n\r\n  rgb[0] = (r + m) * 255 | 0; // eslint-disable-next-line no-param-reassign\r\n\r\n  rgb[1] = (g + m) * 255 | 0; // eslint-disable-next-line no-param-reassign\r\n\r\n  rgb[2] = (b + m) * 255 | 0;\r\n  return rgb;\r\n}\r\nfunction _computeDivisors(n) {\r\n  var largeDivisors = [];\r\n  var divisors = [];\r\n\r\n  for (var i = 1; i < Math.sqrt(n) + 1; i++) {\r\n    if (n % i === 0) {\r\n      divisors.push(i);\r\n\r\n      if (i !== n / i) {\r\n        largeDivisors.unshift(Math.floor(n / i));\r\n      }\r\n    }\r\n  }\r\n\r\n  return divisors.concat(largeDivisors);\r\n}\r\n\r\nfunction _computeIntersection(arr1, arr2) {\r\n  var i = 0;\r\n  var j = 0;\r\n  var result = [];\r\n\r\n  while (i < arr1.length && j < arr2.length) {\r\n    if (arr1[i] === arr2[j]) {\r\n      result.push(arr1[i]);\r\n      i++;\r\n      j++;\r\n    } else if (arr1[i] > arr2[j]) {\r\n      j++;\r\n    } else {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction calculatePatchSize(patchSize, imgSize) {\r\n  var divisorsX = _computeDivisors(imgSize.x);\r\n\r\n  var divisorsY = _computeDivisors(imgSize.y);\r\n\r\n  var wideSide = Math.max(imgSize.x, imgSize.y);\r\n\r\n  var common = _computeIntersection(divisorsX, divisorsY);\r\n\r\n  var nrOfPatchesList = [8, 10, 15, 20, 32, 60, 80];\r\n  var nrOfPatchesMap = {\r\n    'x-small': 5,\r\n    small: 4,\r\n    medium: 3,\r\n    large: 2,\r\n    'x-large': 1\r\n  };\r\n  var nrOfPatchesIdx = nrOfPatchesMap[patchSize] || nrOfPatchesMap.medium;\r\n  var nrOfPatches = nrOfPatchesList[nrOfPatchesIdx];\r\n  var desiredPatchSize = Math.floor(wideSide / nrOfPatches);\r\n  var optimalPatchSize;\r\n\r\n  function findPatchSizeForDivisors(divisors) {\r\n    var i = 0;\r\n    var found = divisors[Math.floor(divisors.length / 2)];\r\n\r\n    while (i < divisors.length - 1 && divisors[i] < desiredPatchSize) {\r\n      i++;\r\n    }\r\n\r\n    if (i > 0) {\r\n      if (Math.abs(divisors[i] - desiredPatchSize) > Math.abs(divisors[i - 1] - desiredPatchSize)) {\r\n        found = divisors[i - 1];\r\n      } else {\r\n        found = divisors[i];\r\n      }\r\n    }\r\n\r\n    if (desiredPatchSize / found < nrOfPatchesList[nrOfPatchesIdx + 1] / nrOfPatchesList[nrOfPatchesIdx] && desiredPatchSize / found > nrOfPatchesList[nrOfPatchesIdx - 1] / nrOfPatchesList[nrOfPatchesIdx]) {\r\n      return {\r\n        x: found,\r\n        y: found\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  optimalPatchSize = findPatchSizeForDivisors(common);\r\n\r\n  if (!optimalPatchSize) {\r\n    optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(wideSide));\r\n\r\n    if (!optimalPatchSize) {\r\n      optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(desiredPatchSize * nrOfPatches));\r\n    }\r\n  }\r\n\r\n  return optimalPatchSize;\r\n}\r\nfunction _parseCSSDimensionValues(value) {\r\n  var dimension = {\r\n    value: parseFloat(value),\r\n    unit: value.indexOf('%') === value.length - 1 ? '%' : '%'\r\n  };\r\n  return dimension;\r\n}\r\nvar _dimensionsConverters = {\r\n  top: function top(dimension, context) {\r\n    return dimension.unit === '%' ? Math.floor(context.height * (dimension.value / 100)) : null;\r\n  },\r\n  right: function right(dimension, context) {\r\n    return dimension.unit === '%' ? Math.floor(context.width - context.width * (dimension.value / 100)) : null;\r\n  },\r\n  bottom: function bottom(dimension, context) {\r\n    return dimension.unit === '%' ? Math.floor(context.height - context.height * (dimension.value / 100)) : null;\r\n  },\r\n  left: function left(dimension, context) {\r\n    return dimension.unit === '%' ? Math.floor(context.width * (dimension.value / 100)) : null;\r\n  }\r\n};\r\nfunction computeImageArea(inputWidth, inputHeight, area) {\r\n  var context = {\r\n    width: inputWidth,\r\n    height: inputHeight\r\n  };\r\n  var parsedArea = Object.keys(area).reduce(function (result, key) {\r\n    var value = area[key];\r\n\r\n    var parsed = _parseCSSDimensionValues(value);\r\n\r\n    var calculated = _dimensionsConverters[key](parsed, context); // eslint-disable-next-line no-param-reassign\r\n\r\n\r\n    result[key] = calculated;\r\n    return result;\r\n  }, {});\r\n  return {\r\n    sx: parsedArea.left,\r\n    sy: parsedArea.top,\r\n    sw: parsedArea.right - parsedArea.left,\r\n    sh: parsedArea.bottom - parsedArea.top\r\n  };\r\n}\r\n\r\n/***/ }),\r\n/* 10 */\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n\r\n\"use strict\";\r\n// TODO: XYPosition should be an XYObject, but that breaks XYDefinition, which breaks drawPath() below.\r\n// XYDefinition tells us which component of a given array or object is the \"X\" and which is the \"Y\".\r\n// Usually this is 0 for X and 1 for Y, but might be used as 'x' for x and 'y' for Y.\r\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\r\n  drawRect: function drawRect(pos, size, ctx, style) {\r\n    ctx.strokeStyle = style.color;\r\n    ctx.fillStyle = style.color;\r\n    ctx.lineWidth = style.lineWidth || 1;\r\n    ctx.beginPath();\r\n    ctx.strokeRect(pos.x, pos.y, size.x, size.y);\r\n  },\r\n  drawPath: function drawPath(path, def, ctx, style) {\r\n    ctx.strokeStyle = style.color;\r\n    ctx.fillStyle = style.color;\r\n    ctx.lineWidth = style.lineWidth;\r\n    ctx.beginPath();\r\n    ctx.moveTo(path[0][def.x], path[0][def.y]);\r\n\r\n    for (var j = 1; j < path.length; j++) {\r\n      ctx.lineTo(path[j][def.x], path[j][def.y]);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n  },\r\n  drawImage: function drawImage(imageData, size, ctx) {\r\n    var canvasData = ctx.getImageData(0, 0, size.x, size.y);\r\n    var data = canvasData.data;\r\n    var canvasDataPos = data.length;\r\n    var imageDataPos = imageData.length;\r\n\r\n    if (canvasDataPos / imageDataPos !== 4) {\r\n      return false;\r\n    }\r\n\r\n    while (imageDataPos--) {\r\n      var value = imageData[imageDataPos];\r\n      data[--canvasDataPos] = 255;\r\n      data[--canvasDataPos] = value;\r\n      data[--canvasDataPos] = value;\r\n      data[--canvasDataPos] = value;\r\n    }\r\n\r\n    ctx.putImageData(canvasData, 0, 0);\r\n    return true;\r\n  }\r\n});\r\n\r\n/***/ }),\r\n/* 11 */\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n\r\n\"use strict\";\r\n/* eslint-disable no-param-reassign */\r\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\r\n  init: function init(arr, val) {\r\n    arr.fill(val);\r\n  },\r\n\r\n  /**\r\n   * Shuffles the content of an array\r\n   */\r\n  shuffle: function shuffle(arr) {\r\n    // Durstenfeld shuffle algorithm\r\n    // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n    for (var i = arr.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var _ref = [arr[j], arr[i]];\r\n      arr[i] = _ref[0];\r\n      arr[j] = _ref[1];\r\n    }\r\n  },\r\n  toPointList: function toPointList(arr) {\r\n    var rows = arr.reduce(function (p, n) {\r\n      var row = \"[\".concat(n.join(','), \"]\");\r\n      p.push(row);\r\n      return p;\r\n    }, []);\r\n    return \"[\".concat(rows.join(',\\r\\n'), \"]\");\r\n  },\r\n\r\n  /**\r\n   * returns the elements which's score is bigger than the threshold\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  threshold: function threshold(arr, _threshold, scoreFunc) {\r\n    var queue = arr.reduce(function (prev, next) {\r\n      if (scoreFunc.apply(arr, [next]) >= _threshold) {\r\n        prev.push(next);\r\n      }\r\n\r\n      return prev;\r\n    }, []);\r\n    return queue;\r\n  },\r\n  maxIndex: function maxIndex(arr) {\r\n    var max = 0;\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] > arr[max]) {\r\n        max = i;\r\n      }\r\n    }\r\n\r\n    return max;\r\n  },\r\n  max: function max(arr) {\r\n    var max = 0;\r\n\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i] > max) {\r\n        max = arr[i];\r\n      }\r\n    }\r\n\r\n    return max;\r\n  },\r\n  sum: function sum(arr) {\r\n    var length = arr.length;\r\n    var sum = 0;\r\n\r\n    while (length--) {\r\n      sum += arr[length];\r\n    }\r\n\r\n    return sum;\r\n  }\r\n});\r\n\r\n/***/ }),\r\n/* 12 */\r\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_38733__) {\r\n\r\n\"use strict\";\r\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_38733__(83);\r\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_38733__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);\r\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_38733__(3);\r\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__nested_webpack_require_38733__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);\r\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_38733__(4);\r\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__nested_webpack_require_38733__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);\r\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_38733__(0);\r\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__nested_webpack_require_38733__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);\r\n/* harmony import */ var gl_vec2__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_38733__(7);\r\n/* harmony import */ var gl_vec2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__nested_webpack_require_38733__.n(gl_vec2__WEBPACK_IMPORTED_MODULE_4__);\r\n/* harmony import */ var _array_helper__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_38733__(11);\r\n/* harmony import */ var _cv_utils__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_38733__(9);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar vec2 = {\r\n  clone: gl_vec2__WEBPACK_IMPORTED_MODULE_4__[\"clone\"]\r\n};\r\n\r\nfunction assertNumberPositive(val) {\r\n  if (val < 0) {\r\n    throw new Error(\"expected positive number, received \".concat(val));\r\n  }\r\n}\r\n\r\nvar ImageWrapper = /*#__PURE__*/function () {\r\n  // Represents a basic image combining the data and size. In addition, some methods for\r\n  // manipulation are contained within.\r\n  function ImageWrapper(size, data) {\r\n    var ArrayType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Uint8Array;\r\n    var initialize = arguments.length > 3 ? arguments[3] : undefined;\r\n\r\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ImageWrapper);\r\n\r\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"data\", void 0);\r\n\r\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"size\", void 0);\r\n\r\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"indexMapping\", void 0);\r\n\r\n    if (!data) {\r\n      this.data = new ArrayType(size.x * size.y);\r\n\r\n      if (initialize) {\r\n        _array_helper__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].init(this.data, 0);\r\n      }\r\n    } else {\r\n      this.data = data;\r\n    }\r\n\r\n    this.size = size;\r\n  } // tests if a position is within the image, extended out by a border on each side\r\n\r\n\r\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ImageWrapper, [{\r\n    key: \"inImageWithBorder\",\r\n    value: function inImageWithBorder(imgRef) {\r\n      var border = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n      assertNumberPositive(border); // TODO: code_128 starts failing miserably when i only allow imgRef to contain positive numbers.\r\n      // TODO: this doesn't make much sense to me, why does it go negative?  Tests are not affected by\r\n      // returning false, but the whole code_128 reader blows up when i throw on negative imgRef.\r\n      // assertNumberPositive(imgRef.x);\r\n      // assertNumberPositive(imgRef.y);\r\n\r\n      return imgRef.x >= 0 && imgRef.y >= 0 && imgRef.x < this.size.x + border * 2 && imgRef.y < this.size.y + border * 2;\r\n    } // Copy from THIS ImageWrapper to the new imageWrapper parameter, starting at from, stopping at\r\n    // end of new imageWrapper size.\r\n\r\n  }, {\r\n    key: \"subImageAsCopy\",\r\n    value: function subImageAsCopy(imageWrapper, from) {\r\n      assertNumberPositive(from.x);\r\n      assertNumberPositive(from.y);\r\n      var _imageWrapper$size = imageWrapper.size,\r\n          sizeX = _imageWrapper$size.x,\r\n          sizeY = _imageWrapper$size.y;\r\n\r\n      for (var x = 0; x < sizeX; x++) {\r\n        for (var y = 0; y < sizeY; y++) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          imageWrapper.data[y * sizeX + x] = this.data[(from.y + y) * this.size.x + from.x + x];\r\n        }\r\n      }\r\n\r\n      return imageWrapper; // TODO: this function really probably should call into ImageWrapper somewhere to make\r\n      // sure that all of it's parameters are set properly, something like\r\n      // ImageWrapper.UpdateFrom()\r\n      // that might take a provided data and size, and make sure there's no invalid indexMapping\r\n      // hanging around, and such.\r\n    } // Retrieve a grayscale value at the given pixel position of the image\r\n\r\n  }, {\r\n    key: \"get\",\r\n    value: function get(x, y) {\r\n      return this.data[y * this.size.x + x];\r\n    } // Retrieve a grayscale value at the given pixel position of the image (safe, whatever that\r\n    // means)\r\n\r\n  }, {\r\n    key: \"getSafe\",\r\n    value: function getSafe(x, y) {\r\n      // cache indexMapping because if we're using it once, we'll probably need it a bunch more\r\n      // too\r\n      if (!this.indexMapping) {\r\n        this.indexMapping = {\r\n          x: [],\r\n          y: []\r\n        };\r\n\r\n        for (var i = 0; i < this.size.x; i++) {\r\n          this.indexMapping.x[i] = i;\r\n          this.indexMapping.x[i + this.size.x] = i;\r\n        }\r\n\r\n        for (var _i = 0; _i < this.size.y; _i++) {\r\n          this.indexMapping.y[_i] = _i;\r\n          this.indexMapping.y[_i + this.size.y] = _i;\r\n        }\r\n      }\r\n\r\n      return this.data[this.indexMapping.y[y + this.size.y] * this.size.x + this.indexMapping.x[x + this.size.x]];\r\n    } // Sets a given pixel position in the image to the given grayscale value\r\n\r\n  }, {\r\n    key: \"set\",\r\n    value: function set(x, y, value) {\r\n      this.data[y * this.size.x + x] = value;\r\n      delete this.indexMapping;\r\n      return this;\r\n    } // Sets the border of the image (1 pixel) to zero\r\n\r\n  }, {\r\n    key: \"zeroBorder\",\r\n    value: function zeroBorder() {\r\n      var _this$size = this.size,\r\n          width = _this$size.x,\r\n          height = _this$size.y;\r\n\r\n      for (var i = 0; i < width; i++) {\r\n        // eslint-disable-next-line no-multi-assign\r\n        this.data[i] = this.data[(height - 1) * width + i] = 0;\r\n      }\r\n\r\n      for (var _i2 = 1; _i2 < height - 1; _i2++) {\r\n        // eslint-disable-next-line no-multi-assign\r\n        this.data[_i2 * width] = this.data[_i2 * width + (width - 1)] = 0;\r\n      }\r\n\r\n      delete this.indexMapping;\r\n      return this;\r\n    } // TODO: this function is entirely too large for me to reason out right at this moment that i'm handling\r\n    // all the rest of it, so this is a verbatim copy of the javascript source, with only tweaks\r\n    // necessary to get it to run, no thought put into it yet.\r\n\r\n  }, {\r\n    key: \"moments\",\r\n    value: function moments(labelCount) {\r\n      var data = this.data;\r\n      var x;\r\n      var y;\r\n      var height = this.size.y;\r\n      var width = this.size.x;\r\n      var val;\r\n      var ysq;\r\n      var labelSum = [];\r\n      var i;\r\n      var label;\r\n      var mu11;\r\n      var mu02;\r\n      var mu20;\r\n      var x_;\r\n      var y_;\r\n      var tmp;\r\n      var result = [];\r\n      var PI = Math.PI;\r\n      var PI_4 = PI / 4;\r\n\r\n      if (labelCount <= 0) {\r\n        return result;\r\n      }\r\n\r\n      for (i = 0; i < labelCount; i++) {\r\n        labelSum[i] = {\r\n          m00: 0,\r\n          m01: 0,\r\n          m10: 0,\r\n          m11: 0,\r\n          m02: 0,\r\n          m20: 0,\r\n          theta: 0,\r\n          rad: 0\r\n        };\r\n      }\r\n\r\n      for (y = 0; y < height; y++) {\r\n        ysq = y * y;\r\n\r\n        for (x = 0; x < width; x++) {\r\n          val = data[y * width + x];\r\n\r\n          if (val > 0) {\r\n            label = labelSum[val - 1];\r\n            label.m00 += 1;\r\n            label.m01 += y;\r\n            label.m10 += x;\r\n            label.m11 += x * y;\r\n            label.m02 += ysq;\r\n            label.m20 += x * x;\r\n          }\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < labelCount; i++) {\r\n        label = labelSum[i]; // eslint-disable-next-line no-restricted-globals\r\n\r\n        if (!isNaN(label.m00) && label.m00 !== 0) {\r\n          x_ = label.m10 / label.m00;\r\n          y_ = label.m01 / label.m00;\r\n          mu11 = label.m11 / label.m00 - x_ * y_;\r\n          mu02 = label.m02 / label.m00 - y_ * y_;\r\n          mu20 = label.m20 / label.m00 - x_ * x_;\r\n          tmp = (mu02 - mu20) / (2 * mu11);\r\n          tmp = 0.5 * Math.atan(tmp) + (mu11 >= 0 ? PI_4 : -PI_4) + PI; // eslint-disable-next-line no-mixed-operators\r\n\r\n          label.theta = (tmp * 180 / PI + 90) % 180 - 90;\r\n\r\n          if (label.theta < 0) {\r\n            label.theta += 180;\r\n          }\r\n\r\n          label.rad = tmp > PI ? tmp - PI : tmp;\r\n          label.vec = vec2.clone([Math.cos(tmp), Math.sin(tmp)]);\r\n          result.push(label);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    } // return a Uint8ClampedArray containing this grayscale image converted to RGBA form\r\n\r\n  }, {\r\n    key: \"getAsRGBA\",\r\n    value: function getAsRGBA() {\r\n      var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.0;\r\n      var ret = new Uint8ClampedArray(4 * this.size.x * this.size.y);\r\n\r\n      for (var y = 0; y < this.size.y; y++) {\r\n        for (var x = 0; x < this.size.x; x++) {\r\n          var pixel = y * this.size.x + x;\r\n          var current = this.get(x, y) * scale;\r\n          ret[pixel * 4 + 0] = current;\r\n          ret[pixel * 4 + 1] = current;\r\n          ret[pixel * 4 + 2] = current;\r\n          ret[pixel * 4 + 3] = 255;\r\n        }\r\n      }\r\n\r\n      return ret;\r\n    } // Display this ImageWrapper in a given Canvas element at the specified scale\r\n\r\n  }, {\r\n    key: \"show\",\r\n    value: function show(canvas) {\r\n      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;\r\n      var ctx = canvas.getContext('2d');\r\n\r\n      if (!ctx) {\r\n        throw new Error('Unable to get canvas context');\r\n      }\r\n\r\n      var frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n      var data = this.getAsRGBA(scale); // eslint-disable-next-line no-param-reassign\r\n\r\n      canvas.width = this.size.x; // eslint-disable-next-line no-param-reassign\r\n\r\n      canvas.height = this.size.y;\r\n      var newFrame = new ImageData(data, frame.width, frame.height);\r\n      ctx.putImageData(newFrame, 0, 0);\r\n    } // Displays a specified SubImage area in a given canvas. This differs drastically from\r\n    // creating a new SubImage and using it's show() method. Why? I don't have the answer to that\r\n    // yet.  I suspect the HSV/RGB operations involved here are making it significantly different,\r\n    // but until I can visualize these functions side by side, I'm just going to copy the existing\r\n    // implementation.\r\n\r\n  }, {\r\n    key: \"overlay\",\r\n    value: function overlay(canvas, inScale, from) {\r\n      var adjustedScale = inScale < 0 || inScale > 360 ? 360 : inScale;\r\n      var hsv = [0, 1, 1];\r\n      var rgb = [0, 0, 0];\r\n      var whiteRgb = [255, 255, 255];\r\n      var blackRgb = [0, 0, 0];\r\n      var result = [];\r\n      var ctx = canvas.getContext('2d');\r\n\r\n      if (!ctx) {\r\n        throw new Error('Unable to get canvas context');\r\n      }\r\n\r\n      var frame = ctx.getImageData(from.x, from.y, this.size.x, this.size.y);\r\n      var data = frame.data;\r\n      var length = this.data.length;\r\n\r\n      while (length--) {\r\n        hsv[0] = this.data[length] * adjustedScale; // eslint-disable-next-line no-nested-ternary\r\n\r\n        result = hsv[0] <= 0 ? whiteRgb : hsv[0] >= 360 ? blackRgb : Object(_cv_utils__WEBPACK_IMPORTED_MODULE_6__[/* hsv2rgb */ \"g\"])(hsv, rgb);\r\n        var pos = length * 4;\r\n        var _result = result;\r\n\r\n        var _result2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_result, 3);\r\n\r\n        data[pos] = _result2[0];\r\n        data[pos + 1] = _result2[1];\r\n        data[pos + 2] = _result2[2];\r\n        data[pos + 3] = 255;\r\n      }\r\n\r\n      ctx.putImageData(frame, from.x, from.y);\r\n    }\r\n  }]);\r\n\r\n  return ImageWrapper;\r\n}();\r\n\r\n/* harmony default export */ __webpack_exports__[\"a\"] = (ImageWrapper);\r\n\r\n/***/ }),\r\n/* 13 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\r\n  try {\r\n    var info = gen[key](arg);\r\n    var value = info.value;\r\n  } catch (error) {\r\n    reject(error);\r\n    return;\r\n  }\r\n\r\n  if (info.done) {\r\n    resolve(value);\r\n  } else {\r\n    Promise.resolve(value).then(_next, _throw);\r\n  }\r\n}\r\n\r\nfunction _asyncToGenerator(fn) {\r\n  return function () {\r\n    var self = this,\r\n        args = arguments;\r\n    return new Promise(function (resolve, reject) {\r\n      var gen = fn.apply(self, args);\r\n\r\n      function _next(value) {\r\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\r\n      }\r\n\r\n      function _throw(err) {\r\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\r\n      }\r\n\r\n      _next(undefined);\r\n    });\r\n  };\r\n}\r\n\r\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 14 */\r\n/***/ (function(module, exports, __nested_webpack_require_52386__) {\r\n\r\nvar superPropBase = __nested_webpack_require_52386__(225);\r\n\r\nfunction _get() {\r\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\r\n    module.exports = _get = Reflect.get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  } else {\r\n    module.exports = _get = function _get(target, property, receiver) {\r\n      var base = superPropBase(target, property);\r\n      if (!base) return;\r\n      var desc = Object.getOwnPropertyDescriptor(base, property);\r\n\r\n      if (desc.get) {\r\n        return desc.get.call(arguments.length < 3 ? target : receiver);\r\n      }\r\n\r\n      return desc.value;\r\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  }\r\n\r\n  return _get.apply(this, arguments);\r\n}\r\n\r\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 15 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return value != null && (type == 'object' || type == 'function');\r\n}\r\n\r\nmodule.exports = isObject;\r\n\r\n/***/ }),\r\n/* 16 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\nmodule.exports = isArray;\r\n\r\n/***/ }),\r\n/* 17 */\r\n/***/ (function(module, exports, __nested_webpack_require_54713__) {\r\n\r\nvar baseMerge = __nested_webpack_require_54713__(90),\r\n    createAssigner = __nested_webpack_require_54713__(145);\r\n/**\r\n * This method is like `_.assign` except that it recursively merges own and\r\n * inherited enumerable string keyed properties of source objects into the\r\n * destination object. Source properties that resolve to `undefined` are\r\n * skipped if a destination value exists. Array and plain object properties\r\n * are merged recursively. Other objects and value types are overridden by\r\n * assignment. Source objects are applied from left to right. Subsequent\r\n * sources overwrite property assignments of previous sources.\r\n *\r\n * **Note:** This method mutates `object`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.5.0\r\n * @category Object\r\n * @param {Object} object The destination object.\r\n * @param {...Object} [sources] The source objects.\r\n * @returns {Object} Returns `object`.\r\n * @example\r\n *\r\n * var object = {\r\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\r\n * };\r\n *\r\n * var other = {\r\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\r\n * };\r\n *\r\n * _.merge(object, other);\r\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\r\n */\r\n\r\n\r\nvar merge = createAssigner(function (object, source, srcIndex) {\r\n  baseMerge(object, source, srcIndex);\r\n});\r\nmodule.exports = merge;\r\n\r\n/***/ }),\r\n/* 18 */\r\n/***/ (function(module, exports, __nested_webpack_require_56051__) {\r\n\r\nvar freeGlobal = __nested_webpack_require_56051__(45);\r\n/** Detect free variable `self`. */\r\n\r\n\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n/** Used as a reference to the global object. */\r\n\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\nmodule.exports = root;\r\n\r\n/***/ }),\r\n/* 19 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return value != null && typeof value == 'object';\r\n}\r\n\r\nmodule.exports = isObjectLike;\r\n\r\n/***/ }),\r\n/* 20 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _typeof(obj) {\r\n  \"@babel/helpers - typeof\";\r\n\r\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\r\n    return typeof obj;\r\n  } : function (obj) {\r\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\r\n}\r\n\r\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 21 */\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n\r\n\"use strict\";\r\n/**\r\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\r\n */\r\nvar Tracer = {\r\n  searchDirections: [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]],\r\n  create: function create(imageWrapper, labelWrapper) {\r\n    var imageData = imageWrapper.data;\r\n    var labelData = labelWrapper.data;\r\n    var searchDirections = this.searchDirections;\r\n    var width = imageWrapper.size.x;\r\n    var pos;\r\n\r\n    function _trace(current, color, label, edgelabel) {\r\n      var i;\r\n      var y;\r\n      var x;\r\n\r\n      for (i = 0; i < 7; i++) {\r\n        y = current.cy + searchDirections[current.dir][0];\r\n        x = current.cx + searchDirections[current.dir][1];\r\n        pos = y * width + x;\r\n\r\n        if (imageData[pos] === color && (labelData[pos] === 0 || labelData[pos] === label)) {\r\n          labelData[pos] = label;\r\n          current.cy = y;\r\n          current.cx = x;\r\n          return true;\r\n        }\r\n\r\n        if (labelData[pos] === 0) {\r\n          labelData[pos] = edgelabel;\r\n        }\r\n\r\n        current.dir = (current.dir + 1) % 8;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    function vertex2D(x, y, dir) {\r\n      return {\r\n        dir: dir,\r\n        x: x,\r\n        y: y,\r\n        next: null,\r\n        prev: null\r\n      };\r\n    }\r\n\r\n    function _contourTracing(sy, sx, label, color, edgelabel) {\r\n      var Fv = null;\r\n      var Cv;\r\n      var P;\r\n      var ldir;\r\n      var current = {\r\n        cx: sx,\r\n        cy: sy,\r\n        dir: 0\r\n      };\r\n\r\n      if (_trace(current, color, label, edgelabel)) {\r\n        Fv = vertex2D(sx, sy, current.dir);\r\n        Cv = Fv;\r\n        ldir = current.dir;\r\n        P = vertex2D(current.cx, current.cy, 0);\r\n        P.prev = Cv;\r\n        Cv.next = P;\r\n        P.next = null;\r\n        Cv = P;\r\n\r\n        do {\r\n          current.dir = (current.dir + 6) % 8;\r\n\r\n          _trace(current, color, label, edgelabel);\r\n\r\n          if (ldir !== current.dir) {\r\n            Cv.dir = current.dir;\r\n            P = vertex2D(current.cx, current.cy, 0);\r\n            P.prev = Cv;\r\n            Cv.next = P;\r\n            P.next = null;\r\n            Cv = P;\r\n          } else {\r\n            Cv.dir = ldir;\r\n            Cv.x = current.cx;\r\n            Cv.y = current.cy;\r\n          }\r\n\r\n          ldir = current.dir;\r\n        } while (current.cx !== sx || current.cy !== sy);\r\n\r\n        Fv.prev = Cv.prev;\r\n        Cv.prev.next = Fv;\r\n      }\r\n\r\n      return Fv;\r\n    }\r\n\r\n    return {\r\n      trace: function trace(current, color, label, edgelabel) {\r\n        return _trace(current, color, label, edgelabel);\r\n      },\r\n      contourTracing: function contourTracing(sy, sx, label, color, edgelabel) {\r\n        return _contourTracing(sy, sx, label, color, edgelabel);\r\n      }\r\n    };\r\n  }\r\n};\r\n/* harmony default export */ __webpack_exports__[\"a\"] = (Tracer);\r\n\r\n/***/ }),\r\n/* 22 */\r\n/***/ (function(module, exports, __nested_webpack_require_60728__) {\r\n\r\nvar Symbol = __nested_webpack_require_60728__(27),\r\n    getRawTag = __nested_webpack_require_60728__(103),\r\n    objectToString = __nested_webpack_require_60728__(104);\r\n/** `Object#toString` result references. */\r\n\r\n\r\nvar nullTag = '[object Null]',\r\n    undefinedTag = '[object Undefined]';\r\n/** Built-in value references. */\r\n\r\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n/**\r\n * The base implementation of `getTag` without fallbacks for buggy environments.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\n\r\nfunction baseGetTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? undefinedTag : nullTag;\r\n  }\r\n\r\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\r\n}\r\n\r\nmodule.exports = baseGetTag;\r\n\r\n/***/ }),\r\n/* 23 */\r\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_61634__) {\r\n\r\n\"use strict\";\r\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var gl_vec2__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_61634__(7);\r\n/* harmony import */ var gl_vec2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_61634__.n(gl_vec2__WEBPACK_IMPORTED_MODULE_0__);\r\n/* harmony import */ var gl_mat2__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_61634__(34);\r\n/* harmony import */ var gl_mat2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__nested_webpack_require_61634__.n(gl_mat2__WEBPACK_IMPORTED_MODULE_1__);\r\n/* harmony import */ var _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_61634__(12);\r\n/* harmony import */ var _common_cv_utils__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_61634__(9);\r\n/* harmony import */ var _common_array_helper__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_61634__(11);\r\n/* harmony import */ var _common_image_debug__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_61634__(10);\r\n/* harmony import */ var _rasterizer__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_61634__(87);\r\n/* harmony import */ var _tracer__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_61634__(21);\r\n/* harmony import */ var _skeletonizer__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_61634__(88);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar _config;\r\n\r\nvar _currentImageWrapper;\r\n\r\nvar _skelImageWrapper;\r\n\r\nvar _subImageWrapper;\r\n\r\nvar _labelImageWrapper;\r\n\r\nvar _patchGrid;\r\n\r\nvar _patchLabelGrid;\r\n\r\nvar _imageToPatchGrid;\r\n\r\nvar _binaryImageWrapper;\r\n\r\nvar _patchSize;\r\n\r\nvar _canvasContainer = {\r\n  ctx: {\r\n    binary: null\r\n  },\r\n  dom: {\r\n    binary: null\r\n  }\r\n};\r\nvar _numPatches = {\r\n  x: 0,\r\n  y: 0\r\n};\r\n\r\nvar _inputImageWrapper;\r\n\r\nvar _skeletonizer;\r\n\r\nfunction initBuffers() {\r\n  if (_config.halfSample) {\r\n    _currentImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]({\r\n      // eslint-disable-next-line no-bitwise\r\n      x: _inputImageWrapper.size.x / 2 | 0,\r\n      // eslint-disable-next-line no-bitwise\r\n      y: _inputImageWrapper.size.y / 2 | 0\r\n    });\r\n  } else {\r\n    _currentImageWrapper = _inputImageWrapper;\r\n  }\r\n\r\n  _patchSize = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* calculatePatchSize */ \"a\"])(_config.patchSize, _currentImageWrapper.size); // eslint-disable-next-line no-bitwise\r\n\r\n  _numPatches.x = _currentImageWrapper.size.x / _patchSize.x | 0; // eslint-disable-next-line no-bitwise\r\n\r\n  _numPatches.y = _currentImageWrapper.size.y / _patchSize.y | 0;\r\n  _binaryImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](_currentImageWrapper.size, undefined, Uint8Array, false);\r\n  _labelImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](_patchSize, undefined, Array, true);\r\n  var skeletonImageData = new ArrayBuffer(64 * 1024);\r\n  _subImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](_patchSize, new Uint8Array(skeletonImageData, 0, _patchSize.x * _patchSize.y));\r\n  _skelImageWrapper = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](_patchSize, new Uint8Array(skeletonImageData, _patchSize.x * _patchSize.y * 3, _patchSize.x * _patchSize.y), undefined, true);\r\n  _skeletonizer = Object(_skeletonizer__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"])(typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : global, {\r\n    size: _patchSize.x\r\n  }, skeletonImageData);\r\n  _imageToPatchGrid = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]({\r\n    // eslint-disable-next-line no-bitwise\r\n    x: _currentImageWrapper.size.x / _subImageWrapper.size.x | 0,\r\n    // eslint-disable-next-line no-bitwise\r\n    y: _currentImageWrapper.size.y / _subImageWrapper.size.y | 0\r\n  }, undefined, Array, true);\r\n  _patchGrid = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](_imageToPatchGrid.size, undefined, undefined, true);\r\n  _patchLabelGrid = new _common_image_wrapper__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](_imageToPatchGrid.size, undefined, Int32Array, true);\r\n}\r\n\r\nfunction initCanvas() {\r\n  if (_config.useWorker || typeof document === 'undefined') {\r\n    return;\r\n  }\r\n\r\n  _canvasContainer.dom.binary = document.createElement('canvas');\r\n  _canvasContainer.dom.binary.className = 'binaryBuffer';\r\n\r\n  if (  true && _config.debug.showCanvas === true) {\r\n    document.querySelector('#debug').appendChild(_canvasContainer.dom.binary);\r\n  }\r\n\r\n  _canvasContainer.ctx.binary = _canvasContainer.dom.binary.getContext('2d');\r\n  _canvasContainer.dom.binary.width = _binaryImageWrapper.size.x;\r\n  _canvasContainer.dom.binary.height = _binaryImageWrapper.size.y;\r\n}\r\n/**\r\n * Creates a bounding box which encloses all the given patches\r\n * @returns {Array} The minimal bounding box\r\n */\r\n\r\n\r\nfunction boxFromPatches(patches) {\r\n  var overAvg;\r\n  var i;\r\n  var j;\r\n  var patch;\r\n  var transMat;\r\n  var minx = _binaryImageWrapper.size.x;\r\n  var miny = _binaryImageWrapper.size.y;\r\n  var maxx = -_binaryImageWrapper.size.x;\r\n  var maxy = -_binaryImageWrapper.size.y;\r\n  var box;\r\n  var scale; // draw all patches which are to be taken into consideration\r\n\r\n  overAvg = 0;\r\n\r\n  for (i = 0; i < patches.length; i++) {\r\n    patch = patches[i];\r\n    overAvg += patch.rad;\r\n\r\n    if (  true && _config.debug.showPatches) {\r\n      _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {\r\n        color: 'red'\r\n      });\r\n    }\r\n  }\r\n\r\n  overAvg /= patches.length;\r\n  overAvg = (overAvg * 180 / Math.PI + 90) % 180 - 90;\r\n\r\n  if (overAvg < 0) {\r\n    overAvg += 180;\r\n  }\r\n\r\n  overAvg = (180 - overAvg) * Math.PI / 180;\r\n  transMat = gl_mat2__WEBPACK_IMPORTED_MODULE_1__[\"copy\"](gl_mat2__WEBPACK_IMPORTED_MODULE_1__[\"create\"](), [Math.cos(overAvg), Math.sin(overAvg), -Math.sin(overAvg), Math.cos(overAvg)]); // iterate over patches and rotate by angle\r\n\r\n  for (i = 0; i < patches.length; i++) {\r\n    patch = patches[i];\r\n\r\n    for (j = 0; j < 4; j++) {\r\n      gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"transformMat2\"](patch.box[j], patch.box[j], transMat);\r\n    }\r\n\r\n    if (  true && _config.debug.boxFromPatches.showTransformed) {\r\n      _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawPath(patch.box, {\r\n        x: 0,\r\n        y: 1\r\n      }, _canvasContainer.ctx.binary, {\r\n        color: '#99ff00',\r\n        lineWidth: 2\r\n      });\r\n    }\r\n  } // find bounding box\r\n\r\n\r\n  for (i = 0; i < patches.length; i++) {\r\n    patch = patches[i];\r\n\r\n    for (j = 0; j < 4; j++) {\r\n      if (patch.box[j][0] < minx) {\r\n        minx = patch.box[j][0];\r\n      }\r\n\r\n      if (patch.box[j][0] > maxx) {\r\n        maxx = patch.box[j][0];\r\n      }\r\n\r\n      if (patch.box[j][1] < miny) {\r\n        miny = patch.box[j][1];\r\n      }\r\n\r\n      if (patch.box[j][1] > maxy) {\r\n        maxy = patch.box[j][1];\r\n      }\r\n    }\r\n  }\r\n\r\n  box = [[minx, miny], [maxx, miny], [maxx, maxy], [minx, maxy]];\r\n\r\n  if (  true && _config.debug.boxFromPatches.showTransformedBox) {\r\n    _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawPath(box, {\r\n      x: 0,\r\n      y: 1\r\n    }, _canvasContainer.ctx.binary, {\r\n      color: '#ff0000',\r\n      lineWidth: 2\r\n    });\r\n  }\r\n\r\n  scale = _config.halfSample ? 2 : 1; // reverse rotation;\r\n\r\n  transMat = gl_mat2__WEBPACK_IMPORTED_MODULE_1__[\"invert\"](transMat, transMat);\r\n\r\n  for (j = 0; j < 4; j++) {\r\n    gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"transformMat2\"](box[j], box[j], transMat);\r\n  }\r\n\r\n  if (  true && _config.debug.boxFromPatches.showBB) {\r\n    _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawPath(box, {\r\n      x: 0,\r\n      y: 1\r\n    }, _canvasContainer.ctx.binary, {\r\n      color: '#ff0000',\r\n      lineWidth: 2\r\n    });\r\n  }\r\n\r\n  for (j = 0; j < 4; j++) {\r\n    gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"scale\"](box[j], box[j], scale);\r\n  }\r\n\r\n  return box;\r\n}\r\n/**\r\n * Creates a binary image of the current image\r\n */\r\n\r\n\r\nfunction binarizeImage() {\r\n  Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* otsuThreshold */ \"i\"])(_currentImageWrapper, _binaryImageWrapper);\r\n\r\n  _binaryImageWrapper.zeroBorder();\r\n\r\n  if (  true && _config.debug.showCanvas) {\r\n    _binaryImageWrapper.show(_canvasContainer.dom.binary, 255);\r\n  }\r\n}\r\n/**\r\n * Iterate over the entire image\r\n * extract patches\r\n */\r\n\r\n\r\nfunction findPatches() {\r\n  var i;\r\n  var j;\r\n  var x;\r\n  var y;\r\n  var moments;\r\n  var patchesFound = [];\r\n  var rasterizer;\r\n  var rasterResult;\r\n  var patch;\r\n\r\n  for (i = 0; i < _numPatches.x; i++) {\r\n    for (j = 0; j < _numPatches.y; j++) {\r\n      x = _subImageWrapper.size.x * i;\r\n      y = _subImageWrapper.size.y * j; // seperate parts\r\n\r\n      skeletonize(x, y); // Rasterize, find individual bars\r\n\r\n      _skelImageWrapper.zeroBorder();\r\n\r\n      _common_array_helper__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"].init(_labelImageWrapper.data, 0);\r\n      rasterizer = _rasterizer__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"].create(_skelImageWrapper, _labelImageWrapper);\r\n      rasterResult = rasterizer.rasterize(0);\r\n\r\n      if (  true && _config.debug.showLabels) {\r\n        _labelImageWrapper.overlay(_canvasContainer.dom.binary, Math.floor(360 / rasterResult.count), {\r\n          x: x,\r\n          y: y\r\n        });\r\n      } // calculate moments from the skeletonized patch\r\n\r\n\r\n      moments = _labelImageWrapper.moments(rasterResult.count); // extract eligible patches\r\n\r\n      patchesFound = patchesFound.concat(describePatch(moments, [i, j], x, y));\r\n    }\r\n  }\r\n\r\n  if (  true && _config.debug.showFoundPatches) {\r\n    for (i = 0; i < patchesFound.length; i++) {\r\n      patch = patchesFound[i];\r\n      _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {\r\n        color: '#99ff00',\r\n        lineWidth: 2\r\n      });\r\n    }\r\n  }\r\n\r\n  return patchesFound;\r\n}\r\n/**\r\n * Finds those connected areas which contain at least 6 patches\r\n * and returns them ordered DESC by the number of contained patches\r\n * @param {Number} maxLabel\r\n */\r\n\r\n\r\nfunction findBiggestConnectedAreas(maxLabel) {\r\n  var i;\r\n  var sum;\r\n  var labelHist = [];\r\n  var topLabels = [];\r\n\r\n  for (i = 0; i < maxLabel; i++) {\r\n    labelHist.push(0);\r\n  }\r\n\r\n  sum = _patchLabelGrid.data.length;\r\n\r\n  while (sum--) {\r\n    if (_patchLabelGrid.data[sum] > 0) {\r\n      labelHist[_patchLabelGrid.data[sum] - 1]++;\r\n    }\r\n  }\r\n\r\n  labelHist = labelHist.map(function (val, idx) {\r\n    return {\r\n      val: val,\r\n      label: idx + 1\r\n    };\r\n  });\r\n  labelHist.sort(function (a, b) {\r\n    return b.val - a.val;\r\n  }); // extract top areas with at least 6 patches present\r\n\r\n  topLabels = labelHist.filter(function (el) {\r\n    return el.val >= 5;\r\n  });\r\n  return topLabels;\r\n}\r\n/**\r\n *\r\n */\r\n\r\n\r\nfunction findBoxes(topLabels, maxLabel) {\r\n  var i;\r\n  var j;\r\n  var sum;\r\n  var patches = [];\r\n  var patch;\r\n  var box;\r\n  var boxes = [];\r\n  var hsv = [0, 1, 1];\r\n  var rgb = [0, 0, 0];\r\n\r\n  for (i = 0; i < topLabels.length; i++) {\r\n    sum = _patchLabelGrid.data.length;\r\n    patches.length = 0;\r\n\r\n    while (sum--) {\r\n      if (_patchLabelGrid.data[sum] === topLabels[i].label) {\r\n        patch = _imageToPatchGrid.data[sum];\r\n        patches.push(patch);\r\n      }\r\n    }\r\n\r\n    box = boxFromPatches(patches);\r\n\r\n    if (box) {\r\n      boxes.push(box); // draw patch-labels if requested\r\n\r\n      if (  true && _config.debug.showRemainingPatchLabels) {\r\n        for (j = 0; j < patches.length; j++) {\r\n          patch = patches[j];\r\n          hsv[0] = topLabels[i].label / (maxLabel + 1) * 360;\r\n          Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* hsv2rgb */ \"g\"])(hsv, rgb);\r\n          _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {\r\n            color: \"rgb(\".concat(rgb.join(','), \")\"),\r\n            lineWidth: 2\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return boxes;\r\n}\r\n/**\r\n * Find similar moments (via cluster)\r\n * @param {Object} moments\r\n */\r\n\r\n\r\nfunction similarMoments(moments) {\r\n  var clusters = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* cluster */ \"b\"])(moments, 0.90);\r\n  var topCluster = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* topGeneric */ \"j\"])(clusters, 1, function (e) {\r\n    return e.getPoints().length;\r\n  });\r\n  var points = [];\r\n  var result = [];\r\n\r\n  if (topCluster.length === 1) {\r\n    points = topCluster[0].item.getPoints();\r\n\r\n    for (var i = 0; i < points.length; i++) {\r\n      result.push(points[i].point);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction skeletonize(x, y) {\r\n  _binaryImageWrapper.subImageAsCopy(_subImageWrapper, Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* imageRef */ \"h\"])(x, y));\r\n\r\n  _skeletonizer.skeletonize(); // Show skeleton if requested\r\n\r\n\r\n  if (  true && _config.debug.showSkeleton) {\r\n    _skelImageWrapper.overlay(_canvasContainer.dom.binary, 360, Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* imageRef */ \"h\"])(x, y));\r\n  }\r\n}\r\n/**\r\n * Extracts and describes those patches which seem to contain a barcode pattern\r\n * @param {Array} moments\r\n * @param {Object} patchPos,\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @returns {Array} list of patches\r\n */\r\n\r\n\r\nfunction describePatch(moments, patchPos, x, y) {\r\n  var k;\r\n  var avg;\r\n  var eligibleMoments = [];\r\n  var matchingMoments;\r\n  var patch;\r\n  var patchesFound = [];\r\n  var minComponentWeight = Math.ceil(_patchSize.x / 3);\r\n\r\n  if (moments.length >= 2) {\r\n    // only collect moments which's area covers at least minComponentWeight pixels.\r\n    for (k = 0; k < moments.length; k++) {\r\n      if (moments[k].m00 > minComponentWeight) {\r\n        eligibleMoments.push(moments[k]);\r\n      }\r\n    } // if at least 2 moments are found which have at least minComponentWeights covered\r\n\r\n\r\n    if (eligibleMoments.length >= 2) {\r\n      matchingMoments = similarMoments(eligibleMoments);\r\n      avg = 0; // determine the similarity of the moments\r\n\r\n      for (k = 0; k < matchingMoments.length; k++) {\r\n        avg += matchingMoments[k].rad;\r\n      } // Only two of the moments are allowed not to fit into the equation\r\n      // add the patch to the set\r\n\r\n\r\n      if (matchingMoments.length > 1 && matchingMoments.length >= eligibleMoments.length / 4 * 3 && matchingMoments.length > moments.length / 4) {\r\n        avg /= matchingMoments.length;\r\n        patch = {\r\n          index: patchPos[1] * _numPatches.x + patchPos[0],\r\n          pos: {\r\n            x: x,\r\n            y: y\r\n          },\r\n          box: [gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"clone\"]([x, y]), gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"clone\"]([x + _subImageWrapper.size.x, y]), gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"clone\"]([x + _subImageWrapper.size.x, y + _subImageWrapper.size.y]), gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"clone\"]([x, y + _subImageWrapper.size.y])],\r\n          moments: matchingMoments,\r\n          rad: avg,\r\n          vec: gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"clone\"]([Math.cos(avg), Math.sin(avg)])\r\n        };\r\n        patchesFound.push(patch);\r\n      }\r\n    }\r\n  }\r\n\r\n  return patchesFound;\r\n}\r\n/**\r\n * finds patches which are connected and share the same orientation\r\n * @param {Object} patchesFound\r\n */\r\n\r\n\r\nfunction rasterizeAngularSimilarity(patchesFound) {\r\n  var label = 0;\r\n  var threshold = 0.95;\r\n  var currIdx = 0;\r\n  var j;\r\n  var patch;\r\n  var hsv = [0, 1, 1];\r\n  var rgb = [0, 0, 0];\r\n\r\n  function notYetProcessed() {\r\n    var i;\r\n\r\n    for (i = 0; i < _patchLabelGrid.data.length; i++) {\r\n      if (_patchLabelGrid.data[i] === 0 && _patchGrid.data[i] === 1) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return _patchLabelGrid.length;\r\n  }\r\n\r\n  function trace(currentIdx) {\r\n    var x;\r\n    var y;\r\n    var currentPatch;\r\n    var idx;\r\n    var dir;\r\n    var current = {\r\n      x: currentIdx % _patchLabelGrid.size.x,\r\n      y: currentIdx / _patchLabelGrid.size.x | 0\r\n    };\r\n    var similarity;\r\n\r\n    if (currentIdx < _patchLabelGrid.data.length) {\r\n      currentPatch = _imageToPatchGrid.data[currentIdx]; // assign label\r\n\r\n      _patchLabelGrid.data[currentIdx] = label;\r\n\r\n      for (dir = 0; dir < _tracer__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"].searchDirections.length; dir++) {\r\n        y = current.y + _tracer__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"].searchDirections[dir][0];\r\n        x = current.x + _tracer__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"].searchDirections[dir][1];\r\n        idx = y * _patchLabelGrid.size.x + x; // continue if patch empty\r\n\r\n        if (_patchGrid.data[idx] === 0) {\r\n          _patchLabelGrid.data[idx] = Number.MAX_VALUE; // eslint-disable-next-line no-continue\r\n\r\n          continue;\r\n        }\r\n\r\n        if (_patchLabelGrid.data[idx] === 0) {\r\n          similarity = Math.abs(gl_vec2__WEBPACK_IMPORTED_MODULE_0__[\"dot\"](_imageToPatchGrid.data[idx].vec, currentPatch.vec));\r\n\r\n          if (similarity > threshold) {\r\n            trace(idx);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } // prepare for finding the right patches\r\n\r\n\r\n  _common_array_helper__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"].init(_patchGrid.data, 0);\r\n  _common_array_helper__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"].init(_patchLabelGrid.data, 0);\r\n  _common_array_helper__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"].init(_imageToPatchGrid.data, null);\r\n\r\n  for (j = 0; j < patchesFound.length; j++) {\r\n    patch = patchesFound[j];\r\n    _imageToPatchGrid.data[patch.index] = patch;\r\n    _patchGrid.data[patch.index] = 1;\r\n  } // rasterize the patches found to determine area\r\n\r\n\r\n  _patchGrid.zeroBorder(); // eslint-disable-next-line no-cond-assign\r\n\r\n\r\n  while ((currIdx = notYetProcessed()) < _patchLabelGrid.data.length) {\r\n    label++;\r\n    trace(currIdx);\r\n  } // draw patch-labels if requested\r\n\r\n\r\n  if (  true && _config.debug.showPatchLabels) {\r\n    for (j = 0; j < _patchLabelGrid.data.length; j++) {\r\n      if (_patchLabelGrid.data[j] > 0 && _patchLabelGrid.data[j] <= label) {\r\n        patch = _imageToPatchGrid.data[j];\r\n        hsv[0] = _patchLabelGrid.data[j] / (label + 1) * 360;\r\n        Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* hsv2rgb */ \"g\"])(hsv, rgb);\r\n        _common_image_debug__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].drawRect(patch.pos, _subImageWrapper.size, _canvasContainer.ctx.binary, {\r\n          color: \"rgb(\".concat(rgb.join(','), \")\"),\r\n          lineWidth: 2\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\r\n  init: function init(inputImageWrapper, config) {\r\n    _config = config;\r\n    _inputImageWrapper = inputImageWrapper;\r\n    initBuffers();\r\n    initCanvas();\r\n  },\r\n  locate: function locate() {\r\n    if (_config.halfSample) {\r\n      Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* halfSample */ \"f\"])(_inputImageWrapper, _currentImageWrapper);\r\n    }\r\n\r\n    binarizeImage();\r\n    var patchesFound = findPatches(); // return unless 5% or more patches are found\r\n\r\n    if (patchesFound.length < _numPatches.x * _numPatches.y * 0.05) {\r\n      return null;\r\n    } // rasterrize area by comparing angular similarity;\r\n\r\n\r\n    var maxLabel = rasterizeAngularSimilarity(patchesFound);\r\n\r\n    if (maxLabel < 1) {\r\n      return null;\r\n    } // search for area with the most patches (biggest connected area)\r\n\r\n\r\n    var topLabels = findBiggestConnectedAreas(maxLabel);\r\n\r\n    if (topLabels.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var boxes = findBoxes(topLabels, maxLabel);\r\n    return boxes;\r\n  },\r\n  checkImageConstraints: function checkImageConstraints(inputStream, config) {\r\n    var patchSize;\r\n    var width = inputStream.getWidth();\r\n    var height = inputStream.getHeight();\r\n    var thisHalfSample = config.halfSample ? 0.5 : 1;\r\n    var area; // calculate width and height based on area\r\n\r\n    if (inputStream.getConfig().area) {\r\n      area = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* computeImageArea */ \"d\"])(width, height, inputStream.getConfig().area);\r\n      inputStream.setTopRight({\r\n        x: area.sx,\r\n        y: area.sy\r\n      });\r\n      inputStream.setCanvasSize({\r\n        x: width,\r\n        y: height\r\n      });\r\n      width = area.sw;\r\n      height = area.sh;\r\n    }\r\n\r\n    var size = {\r\n      x: Math.floor(width * thisHalfSample),\r\n      y: Math.floor(height * thisHalfSample)\r\n    };\r\n    patchSize = Object(_common_cv_utils__WEBPACK_IMPORTED_MODULE_3__[/* calculatePatchSize */ \"a\"])(config.patchSize, size);\r\n\r\n    if (true) {\r\n      console.log(\"Patch-Size: \".concat(JSON.stringify(patchSize)));\r\n    }\r\n\r\n    inputStream.setWidth(Math.floor(Math.floor(size.x / patchSize.x) * (1 / thisHalfSample) * patchSize.x));\r\n    inputStream.setHeight(Math.floor(Math.floor(size.y / patchSize.y) * (1 / thisHalfSample) * patchSize.y));\r\n\r\n    if (inputStream.getWidth() % patchSize.x === 0 && inputStream.getHeight() % patchSize.y === 0) {\r\n      return true;\r\n    }\r\n\r\n    throw new Error(\"Image dimensions do not comply with the current settings: Width (\".concat(width, \" )and height (\").concat(height, \") must a multiple of \").concat(patchSize.x));\r\n  }\r\n});\r\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_61634__(46)))\r\n\r\n/***/ }),\r\n/* 24 */\r\n/***/ (function(module, exports, __nested_webpack_require_82998__) {\r\n\r\nvar listCacheClear = __nested_webpack_require_82998__(92),\r\n    listCacheDelete = __nested_webpack_require_82998__(93),\r\n    listCacheGet = __nested_webpack_require_82998__(94),\r\n    listCacheHas = __nested_webpack_require_82998__(95),\r\n    listCacheSet = __nested_webpack_require_82998__(96);\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\n\r\n\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n  this.clear();\r\n\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n} // Add methods to `ListCache`.\r\n\r\n\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\nmodule.exports = ListCache;\r\n\r\n/***/ }),\r\n/* 25 */\r\n/***/ (function(module, exports, __nested_webpack_require_83962__) {\r\n\r\nvar eq = __nested_webpack_require_83962__(26);\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\n\r\n\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nmodule.exports = assocIndexOf;\r\n\r\n/***/ }),\r\n/* 26 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || value !== value && other !== other;\r\n}\r\n\r\nmodule.exports = eq;\r\n\r\n/***/ }),\r\n/* 27 */\r\n/***/ (function(module, exports, __nested_webpack_require_85461__) {\r\n\r\nvar root = __nested_webpack_require_85461__(18);\r\n/** Built-in value references. */\r\n\r\n\r\nvar Symbol = root.Symbol;\r\nmodule.exports = Symbol;\r\n\r\n/***/ }),\r\n/* 28 */\r\n/***/ (function(module, exports, __nested_webpack_require_85672__) {\r\n\r\nvar getNative = __nested_webpack_require_85672__(35);\r\n/* Built-in method references that are verified to be native. */\r\n\r\n\r\nvar nativeCreate = getNative(Object, 'create');\r\nmodule.exports = nativeCreate;\r\n\r\n/***/ }),\r\n/* 29 */\r\n/***/ (function(module, exports, __nested_webpack_require_85947__) {\r\n\r\nvar isKeyable = __nested_webpack_require_85947__(117);\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\n\r\n\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\r\n}\r\n\r\nmodule.exports = getMapData;\r\n\r\n/***/ }),\r\n/* 30 */\r\n/***/ (function(module, exports, __nested_webpack_require_86440__) {\r\n\r\nvar baseIsArguments = __nested_webpack_require_86440__(132),\r\n    isObjectLike = __nested_webpack_require_86440__(19);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/** Built-in value references. */\r\n\r\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\n\r\nvar isArguments = baseIsArguments(function () {\r\n  return arguments;\r\n}()) ? baseIsArguments : function (value) {\r\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\r\n};\r\nmodule.exports = isArguments;\r\n\r\n/***/ }),\r\n/* 31 */\r\n/***/ (function(module, exports) {\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n/** Used to detect unsigned integer values. */\r\n\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\n\r\nfunction isIndex(value, length) {\r\n  var type = typeof value;\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\r\n}\r\n\r\nmodule.exports = isIndex;\r\n\r\n/***/ }),\r\n/* 32 */\r\n/***/ (function(module, exports, __nested_webpack_require_88396__) {\r\n\r\nvar isArray = __nested_webpack_require_88396__(16),\r\n    isKey = __nested_webpack_require_88396__(232),\r\n    stringToPath = __nested_webpack_require_88396__(233),\r\n    toString = __nested_webpack_require_88396__(236);\r\n/**\r\n * Casts `value` to a path array if it's not one.\r\n *\r\n * @private\r\n * @param {*} value The value to inspect.\r\n * @param {Object} [object] The object to query keys on.\r\n * @returns {Array} Returns the cast property path array.\r\n */\r\n\r\n\r\nfunction castPath(value, object) {\r\n  if (isArray(value)) {\r\n    return value;\r\n  }\r\n\r\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\r\n}\r\n\r\nmodule.exports = castPath;\r\n\r\n/***/ }),\r\n/* 33 */\r\n/***/ (function(module, exports, __nested_webpack_require_89081__) {\r\n\r\nvar arrayWithoutHoles = __nested_webpack_require_89081__(226);\r\n\r\nvar iterableToArray = __nested_webpack_require_89081__(227);\r\n\r\nvar unsupportedIterableToArray = __nested_webpack_require_89081__(60);\r\n\r\nvar nonIterableSpread = __nested_webpack_require_89081__(228);\r\n\r\nfunction _toConsumableArray(arr) {\r\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\r\n}\r\n\r\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 34 */\r\n/***/ (function(module, exports, __nested_webpack_require_89654__) {\r\n\r\nmodule.exports = {\r\n  determinant: __nested_webpack_require_89654__(251),\r\n  transpose: __nested_webpack_require_89654__(252),\r\n  multiply: __nested_webpack_require_89654__(253),\r\n  identity: __nested_webpack_require_89654__(254),\r\n  adjoint: __nested_webpack_require_89654__(255),\r\n  rotate: __nested_webpack_require_89654__(256),\r\n  invert: __nested_webpack_require_89654__(257),\r\n  create: __nested_webpack_require_89654__(258),\r\n  scale: __nested_webpack_require_89654__(259),\r\n  copy: __nested_webpack_require_89654__(260),\r\n  frob: __nested_webpack_require_89654__(261),\r\n  ldu: __nested_webpack_require_89654__(262)\r\n};\r\n\r\n/***/ }),\r\n/* 35 */\r\n/***/ (function(module, exports, __nested_webpack_require_90208__) {\r\n\r\nvar baseIsNative = __nested_webpack_require_90208__(102),\r\n    getValue = __nested_webpack_require_90208__(108);\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\n\r\n\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\nmodule.exports = getNative;\r\n\r\n/***/ }),\r\n/* 36 */\r\n/***/ (function(module, exports, __nested_webpack_require_90792__) {\r\n\r\nvar baseGetTag = __nested_webpack_require_90792__(22),\r\n    isObject = __nested_webpack_require_90792__(15);\r\n/** `Object#toString` result references. */\r\n\r\n\r\nvar asyncTag = '[object AsyncFunction]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    proxyTag = '[object Proxy]';\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\n\r\nfunction isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  } // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n\r\n\r\n  var tag = baseGetTag(value);\r\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n}\r\n\r\nmodule.exports = isFunction;\r\n\r\n/***/ }),\r\n/* 37 */\r\n/***/ (function(module, exports, __nested_webpack_require_91908__) {\r\n\r\nvar defineProperty = __nested_webpack_require_91908__(49);\r\n/**\r\n * The base implementation of `assignValue` and `assignMergeValue` without\r\n * value checks.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {string} key The key of the property to assign.\r\n * @param {*} value The value to assign.\r\n */\r\n\r\n\r\nfunction baseAssignValue(object, key, value) {\r\n  if (key == '__proto__' && defineProperty) {\r\n    defineProperty(object, key, {\r\n      'configurable': true,\r\n      'enumerable': true,\r\n      'value': value,\r\n      'writable': true\r\n    });\r\n  } else {\r\n    object[key] = value;\r\n  }\r\n}\r\n\r\nmodule.exports = baseAssignValue;\r\n\r\n/***/ }),\r\n/* 38 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = function (module) {\r\n  if (!module.webpackPolyfill) {\r\n    module.deprecate = function () {};\r\n\r\n    module.paths = []; // module.parent = undefined by default\r\n\r\n    if (!module.children) module.children = [];\r\n    Object.defineProperty(module, \"loaded\", {\r\n      enumerable: true,\r\n      get: function () {\r\n        return module.l;\r\n      }\r\n    });\r\n    Object.defineProperty(module, \"id\", {\r\n      enumerable: true,\r\n      get: function () {\r\n        return module.i;\r\n      }\r\n    });\r\n    module.webpackPolyfill = 1;\r\n  }\r\n\r\n  return module;\r\n};\r\n\r\n/***/ }),\r\n/* 39 */\r\n/***/ (function(module, exports, __nested_webpack_require_93269__) {\r\n\r\nvar isFunction = __nested_webpack_require_93269__(36),\r\n    isLength = __nested_webpack_require_93269__(40);\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\n\r\n\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\nmodule.exports = isArrayLike;\r\n\r\n/***/ }),\r\n/* 40 */\r\n/***/ (function(module, exports) {\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\n\r\nfunction isLength(value) {\r\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\nmodule.exports = isLength;\r\n\r\n/***/ }),\r\n/* 41 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _setPrototypeOf(o, p) {\r\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\r\n    o.__proto__ = p;\r\n    return o;\r\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  return _setPrototypeOf(o, p);\r\n}\r\n\r\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 42 */\r\n/***/ (function(module, exports, __nested_webpack_require_95574__) {\r\n\r\nvar baseGetTag = __nested_webpack_require_95574__(22),\r\n    isObjectLike = __nested_webpack_require_95574__(19);\r\n/** `Object#toString` result references. */\r\n\r\n\r\nvar symbolTag = '[object Symbol]';\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\n\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\r\n}\r\n\r\nmodule.exports = isSymbol;\r\n\r\n/***/ }),\r\n/* 43 */\r\n/***/ (function(module, exports, __nested_webpack_require_96359__) {\r\n\r\nvar isSymbol = __nested_webpack_require_96359__(42);\r\n/** Used as references for various `Number` constants. */\r\n\r\n\r\nvar INFINITY = 1 / 0;\r\n/**\r\n * Converts `value` to a string key if it's not a string or symbol.\r\n *\r\n * @private\r\n * @param {*} value The value to inspect.\r\n * @returns {string|symbol} Returns the key.\r\n */\r\n\r\nfunction toKey(value) {\r\n  if (typeof value == 'string' || isSymbol(value)) {\r\n    return value;\r\n  }\r\n\r\n  var result = value + '';\r\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\r\n}\r\n\r\nmodule.exports = toKey;\r\n\r\n/***/ }),\r\n/* 44 */\r\n/***/ (function(module, exports, __nested_webpack_require_96985__) {\r\n\r\nvar getNative = __nested_webpack_require_96985__(35),\r\n    root = __nested_webpack_require_96985__(18);\r\n/* Built-in method references that are verified to be native. */\r\n\r\n\r\nvar Map = getNative(root, 'Map');\r\nmodule.exports = Map;\r\n\r\n/***/ }),\r\n/* 45 */\r\n/***/ (function(module, exports, __nested_webpack_require_97274__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\nmodule.exports = freeGlobal;\r\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_97274__(46)))\r\n\r\n/***/ }),\r\n/* 46 */\r\n/***/ (function(module, exports) {\r\n\r\nvar g; // This works in non-strict mode\r\n\r\ng = function () {\r\n  return this;\r\n}();\r\n\r\ntry {\r\n  // This works if eval is allowed (see CSP)\r\n  g = g || new Function(\"return this\")();\r\n} catch (e) {\r\n  // This works if the window reference is available\r\n  if (typeof window === \"object\") g = window;\r\n} // g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\n\r\nmodule.exports = g;\r\n\r\n/***/ }),\r\n/* 47 */\r\n/***/ (function(module, exports, __nested_webpack_require_98199__) {\r\n\r\nvar mapCacheClear = __nested_webpack_require_98199__(109),\r\n    mapCacheDelete = __nested_webpack_require_98199__(116),\r\n    mapCacheGet = __nested_webpack_require_98199__(118),\r\n    mapCacheHas = __nested_webpack_require_98199__(119),\r\n    mapCacheSet = __nested_webpack_require_98199__(120);\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\n\r\n\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n  this.clear();\r\n\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n} // Add methods to `MapCache`.\r\n\r\n\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\nmodule.exports = MapCache;\r\n\r\n/***/ }),\r\n/* 48 */\r\n/***/ (function(module, exports, __nested_webpack_require_99173__) {\r\n\r\nvar baseAssignValue = __nested_webpack_require_99173__(37),\r\n    eq = __nested_webpack_require_99173__(26);\r\n/**\r\n * This function is like `assignValue` except that it doesn't assign\r\n * `undefined` values.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {string} key The key of the property to assign.\r\n * @param {*} value The value to assign.\r\n */\r\n\r\n\r\nfunction assignMergeValue(object, key, value) {\r\n  if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {\r\n    baseAssignValue(object, key, value);\r\n  }\r\n}\r\n\r\nmodule.exports = assignMergeValue;\r\n\r\n/***/ }),\r\n/* 49 */\r\n/***/ (function(module, exports, __nested_webpack_require_99850__) {\r\n\r\nvar getNative = __nested_webpack_require_99850__(35);\r\n\r\nvar defineProperty = function () {\r\n  try {\r\n    var func = getNative(Object, 'defineProperty');\r\n    func({}, '', {});\r\n    return func;\r\n  } catch (e) {}\r\n}();\r\n\r\nmodule.exports = defineProperty;\r\n\r\n/***/ }),\r\n/* 50 */\r\n/***/ (function(module, exports, __nested_webpack_require_100175__) {\r\n\r\nvar overArg = __nested_webpack_require_100175__(131);\r\n/** Built-in value references. */\r\n\r\n\r\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\r\nmodule.exports = getPrototype;\r\n\r\n/***/ }),\r\n/* 51 */\r\n/***/ (function(module, exports) {\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\n\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\r\n  return value === proto;\r\n}\r\n\r\nmodule.exports = isPrototype;\r\n\r\n/***/ }),\r\n/* 52 */\r\n/***/ (function(module, exports, __nested_webpack_require_100984__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {var root = __nested_webpack_require_100984__(18),\r\n    stubFalse = __nested_webpack_require_100984__(134);\r\n/** Detect free variable `exports`. */\r\n\r\n\r\nvar freeExports =   true && exports && !exports.nodeType && exports;\r\n/** Detect free variable `module`. */\r\n\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\n\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n/** Built-in value references. */\r\n\r\nvar Buffer = moduleExports ? root.Buffer : undefined;\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\n\r\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\n\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\nmodule.exports = isBuffer;\r\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_100984__(38)(module)))\r\n\r\n/***/ }),\r\n/* 53 */\r\n/***/ (function(module, exports, __nested_webpack_require_102325__) {\r\n\r\nvar baseIsTypedArray = __nested_webpack_require_102325__(136),\r\n    baseUnary = __nested_webpack_require_102325__(137),\r\n    nodeUtil = __nested_webpack_require_102325__(138);\r\n/* Node.js helper references. */\r\n\r\n\r\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n/**\r\n * Checks if `value` is classified as a typed array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n * @example\r\n *\r\n * _.isTypedArray(new Uint8Array);\r\n * // => true\r\n *\r\n * _.isTypedArray([]);\r\n * // => false\r\n */\r\n\r\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\nmodule.exports = isTypedArray;\r\n\r\n/***/ }),\r\n/* 54 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction safeGet(object, key) {\r\n  if (key === 'constructor' && typeof object[key] === 'function') {\r\n    return;\r\n  }\r\n\r\n  if (key == '__proto__') {\r\n    return;\r\n  }\r\n\r\n  return object[key];\r\n}\r\n\r\nmodule.exports = safeGet;\r\n\r\n/***/ }),\r\n/* 55 */\r\n/***/ (function(module, exports, __nested_webpack_require_103664__) {\r\n\r\nvar baseAssignValue = __nested_webpack_require_103664__(37),\r\n    eq = __nested_webpack_require_103664__(26);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/**\r\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\r\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * for equality comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {string} key The key of the property to assign.\r\n * @param {*} value The value to assign.\r\n */\r\n\r\nfunction assignValue(object, key, value) {\r\n  var objValue = object[key];\r\n\r\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\r\n    baseAssignValue(object, key, value);\r\n  }\r\n}\r\n\r\nmodule.exports = assignValue;\r\n\r\n/***/ }),\r\n/* 56 */\r\n/***/ (function(module, exports, __nested_webpack_require_104670__) {\r\n\r\nvar arrayLikeKeys = __nested_webpack_require_104670__(141),\r\n    baseKeysIn = __nested_webpack_require_104670__(143),\r\n    isArrayLike = __nested_webpack_require_104670__(39);\r\n/**\r\n * Creates an array of the own and inherited enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keysIn(new Foo);\r\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\r\n */\r\n\r\n\r\nfunction keysIn(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\r\n}\r\n\r\nmodule.exports = keysIn;\r\n\r\n/***/ }),\r\n/* 57 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * This method returns the first argument it receives.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Util\r\n * @param {*} value Any value.\r\n * @returns {*} Returns `value`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n *\r\n * console.log(_.identity(object) === object);\r\n * // => true\r\n */\r\nfunction identity(value) {\r\n  return value;\r\n}\r\n\r\nmodule.exports = identity;\r\n\r\n/***/ }),\r\n/* 58 */\r\n/***/ (function(module, exports, __nested_webpack_require_106012__) {\r\n\r\nvar apply = __nested_webpack_require_106012__(147);\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\n\r\n\r\nvar nativeMax = Math.max;\r\n/**\r\n * A specialized version of `baseRest` which transforms the rest array.\r\n *\r\n * @private\r\n * @param {Function} func The function to apply a rest parameter to.\r\n * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n * @param {Function} transform The rest array transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\n\r\nfunction overRest(func, start, transform) {\r\n  start = nativeMax(start === undefined ? func.length - 1 : start, 0);\r\n  return function () {\r\n    var args = arguments,\r\n        index = -1,\r\n        length = nativeMax(args.length - start, 0),\r\n        array = Array(length);\r\n\r\n    while (++index < length) {\r\n      array[index] = args[start + index];\r\n    }\r\n\r\n    index = -1;\r\n    var otherArgs = Array(start + 1);\r\n\r\n    while (++index < start) {\r\n      otherArgs[index] = args[index];\r\n    }\r\n\r\n    otherArgs[start] = transform(array);\r\n    return apply(func, this, otherArgs);\r\n  };\r\n}\r\n\r\nmodule.exports = overRest;\r\n\r\n/***/ }),\r\n/* 59 */\r\n/***/ (function(module, exports, __nested_webpack_require_107238__) {\r\n\r\nvar baseSetToString = __nested_webpack_require_107238__(148),\r\n    shortOut = __nested_webpack_require_107238__(150);\r\n/**\r\n * Sets the `toString` method of `func` to return `string`.\r\n *\r\n * @private\r\n * @param {Function} func The function to modify.\r\n * @param {Function} string The `toString` result.\r\n * @returns {Function} Returns `func`.\r\n */\r\n\r\n\r\nvar setToString = shortOut(baseSetToString);\r\nmodule.exports = setToString;\r\n\r\n/***/ }),\r\n/* 60 */\r\n/***/ (function(module, exports, __nested_webpack_require_107723__) {\r\n\r\nvar arrayLikeToArray = __nested_webpack_require_107723__(61);\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n  if (!o) return;\r\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\r\n  var n = Object.prototype.toString.call(o).slice(8, -1);\r\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\r\n}\r\n\r\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 61 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n  if (len == null || len > arr.length) len = arr.length;\r\n\r\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n    arr2[i] = arr[i];\r\n  }\r\n\r\n  return arr2;\r\n}\r\n\r\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 62 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = 0.000001;\r\n\r\n/***/ }),\r\n/* 63 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = create;\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\nfunction create() {\r\n  var out = new Float32Array(2);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 64 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = subtract;\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 65 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = multiply;\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 66 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = divide;\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 67 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = distance;\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/***/ }),\r\n/* 68 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = squaredDistance;\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/***/ }),\r\n/* 69 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = length;\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nfunction length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/***/ }),\r\n/* 70 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = squaredLength;\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nfunction squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/***/ }),\r\n/* 71 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = 0.000001;\r\n\r\n/***/ }),\r\n/* 72 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = create;\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nfunction create() {\r\n  var out = new Float32Array(3);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 73 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = fromValues;\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nfunction fromValues(x, y, z) {\r\n  var out = new Float32Array(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 74 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = normalize;\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 75 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = dot;\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/***/ }),\r\n/* 76 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = subtract;\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 77 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = multiply;\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 78 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = divide;\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 79 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = distance;\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1],\r\n      z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/***/ }),\r\n/* 80 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = squaredDistance;\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1],\r\n      z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/***/ }),\r\n/* 81 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = length;\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nfunction length(a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/***/ }),\r\n/* 82 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = squaredLength;\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\nfunction squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/***/ }),\r\n/* 83 */\r\n/***/ (function(module, exports, __nested_webpack_require_116277__) {\r\n\r\nvar arrayWithHoles = __nested_webpack_require_116277__(153);\r\n\r\nvar iterableToArrayLimit = __nested_webpack_require_116277__(154);\r\n\r\nvar unsupportedIterableToArray = __nested_webpack_require_116277__(60);\r\n\r\nvar nonIterableRest = __nested_webpack_require_116277__(155);\r\n\r\nfunction _slicedToArray(arr, i) {\r\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\r\n}\r\n\r\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 84 */\r\n/***/ (function(module, exports, __nested_webpack_require_116851__) {\r\n\r\nmodule.exports = {\r\n  EPSILON: __nested_webpack_require_116851__(71),\r\n  create: __nested_webpack_require_116851__(72),\r\n  clone: __nested_webpack_require_116851__(191),\r\n  angle: __nested_webpack_require_116851__(192),\r\n  fromValues: __nested_webpack_require_116851__(73),\r\n  copy: __nested_webpack_require_116851__(193),\r\n  set: __nested_webpack_require_116851__(194),\r\n  equals: __nested_webpack_require_116851__(195),\r\n  exactEquals: __nested_webpack_require_116851__(196),\r\n  add: __nested_webpack_require_116851__(197),\r\n  subtract: __nested_webpack_require_116851__(76),\r\n  sub: __nested_webpack_require_116851__(198),\r\n  multiply: __nested_webpack_require_116851__(77),\r\n  mul: __nested_webpack_require_116851__(199),\r\n  divide: __nested_webpack_require_116851__(78),\r\n  div: __nested_webpack_require_116851__(200),\r\n  min: __nested_webpack_require_116851__(201),\r\n  max: __nested_webpack_require_116851__(202),\r\n  floor: __nested_webpack_require_116851__(203),\r\n  ceil: __nested_webpack_require_116851__(204),\r\n  round: __nested_webpack_require_116851__(205),\r\n  scale: __nested_webpack_require_116851__(206),\r\n  scaleAndAdd: __nested_webpack_require_116851__(207),\r\n  distance: __nested_webpack_require_116851__(79),\r\n  dist: __nested_webpack_require_116851__(208),\r\n  squaredDistance: __nested_webpack_require_116851__(80),\r\n  sqrDist: __nested_webpack_require_116851__(209),\r\n  length: __nested_webpack_require_116851__(81),\r\n  len: __nested_webpack_require_116851__(210),\r\n  squaredLength: __nested_webpack_require_116851__(82),\r\n  sqrLen: __nested_webpack_require_116851__(211),\r\n  negate: __nested_webpack_require_116851__(212),\r\n  inverse: __nested_webpack_require_116851__(213),\r\n  normalize: __nested_webpack_require_116851__(74),\r\n  dot: __nested_webpack_require_116851__(75),\r\n  cross: __nested_webpack_require_116851__(214),\r\n  lerp: __nested_webpack_require_116851__(215),\r\n  random: __nested_webpack_require_116851__(216),\r\n  transformMat4: __nested_webpack_require_116851__(217),\r\n  transformMat3: __nested_webpack_require_116851__(218),\r\n  transformQuat: __nested_webpack_require_116851__(219),\r\n  rotateX: __nested_webpack_require_116851__(220),\r\n  rotateY: __nested_webpack_require_116851__(221),\r\n  rotateZ: __nested_webpack_require_116851__(222),\r\n  forEach: __nested_webpack_require_116851__(223)\r\n};\r\n\r\n/***/ }),\r\n/* 85 */\r\n/***/ (function(module, exports, __nested_webpack_require_118635__) {\r\n\r\nvar basePick = __nested_webpack_require_118635__(229),\r\n    flatRest = __nested_webpack_require_118635__(243);\r\n/**\r\n * Creates an object composed of the picked `object` properties.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The source object.\r\n * @param {...(string|string[])} [paths] The property paths to pick.\r\n * @returns {Object} Returns the new object.\r\n * @example\r\n *\r\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n *\r\n * _.pick(object, ['a', 'c']);\r\n * // => { 'a': 1, 'c': 3 }\r\n */\r\n\r\n\r\nvar pick = flatRest(function (object, paths) {\r\n  return object == null ? {} : basePick(object, paths);\r\n});\r\nmodule.exports = pick;\r\n\r\n/***/ }),\r\n/* 86 */\r\n/***/ (function(module, exports, __nested_webpack_require_119376__) {\r\n\r\nvar getPrototypeOf = __nested_webpack_require_119376__(2);\r\n\r\nvar setPrototypeOf = __nested_webpack_require_119376__(41);\r\n\r\nvar isNativeFunction = __nested_webpack_require_119376__(248);\r\n\r\nvar construct = __nested_webpack_require_119376__(249);\r\n\r\nfunction _wrapNativeSuper(Class) {\r\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\r\n\r\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\r\n    if (Class === null || !isNativeFunction(Class)) return Class;\r\n\r\n    if (typeof Class !== \"function\") {\r\n      throw new TypeError(\"Super expression must either be null or a function\");\r\n    }\r\n\r\n    if (typeof _cache !== \"undefined\") {\r\n      if (_cache.has(Class)) return _cache.get(Class);\r\n\r\n      _cache.set(Class, Wrapper);\r\n    }\r\n\r\n    function Wrapper() {\r\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\r\n    }\r\n\r\n    Wrapper.prototype = Object.create(Class.prototype, {\r\n      constructor: {\r\n        value: Wrapper,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n    return setPrototypeOf(Wrapper, Class);\r\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  return _wrapNativeSuper(Class);\r\n}\r\n\r\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 87 */\r\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_120785__) {\r\n\r\n\"use strict\";\r\n/* harmony import */ var _tracer__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_120785__(21);\r\n\r\n/**\r\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\r\n */\r\n\r\nvar Rasterizer = {\r\n  createContour2D: function createContour2D() {\r\n    return {\r\n      dir: null,\r\n      index: null,\r\n      firstVertex: null,\r\n      insideContours: null,\r\n      nextpeer: null,\r\n      prevpeer: null\r\n    };\r\n  },\r\n  CONTOUR_DIR: {\r\n    CW_DIR: 0,\r\n    CCW_DIR: 1,\r\n    UNKNOWN_DIR: 2\r\n  },\r\n  DIR: {\r\n    OUTSIDE_EDGE: -32767,\r\n    INSIDE_EDGE: -32766\r\n  },\r\n  create: function create(imageWrapper, labelWrapper) {\r\n    var imageData = imageWrapper.data;\r\n    var labelData = labelWrapper.data;\r\n    var width = imageWrapper.size.x;\r\n    var height = imageWrapper.size.y;\r\n    var tracer = _tracer__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].create(imageWrapper, labelWrapper);\r\n    return {\r\n      rasterize: function rasterize(depthlabel) {\r\n        var color;\r\n        var bc;\r\n        var lc;\r\n        var labelindex;\r\n        var cx;\r\n        var cy;\r\n        var colorMap = [];\r\n        var vertex;\r\n        var p;\r\n        var cc;\r\n        var sc;\r\n        var pos;\r\n        var connectedCount = 0;\r\n        var i;\r\n\r\n        for (i = 0; i < 400; i++) {\r\n          colorMap[i] = 0;\r\n        }\r\n\r\n        colorMap[0] = imageData[0];\r\n        cc = null;\r\n\r\n        for (cy = 1; cy < height - 1; cy++) {\r\n          labelindex = 0;\r\n          bc = colorMap[0];\r\n\r\n          for (cx = 1; cx < width - 1; cx++) {\r\n            pos = cy * width + cx;\r\n\r\n            if (labelData[pos] === 0) {\r\n              color = imageData[pos];\r\n\r\n              if (color !== bc) {\r\n                if (labelindex === 0) {\r\n                  lc = connectedCount + 1;\r\n                  colorMap[lc] = color;\r\n                  bc = color;\r\n                  vertex = tracer.contourTracing(cy, cx, lc, color, Rasterizer.DIR.OUTSIDE_EDGE);\r\n\r\n                  if (vertex !== null) {\r\n                    connectedCount++;\r\n                    labelindex = lc;\r\n                    p = Rasterizer.createContour2D();\r\n                    p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\r\n                    p.index = labelindex;\r\n                    p.firstVertex = vertex;\r\n                    p.nextpeer = cc;\r\n                    p.insideContours = null;\r\n\r\n                    if (cc !== null) {\r\n                      cc.prevpeer = p;\r\n                    }\r\n\r\n                    cc = p;\r\n                  }\r\n                } else {\r\n                  vertex = tracer.contourTracing(cy, cx, Rasterizer.DIR.INSIDE_EDGE, color, labelindex);\r\n\r\n                  if (vertex !== null) {\r\n                    p = Rasterizer.createContour2D();\r\n                    p.firstVertex = vertex;\r\n                    p.insideContours = null;\r\n\r\n                    if (depthlabel === 0) {\r\n                      p.dir = Rasterizer.CONTOUR_DIR.CCW_DIR;\r\n                    } else {\r\n                      p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\r\n                    }\r\n\r\n                    p.index = depthlabel;\r\n                    sc = cc;\r\n\r\n                    while (sc !== null && sc.index !== labelindex) {\r\n                      sc = sc.nextpeer;\r\n                    }\r\n\r\n                    if (sc !== null) {\r\n                      p.nextpeer = sc.insideContours;\r\n\r\n                      if (sc.insideContours !== null) {\r\n                        sc.insideContours.prevpeer = p;\r\n                      }\r\n\r\n                      sc.insideContours = p;\r\n                    }\r\n                  }\r\n                }\r\n              } else {\r\n                labelData[pos] = labelindex;\r\n              }\r\n            } else if (labelData[pos] === Rasterizer.DIR.OUTSIDE_EDGE || labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\r\n              labelindex = 0;\r\n\r\n              if (labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\r\n                bc = imageData[pos];\r\n              } else {\r\n                bc = colorMap[0];\r\n              }\r\n            } else {\r\n              labelindex = labelData[pos];\r\n              bc = colorMap[labelindex];\r\n            }\r\n          }\r\n        }\r\n\r\n        sc = cc;\r\n\r\n        while (sc !== null) {\r\n          sc.index = depthlabel;\r\n          sc = sc.nextpeer;\r\n        }\r\n\r\n        return {\r\n          cc: cc,\r\n          count: connectedCount\r\n        };\r\n      },\r\n      debug: {\r\n        drawContour: function drawContour(canvas, firstContour) {\r\n          var ctx = canvas.getContext('2d');\r\n          var pq = firstContour;\r\n          var iq;\r\n          var q;\r\n          var p;\r\n          ctx.strokeStyle = 'red';\r\n          ctx.fillStyle = 'red';\r\n          ctx.lineWidth = 1;\r\n\r\n          if (pq !== null) {\r\n            iq = pq.insideContours;\r\n          } else {\r\n            iq = null;\r\n          }\r\n\r\n          while (pq !== null) {\r\n            if (iq !== null) {\r\n              q = iq;\r\n              iq = iq.nextpeer;\r\n            } else {\r\n              q = pq;\r\n              pq = pq.nextpeer;\r\n\r\n              if (pq !== null) {\r\n                iq = pq.insideContours;\r\n              } else {\r\n                iq = null;\r\n              }\r\n            }\r\n\r\n            switch (q.dir) {\r\n              case Rasterizer.CONTOUR_DIR.CW_DIR:\r\n                ctx.strokeStyle = 'red';\r\n                break;\r\n\r\n              case Rasterizer.CONTOUR_DIR.CCW_DIR:\r\n                ctx.strokeStyle = 'blue';\r\n                break;\r\n\r\n              case Rasterizer.CONTOUR_DIR.UNKNOWN_DIR:\r\n                ctx.strokeStyle = 'green';\r\n                break;\r\n            }\r\n\r\n            p = q.firstVertex;\r\n            ctx.beginPath();\r\n            ctx.moveTo(p.x, p.y);\r\n\r\n            do {\r\n              p = p.next;\r\n              ctx.lineTo(p.x, p.y);\r\n            } while (p !== q.firstVertex);\r\n\r\n            ctx.stroke();\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\n/* harmony default export */ __webpack_exports__[\"a\"] = (Rasterizer);\r\n\r\n/***/ }),\r\n/* 88 */\r\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\r\n\r\n\"use strict\";\r\n/* eslint-disable no-param-reassign */\r\n\r\n/* eslint-disable no-bitwise */\r\n\r\n/* eslint-disable eqeqeq */\r\n\r\n/* @preserve ASM BEGIN */\r\nfunction Skeletonizer(stdlib, foreign, buffer) {\r\n  'use asm';\r\n\r\n  var images = new stdlib.Uint8Array(buffer);\r\n  var size = foreign.size | 0;\r\n  var imul = stdlib.Math.imul;\r\n\r\n  function erode(inImagePtr, outImagePtr) {\r\n    inImagePtr |= 0;\r\n    outImagePtr |= 0;\r\n    var v = 0;\r\n    var u = 0;\r\n    var sum = 0;\r\n    var yStart1 = 0;\r\n    var yStart2 = 0;\r\n    var xStart1 = 0;\r\n    var xStart2 = 0;\r\n    var offset = 0;\r\n\r\n    for (v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0) {\r\n      offset = offset + size | 0;\r\n\r\n      for (u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0) {\r\n        yStart1 = offset - size | 0;\r\n        yStart2 = offset + size | 0;\r\n        xStart1 = u - 1 | 0;\r\n        xStart2 = u + 1 | 0;\r\n        sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\r\n\r\n        if ((sum | 0) == (5 | 0)) {\r\n          images[outImagePtr + offset + u | 0] = 1;\r\n        } else {\r\n          images[outImagePtr + offset + u | 0] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function subtract(aImagePtr, bImagePtr, outImagePtr) {\r\n    aImagePtr |= 0;\r\n    bImagePtr |= 0;\r\n    outImagePtr |= 0;\r\n    var length = 0;\r\n    length = imul(size, size) | 0;\r\n\r\n    while ((length | 0) > 0) {\r\n      length = length - 1 | 0;\r\n      images[outImagePtr + length | 0] = (images[aImagePtr + length | 0] | 0) - (images[bImagePtr + length | 0] | 0) | 0;\r\n    }\r\n  }\r\n\r\n  function bitwiseOr(aImagePtr, bImagePtr, outImagePtr) {\r\n    aImagePtr |= 0;\r\n    bImagePtr |= 0;\r\n    outImagePtr |= 0;\r\n    var length = 0;\r\n    length = imul(size, size) | 0;\r\n\r\n    while ((length | 0) > 0) {\r\n      length = length - 1 | 0;\r\n      images[outImagePtr + length | 0] = images[aImagePtr + length | 0] | 0 | (images[bImagePtr + length | 0] | 0) | 0;\r\n    }\r\n  }\r\n\r\n  function countNonZero(imagePtr) {\r\n    imagePtr |= 0;\r\n    var sum = 0;\r\n    var length = 0;\r\n    length = imul(size, size) | 0;\r\n\r\n    while ((length | 0) > 0) {\r\n      length = length - 1 | 0;\r\n      sum = (sum | 0) + (images[imagePtr + length | 0] | 0) | 0;\r\n    }\r\n\r\n    return sum | 0;\r\n  }\r\n\r\n  function init(imagePtr, value) {\r\n    imagePtr |= 0;\r\n    value |= 0;\r\n    var length = 0;\r\n    length = imul(size, size) | 0;\r\n\r\n    while ((length | 0) > 0) {\r\n      length = length - 1 | 0;\r\n      images[imagePtr + length | 0] = value;\r\n    }\r\n  }\r\n\r\n  function dilate(inImagePtr, outImagePtr) {\r\n    inImagePtr |= 0;\r\n    outImagePtr |= 0;\r\n    var v = 0;\r\n    var u = 0;\r\n    var sum = 0;\r\n    var yStart1 = 0;\r\n    var yStart2 = 0;\r\n    var xStart1 = 0;\r\n    var xStart2 = 0;\r\n    var offset = 0;\r\n\r\n    for (v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0) {\r\n      offset = offset + size | 0;\r\n\r\n      for (u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0) {\r\n        yStart1 = offset - size | 0;\r\n        yStart2 = offset + size | 0;\r\n        xStart1 = u - 1 | 0;\r\n        xStart2 = u + 1 | 0;\r\n        sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\r\n\r\n        if ((sum | 0) > (0 | 0)) {\r\n          images[outImagePtr + offset + u | 0] = 1;\r\n        } else {\r\n          images[outImagePtr + offset + u | 0] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function memcpy(srcImagePtr, dstImagePtr) {\r\n    srcImagePtr |= 0;\r\n    dstImagePtr |= 0;\r\n    var length = 0;\r\n    length = imul(size, size) | 0;\r\n\r\n    while ((length | 0) > 0) {\r\n      length = length - 1 | 0;\r\n      images[dstImagePtr + length | 0] = images[srcImagePtr + length | 0] | 0;\r\n    }\r\n  }\r\n\r\n  function zeroBorder(imagePtr) {\r\n    imagePtr |= 0;\r\n    var x = 0;\r\n    var y = 0;\r\n\r\n    for (x = 0; (x | 0) < (size - 1 | 0); x = x + 1 | 0) {\r\n      images[imagePtr + x | 0] = 0;\r\n      images[imagePtr + y | 0] = 0;\r\n      y = y + size - 1 | 0;\r\n      images[imagePtr + y | 0] = 0;\r\n      y = y + 1 | 0;\r\n    }\r\n\r\n    for (x = 0; (x | 0) < (size | 0); x = x + 1 | 0) {\r\n      images[imagePtr + y | 0] = 0;\r\n      y = y + 1 | 0;\r\n    }\r\n  }\r\n\r\n  function skeletonize() {\r\n    var subImagePtr = 0;\r\n    var erodedImagePtr = 0;\r\n    var tempImagePtr = 0;\r\n    var skelImagePtr = 0;\r\n    var sum = 0;\r\n    var done = 0;\r\n    erodedImagePtr = imul(size, size) | 0;\r\n    tempImagePtr = erodedImagePtr + erodedImagePtr | 0;\r\n    skelImagePtr = tempImagePtr + erodedImagePtr | 0; // init skel-image\r\n\r\n    init(skelImagePtr, 0);\r\n    zeroBorder(subImagePtr);\r\n\r\n    do {\r\n      erode(subImagePtr, erodedImagePtr);\r\n      dilate(erodedImagePtr, tempImagePtr);\r\n      subtract(subImagePtr, tempImagePtr, tempImagePtr);\r\n      bitwiseOr(skelImagePtr, tempImagePtr, skelImagePtr);\r\n      memcpy(erodedImagePtr, subImagePtr);\r\n      sum = countNonZero(subImagePtr) | 0;\r\n      done = (sum | 0) == 0 | 0;\r\n    } while (!done);\r\n  }\r\n\r\n  return {\r\n    skeletonize: skeletonize\r\n  };\r\n}\r\n/* @preserve ASM END */\r\n\r\n\r\n/* harmony default export */ __webpack_exports__[\"a\"] = (Skeletonizer);\r\n/* eslint-enable eqeqeq */\r\n\r\n/***/ }),\r\n/* 89 */\r\n/***/ (function(module, exports, __nested_webpack_require_132367__) {\r\n\r\nmodule.exports = __nested_webpack_require_132367__(263);\r\n\r\n\r\n/***/ }),\r\n/* 90 */\r\n/***/ (function(module, exports, __nested_webpack_require_132495__) {\r\n\r\nvar Stack = __nested_webpack_require_132495__(91),\r\n    assignMergeValue = __nested_webpack_require_132495__(48),\r\n    baseFor = __nested_webpack_require_132495__(121),\r\n    baseMergeDeep = __nested_webpack_require_132495__(123),\r\n    isObject = __nested_webpack_require_132495__(15),\r\n    keysIn = __nested_webpack_require_132495__(56),\r\n    safeGet = __nested_webpack_require_132495__(54);\r\n/**\r\n * The base implementation of `_.merge` without support for multiple sources.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @param {number} srcIndex The index of `source`.\r\n * @param {Function} [customizer] The function to customize merged values.\r\n * @param {Object} [stack] Tracks traversed source values and their merged\r\n *  counterparts.\r\n */\r\n\r\n\r\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\r\n  if (object === source) {\r\n    return;\r\n  }\r\n\r\n  baseFor(source, function (srcValue, key) {\r\n    stack || (stack = new Stack());\r\n\r\n    if (isObject(srcValue)) {\r\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\r\n    } else {\r\n      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;\r\n\r\n      if (newValue === undefined) {\r\n        newValue = srcValue;\r\n      }\r\n\r\n      assignMergeValue(object, key, newValue);\r\n    }\r\n  }, keysIn);\r\n}\r\n\r\nmodule.exports = baseMerge;\r\n\r\n/***/ }),\r\n/* 91 */\r\n/***/ (function(module, exports, __nested_webpack_require_133938__) {\r\n\r\nvar ListCache = __nested_webpack_require_133938__(24),\r\n    stackClear = __nested_webpack_require_133938__(97),\r\n    stackDelete = __nested_webpack_require_133938__(98),\r\n    stackGet = __nested_webpack_require_133938__(99),\r\n    stackHas = __nested_webpack_require_133938__(100),\r\n    stackSet = __nested_webpack_require_133938__(101);\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\n\r\n\r\nfunction Stack(entries) {\r\n  var data = this.__data__ = new ListCache(entries);\r\n  this.size = data.size;\r\n} // Add methods to `Stack`.\r\n\r\n\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\nmodule.exports = Stack;\r\n\r\n/***/ }),\r\n/* 92 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n  this.size = 0;\r\n}\r\n\r\nmodule.exports = listCacheClear;\r\n\r\n/***/ }),\r\n/* 93 */\r\n/***/ (function(module, exports, __nested_webpack_require_135076__) {\r\n\r\nvar assocIndexOf = __nested_webpack_require_135076__(25);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar arrayProto = Array.prototype;\r\n/** Built-in value references. */\r\n\r\nvar splice = arrayProto.splice;\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\n\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n\r\n  var lastIndex = data.length - 1;\r\n\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n\r\n  --this.size;\r\n  return true;\r\n}\r\n\r\nmodule.exports = listCacheDelete;\r\n\r\n/***/ }),\r\n/* 94 */\r\n/***/ (function(module, exports, __nested_webpack_require_135973__) {\r\n\r\nvar assocIndexOf = __nested_webpack_require_135973__(25);\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\n\r\n\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\nmodule.exports = listCacheGet;\r\n\r\n/***/ }),\r\n/* 95 */\r\n/***/ (function(module, exports, __nested_webpack_require_136491__) {\r\n\r\nvar assocIndexOf = __nested_webpack_require_136491__(25);\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\n\r\n\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\nmodule.exports = listCacheHas;\r\n\r\n/***/ }),\r\n/* 96 */\r\n/***/ (function(module, exports, __nested_webpack_require_136991__) {\r\n\r\nvar assocIndexOf = __nested_webpack_require_136991__(25);\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\n\r\n\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    ++this.size;\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\nmodule.exports = listCacheSet;\r\n\r\n/***/ }),\r\n/* 97 */\r\n/***/ (function(module, exports, __nested_webpack_require_137653__) {\r\n\r\nvar ListCache = __nested_webpack_require_137653__(24);\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\n\r\n\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache();\r\n  this.size = 0;\r\n}\r\n\r\nmodule.exports = stackClear;\r\n\r\n/***/ }),\r\n/* 98 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  var data = this.__data__,\r\n      result = data['delete'](key);\r\n  this.size = data.size;\r\n  return result;\r\n}\r\n\r\nmodule.exports = stackDelete;\r\n\r\n/***/ }),\r\n/* 99 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\nmodule.exports = stackGet;\r\n\r\n/***/ }),\r\n/* 100 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\nmodule.exports = stackHas;\r\n\r\n/***/ }),\r\n/* 101 */\r\n/***/ (function(module, exports, __nested_webpack_require_139236__) {\r\n\r\nvar ListCache = __nested_webpack_require_139236__(24),\r\n    Map = __nested_webpack_require_139236__(44),\r\n    MapCache = __nested_webpack_require_139236__(47);\r\n/** Used as the size to enable large array optimizations. */\r\n\r\n\r\nvar LARGE_ARRAY_SIZE = 200;\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\n\r\nfunction stackSet(key, value) {\r\n  var data = this.__data__;\r\n\r\n  if (data instanceof ListCache) {\r\n    var pairs = data.__data__;\r\n\r\n    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\r\n      pairs.push([key, value]);\r\n      this.size = ++data.size;\r\n      return this;\r\n    }\r\n\r\n    data = this.__data__ = new MapCache(pairs);\r\n  }\r\n\r\n  data.set(key, value);\r\n  this.size = data.size;\r\n  return this;\r\n}\r\n\r\nmodule.exports = stackSet;\r\n\r\n/***/ }),\r\n/* 102 */\r\n/***/ (function(module, exports, __nested_webpack_require_140221__) {\r\n\r\nvar isFunction = __nested_webpack_require_140221__(36),\r\n    isMasked = __nested_webpack_require_140221__(105),\r\n    isObject = __nested_webpack_require_140221__(15),\r\n    toSource = __nested_webpack_require_140221__(107);\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\n\r\n\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n/** Used to detect host constructors (Safari). */\r\n\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n/** Used for built-in method references. */\r\n\r\nvar funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n/** Used to resolve the decompiled source of functions. */\r\n\r\nvar funcToString = funcProto.toString;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/** Used to detect if a method is native. */\r\n\r\nvar reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\n\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n\r\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\nmodule.exports = baseIsNative;\r\n\r\n/***/ }),\r\n/* 103 */\r\n/***/ (function(module, exports, __nested_webpack_require_141769__) {\r\n\r\nvar Symbol = __nested_webpack_require_141769__(27);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\n\r\nvar nativeObjectToString = objectProto.toString;\r\n/** Built-in value references. */\r\n\r\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\n\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n      tag = value[symToStringTag];\r\n\r\n  try {\r\n    value[symToStringTag] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag] = tag;\r\n    } else {\r\n      delete value[symToStringTag];\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = getRawTag;\r\n\r\n/***/ }),\r\n/* 104 */\r\n/***/ (function(module, exports) {\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\n\r\nvar nativeObjectToString = objectProto.toString;\r\n/**\r\n * Converts `value` to a string using `Object.prototype.toString`.\r\n *\r\n * @private\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n */\r\n\r\nfunction objectToString(value) {\r\n  return nativeObjectToString.call(value);\r\n}\r\n\r\nmodule.exports = objectToString;\r\n\r\n/***/ }),\r\n/* 105 */\r\n/***/ (function(module, exports, __nested_webpack_require_143695__) {\r\n\r\nvar coreJsData = __nested_webpack_require_143695__(106);\r\n/** Used to detect methods masquerading as native. */\r\n\r\n\r\nvar maskSrcKey = function () {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? 'Symbol(src)_1.' + uid : '';\r\n}();\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\n\r\n\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && maskSrcKey in func;\r\n}\r\n\r\nmodule.exports = isMasked;\r\n\r\n/***/ }),\r\n/* 106 */\r\n/***/ (function(module, exports, __nested_webpack_require_144361__) {\r\n\r\nvar root = __nested_webpack_require_144361__(18);\r\n/** Used to detect overreaching core-js shims. */\r\n\r\n\r\nvar coreJsData = root['__core-js_shared__'];\r\nmodule.exports = coreJsData;\r\n\r\n/***/ }),\r\n/* 107 */\r\n/***/ (function(module, exports) {\r\n\r\n/** Used for built-in method references. */\r\nvar funcProto = Function.prototype;\r\n/** Used to resolve the decompiled source of functions. */\r\n\r\nvar funcToString = funcProto.toString;\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to convert.\r\n * @returns {string} Returns the source code.\r\n */\r\n\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n\r\n    try {\r\n      return func + '';\r\n    } catch (e) {}\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nmodule.exports = toSource;\r\n\r\n/***/ }),\r\n/* 108 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\nmodule.exports = getValue;\r\n\r\n/***/ }),\r\n/* 109 */\r\n/***/ (function(module, exports, __nested_webpack_require_145658__) {\r\n\r\nvar Hash = __nested_webpack_require_145658__(110),\r\n    ListCache = __nested_webpack_require_145658__(24),\r\n    Map = __nested_webpack_require_145658__(44);\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\n\r\n\r\nfunction mapCacheClear() {\r\n  this.size = 0;\r\n  this.__data__ = {\r\n    'hash': new Hash(),\r\n    'map': new (Map || ListCache)(),\r\n    'string': new Hash()\r\n  };\r\n}\r\n\r\nmodule.exports = mapCacheClear;\r\n\r\n/***/ }),\r\n/* 110 */\r\n/***/ (function(module, exports, __nested_webpack_require_146175__) {\r\n\r\nvar hashClear = __nested_webpack_require_146175__(111),\r\n    hashDelete = __nested_webpack_require_146175__(112),\r\n    hashGet = __nested_webpack_require_146175__(113),\r\n    hashHas = __nested_webpack_require_146175__(114),\r\n    hashSet = __nested_webpack_require_146175__(115);\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\n\r\n\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n  this.clear();\r\n\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n} // Add methods to `Hash`.\r\n\r\n\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\nmodule.exports = Hash;\r\n\r\n/***/ }),\r\n/* 111 */\r\n/***/ (function(module, exports, __nested_webpack_require_147048__) {\r\n\r\nvar nativeCreate = __nested_webpack_require_147048__(28);\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\n\r\n\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n  this.size = 0;\r\n}\r\n\r\nmodule.exports = hashClear;\r\n\r\n/***/ }),\r\n/* 112 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  var result = this.has(key) && delete this.__data__[key];\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\nmodule.exports = hashDelete;\r\n\r\n/***/ }),\r\n/* 113 */\r\n/***/ (function(module, exports, __nested_webpack_require_147950__) {\r\n\r\nvar nativeCreate = __nested_webpack_require_147950__(28);\r\n/** Used to stand-in for `undefined` hash values. */\r\n\r\n\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n/** Used for built-in method references. */\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\n\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\nmodule.exports = hashGet;\r\n\r\n/***/ }),\r\n/* 114 */\r\n/***/ (function(module, exports, __nested_webpack_require_148838__) {\r\n\r\nvar nativeCreate = __nested_webpack_require_148838__(28);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\n\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\r\n}\r\n\r\nmodule.exports = hashHas;\r\n\r\n/***/ }),\r\n/* 115 */\r\n/***/ (function(module, exports, __nested_webpack_require_149567__) {\r\n\r\nvar nativeCreate = __nested_webpack_require_149567__(28);\r\n/** Used to stand-in for `undefined` hash values. */\r\n\r\n\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\n\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  this.size += this.has(key) ? 0 : 1;\r\n  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\nmodule.exports = hashSet;\r\n\r\n/***/ }),\r\n/* 116 */\r\n/***/ (function(module, exports, __nested_webpack_require_150268__) {\r\n\r\nvar getMapData = __nested_webpack_require_150268__(29);\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\n\r\n\r\nfunction mapCacheDelete(key) {\r\n  var result = getMapData(this, key)['delete'](key);\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\nmodule.exports = mapCacheDelete;\r\n\r\n/***/ }),\r\n/* 117 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\r\n}\r\n\r\nmodule.exports = isKeyable;\r\n\r\n/***/ }),\r\n/* 118 */\r\n/***/ (function(module, exports, __nested_webpack_require_151311__) {\r\n\r\nvar getMapData = __nested_webpack_require_151311__(29);\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\n\r\n\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\nmodule.exports = mapCacheGet;\r\n\r\n/***/ }),\r\n/* 119 */\r\n/***/ (function(module, exports, __nested_webpack_require_151741__) {\r\n\r\nvar getMapData = __nested_webpack_require_151741__(29);\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\n\r\n\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\nmodule.exports = mapCacheHas;\r\n\r\n/***/ }),\r\n/* 120 */\r\n/***/ (function(module, exports, __nested_webpack_require_152223__) {\r\n\r\nvar getMapData = __nested_webpack_require_152223__(29);\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\n\r\n\r\nfunction mapCacheSet(key, value) {\r\n  var data = getMapData(this, key),\r\n      size = data.size;\r\n  data.set(key, value);\r\n  this.size += data.size == size ? 0 : 1;\r\n  return this;\r\n}\r\n\r\nmodule.exports = mapCacheSet;\r\n\r\n/***/ }),\r\n/* 121 */\r\n/***/ (function(module, exports, __nested_webpack_require_152816__) {\r\n\r\nvar createBaseFor = __nested_webpack_require_152816__(122);\r\n/**\r\n * The base implementation of `baseForOwn` which iterates over `object`\r\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n *\r\n * @private\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @returns {Object} Returns `object`.\r\n */\r\n\r\n\r\nvar baseFor = createBaseFor();\r\nmodule.exports = baseFor;\r\n\r\n/***/ }),\r\n/* 122 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n *\r\n * @private\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {Function} Returns the new base function.\r\n */\r\nfunction createBaseFor(fromRight) {\r\n  return function (object, iteratee, keysFunc) {\r\n    var index = -1,\r\n        iterable = Object(object),\r\n        props = keysFunc(object),\r\n        length = props.length;\r\n\r\n    while (length--) {\r\n      var key = props[fromRight ? length : ++index];\r\n\r\n      if (iteratee(iterable[key], key, iterable) === false) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return object;\r\n  };\r\n}\r\n\r\nmodule.exports = createBaseFor;\r\n\r\n/***/ }),\r\n/* 123 */\r\n/***/ (function(module, exports, __nested_webpack_require_154245__) {\r\n\r\nvar assignMergeValue = __nested_webpack_require_154245__(48),\r\n    cloneBuffer = __nested_webpack_require_154245__(124),\r\n    cloneTypedArray = __nested_webpack_require_154245__(125),\r\n    copyArray = __nested_webpack_require_154245__(128),\r\n    initCloneObject = __nested_webpack_require_154245__(129),\r\n    isArguments = __nested_webpack_require_154245__(30),\r\n    isArray = __nested_webpack_require_154245__(16),\r\n    isArrayLikeObject = __nested_webpack_require_154245__(133),\r\n    isBuffer = __nested_webpack_require_154245__(52),\r\n    isFunction = __nested_webpack_require_154245__(36),\r\n    isObject = __nested_webpack_require_154245__(15),\r\n    isPlainObject = __nested_webpack_require_154245__(135),\r\n    isTypedArray = __nested_webpack_require_154245__(53),\r\n    safeGet = __nested_webpack_require_154245__(54),\r\n    toPlainObject = __nested_webpack_require_154245__(139);\r\n/**\r\n * A specialized version of `baseMerge` for arrays and objects which performs\r\n * deep merges and tracks traversed objects enabling objects with circular\r\n * references to be merged.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @param {string} key The key of the value to merge.\r\n * @param {number} srcIndex The index of `source`.\r\n * @param {Function} mergeFunc The function to merge values.\r\n * @param {Function} [customizer] The function to customize assigned values.\r\n * @param {Object} [stack] Tracks traversed source values and their merged\r\n *  counterparts.\r\n */\r\n\r\n\r\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\r\n  var objValue = safeGet(object, key),\r\n      srcValue = safeGet(source, key),\r\n      stacked = stack.get(srcValue);\r\n\r\n  if (stacked) {\r\n    assignMergeValue(object, key, stacked);\r\n    return;\r\n  }\r\n\r\n  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\r\n  var isCommon = newValue === undefined;\r\n\r\n  if (isCommon) {\r\n    var isArr = isArray(srcValue),\r\n        isBuff = !isArr && isBuffer(srcValue),\r\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\r\n    newValue = srcValue;\r\n\r\n    if (isArr || isBuff || isTyped) {\r\n      if (isArray(objValue)) {\r\n        newValue = objValue;\r\n      } else if (isArrayLikeObject(objValue)) {\r\n        newValue = copyArray(objValue);\r\n      } else if (isBuff) {\r\n        isCommon = false;\r\n        newValue = cloneBuffer(srcValue, true);\r\n      } else if (isTyped) {\r\n        isCommon = false;\r\n        newValue = cloneTypedArray(srcValue, true);\r\n      } else {\r\n        newValue = [];\r\n      }\r\n    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\r\n      newValue = objValue;\r\n\r\n      if (isArguments(objValue)) {\r\n        newValue = toPlainObject(objValue);\r\n      } else if (!isObject(objValue) || isFunction(objValue)) {\r\n        newValue = initCloneObject(srcValue);\r\n      }\r\n    } else {\r\n      isCommon = false;\r\n    }\r\n  }\r\n\r\n  if (isCommon) {\r\n    // Recursively merge objects and arrays (susceptible to call stack limits).\r\n    stack.set(srcValue, newValue);\r\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\r\n    stack['delete'](srcValue);\r\n  }\r\n\r\n  assignMergeValue(object, key, newValue);\r\n}\r\n\r\nmodule.exports = baseMergeDeep;\r\n\r\n/***/ }),\r\n/* 124 */\r\n/***/ (function(module, exports, __nested_webpack_require_157421__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {var root = __nested_webpack_require_157421__(18);\r\n/** Detect free variable `exports`. */\r\n\r\n\r\nvar freeExports =   true && exports && !exports.nodeType && exports;\r\n/** Detect free variable `module`. */\r\n\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\n\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n/** Built-in value references. */\r\n\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\r\n/**\r\n * Creates a clone of  `buffer`.\r\n *\r\n * @private\r\n * @param {Buffer} buffer The buffer to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Buffer} Returns the cloned buffer.\r\n */\r\n\r\nfunction cloneBuffer(buffer, isDeep) {\r\n  if (isDeep) {\r\n    return buffer.slice();\r\n  }\r\n\r\n  var length = buffer.length,\r\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\r\n  buffer.copy(result);\r\n  return result;\r\n}\r\n\r\nmodule.exports = cloneBuffer;\r\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_157421__(38)(module)))\r\n\r\n/***/ }),\r\n/* 125 */\r\n/***/ (function(module, exports, __nested_webpack_require_158702__) {\r\n\r\nvar cloneArrayBuffer = __nested_webpack_require_158702__(126);\r\n/**\r\n * Creates a clone of `typedArray`.\r\n *\r\n * @private\r\n * @param {Object} typedArray The typed array to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned typed array.\r\n */\r\n\r\n\r\nfunction cloneTypedArray(typedArray, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\r\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\r\n}\r\n\r\nmodule.exports = cloneTypedArray;\r\n\r\n/***/ }),\r\n/* 126 */\r\n/***/ (function(module, exports, __nested_webpack_require_159324__) {\r\n\r\nvar Uint8Array = __nested_webpack_require_159324__(127);\r\n/**\r\n * Creates a clone of `arrayBuffer`.\r\n *\r\n * @private\r\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\r\n * @returns {ArrayBuffer} Returns the cloned array buffer.\r\n */\r\n\r\n\r\nfunction cloneArrayBuffer(arrayBuffer) {\r\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\r\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\r\n  return result;\r\n}\r\n\r\nmodule.exports = cloneArrayBuffer;\r\n\r\n/***/ }),\r\n/* 127 */\r\n/***/ (function(module, exports, __nested_webpack_require_159874__) {\r\n\r\nvar root = __nested_webpack_require_159874__(18);\r\n/** Built-in value references. */\r\n\r\n\r\nvar Uint8Array = root.Uint8Array;\r\nmodule.exports = Uint8Array;\r\n\r\n/***/ }),\r\n/* 128 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Copies the values of `source` to `array`.\r\n *\r\n * @private\r\n * @param {Array} source The array to copy values from.\r\n * @param {Array} [array=[]] The array to copy values to.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction copyArray(source, array) {\r\n  var index = -1,\r\n      length = source.length;\r\n  array || (array = Array(length));\r\n\r\n  while (++index < length) {\r\n    array[index] = source[index];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nmodule.exports = copyArray;\r\n\r\n/***/ }),\r\n/* 129 */\r\n/***/ (function(module, exports, __nested_webpack_require_160636__) {\r\n\r\nvar baseCreate = __nested_webpack_require_160636__(130),\r\n    getPrototype = __nested_webpack_require_160636__(50),\r\n    isPrototype = __nested_webpack_require_160636__(51);\r\n/**\r\n * Initializes an object clone.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\n\r\n\r\nfunction initCloneObject(object) {\r\n  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\r\n}\r\n\r\nmodule.exports = initCloneObject;\r\n\r\n/***/ }),\r\n/* 130 */\r\n/***/ (function(module, exports, __nested_webpack_require_161208__) {\r\n\r\nvar isObject = __nested_webpack_require_161208__(15);\r\n/** Built-in value references. */\r\n\r\n\r\nvar objectCreate = Object.create;\r\n/**\r\n * The base implementation of `_.create` without support for assigning\r\n * properties to the created object.\r\n *\r\n * @private\r\n * @param {Object} proto The object to inherit from.\r\n * @returns {Object} Returns the new object.\r\n */\r\n\r\nvar baseCreate = function () {\r\n  function object() {}\r\n\r\n  return function (proto) {\r\n    if (!isObject(proto)) {\r\n      return {};\r\n    }\r\n\r\n    if (objectCreate) {\r\n      return objectCreate(proto);\r\n    }\r\n\r\n    object.prototype = proto;\r\n    var result = new object();\r\n    object.prototype = undefined;\r\n    return result;\r\n  };\r\n}();\r\n\r\nmodule.exports = baseCreate;\r\n\r\n/***/ }),\r\n/* 131 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function (arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\nmodule.exports = overArg;\r\n\r\n/***/ }),\r\n/* 132 */\r\n/***/ (function(module, exports, __nested_webpack_require_162479__) {\r\n\r\nvar baseGetTag = __nested_webpack_require_162479__(22),\r\n    isObjectLike = __nested_webpack_require_162479__(19);\r\n/** `Object#toString` result references. */\r\n\r\n\r\nvar argsTag = '[object Arguments]';\r\n/**\r\n * The base implementation of `_.isArguments`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n */\r\n\r\nfunction baseIsArguments(value) {\r\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n}\r\n\r\nmodule.exports = baseIsArguments;\r\n\r\n/***/ }),\r\n/* 133 */\r\n/***/ (function(module, exports, __nested_webpack_require_163067__) {\r\n\r\nvar isArrayLike = __nested_webpack_require_163067__(39),\r\n    isObjectLike = __nested_webpack_require_163067__(19);\r\n/**\r\n * This method is like `_.isArrayLike` except that it also checks if `value`\r\n * is an object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArrayLikeObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject('abc');\r\n * // => false\r\n *\r\n * _.isArrayLikeObject(_.noop);\r\n * // => false\r\n */\r\n\r\n\r\nfunction isArrayLikeObject(value) {\r\n  return isObjectLike(value) && isArrayLike(value);\r\n}\r\n\r\nmodule.exports = isArrayLikeObject;\r\n\r\n/***/ }),\r\n/* 134 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = stubFalse;\r\n\r\n/***/ }),\r\n/* 135 */\r\n/***/ (function(module, exports, __nested_webpack_require_164284__) {\r\n\r\nvar baseGetTag = __nested_webpack_require_164284__(22),\r\n    getPrototype = __nested_webpack_require_164284__(50),\r\n    isObjectLike = __nested_webpack_require_164284__(19);\r\n/** `Object#toString` result references. */\r\n\r\n\r\nvar objectTag = '[object Object]';\r\n/** Used for built-in method references. */\r\n\r\nvar funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n/** Used to resolve the decompiled source of functions. */\r\n\r\nvar funcToString = funcProto.toString;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/** Used to infer the `Object` constructor. */\r\n\r\nvar objectCtorString = funcToString.call(Object);\r\n/**\r\n * Checks if `value` is a plain object, that is, an object created by the\r\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.8.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n * }\r\n *\r\n * _.isPlainObject(new Foo);\r\n * // => false\r\n *\r\n * _.isPlainObject([1, 2, 3]);\r\n * // => false\r\n *\r\n * _.isPlainObject({ 'x': 0, 'y': 0 });\r\n * // => true\r\n *\r\n * _.isPlainObject(Object.create(null));\r\n * // => true\r\n */\r\n\r\nfunction isPlainObject(value) {\r\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\r\n    return false;\r\n  }\r\n\r\n  var proto = getPrototype(value);\r\n\r\n  if (proto === null) {\r\n    return true;\r\n  }\r\n\r\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\r\n  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\r\n}\r\n\r\nmodule.exports = isPlainObject;\r\n\r\n/***/ }),\r\n/* 136 */\r\n/***/ (function(module, exports, __nested_webpack_require_166076__) {\r\n\r\nvar baseGetTag = __nested_webpack_require_166076__(22),\r\n    isLength = __nested_webpack_require_166076__(40),\r\n    isObjectLike = __nested_webpack_require_166076__(19);\r\n/** `Object#toString` result references. */\r\n\r\n\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    objectTag = '[object Object]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    weakMapTag = '[object WeakMap]';\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n/** Used to identify `toStringTag` values of typed arrays. */\r\n\r\nvar typedArrayTags = {};\r\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\r\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\r\n/**\r\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n */\r\n\r\nfunction baseIsTypedArray(value) {\r\n  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n}\r\n\r\nmodule.exports = baseIsTypedArray;\r\n\r\n/***/ }),\r\n/* 137 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * The base implementation of `_.unary` without support for storing metadata.\r\n *\r\n * @private\r\n * @param {Function} func The function to cap arguments for.\r\n * @returns {Function} Returns the new capped function.\r\n */\r\nfunction baseUnary(func) {\r\n  return function (value) {\r\n    return func(value);\r\n  };\r\n}\r\n\r\nmodule.exports = baseUnary;\r\n\r\n/***/ }),\r\n/* 138 */\r\n/***/ (function(module, exports, __nested_webpack_require_168833__) {\r\n\r\n/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __nested_webpack_require_168833__(45);\r\n/** Detect free variable `exports`. */\r\n\r\n\r\nvar freeExports =   true && exports && !exports.nodeType && exports;\r\n/** Detect free variable `module`. */\r\n\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\n\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n/** Detect free variable `process` from Node.js. */\r\n\r\nvar freeProcess = moduleExports && freeGlobal.process;\r\n/** Used to access faster Node.js helpers. */\r\n\r\nvar nodeUtil = function () {\r\n  try {\r\n    // Use `util.types` for Node.js 10+.\r\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\r\n\r\n    if (types) {\r\n      return types;\r\n    } // Legacy `process.binding('util')` for Node.js < 10.\r\n\r\n\r\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n  } catch (e) {}\r\n}();\r\n\r\nmodule.exports = nodeUtil;\r\n/* WEBPACK VAR INJECTION */}.call(this, __nested_webpack_require_168833__(38)(module)))\r\n\r\n/***/ }),\r\n/* 139 */\r\n/***/ (function(module, exports, __nested_webpack_require_170038__) {\r\n\r\nvar copyObject = __nested_webpack_require_170038__(140),\r\n    keysIn = __nested_webpack_require_170038__(56);\r\n/**\r\n * Converts `value` to a plain object flattening inherited enumerable string\r\n * keyed properties of `value` to own properties of the plain object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to convert.\r\n * @returns {Object} Returns the converted plain object.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.assign({ 'a': 1 }, new Foo);\r\n * // => { 'a': 1, 'b': 2 }\r\n *\r\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\r\n * // => { 'a': 1, 'b': 2, 'c': 3 }\r\n */\r\n\r\n\r\nfunction toPlainObject(value) {\r\n  return copyObject(value, keysIn(value));\r\n}\r\n\r\nmodule.exports = toPlainObject;\r\n\r\n/***/ }),\r\n/* 140 */\r\n/***/ (function(module, exports, __nested_webpack_require_170903__) {\r\n\r\nvar assignValue = __nested_webpack_require_170903__(55),\r\n    baseAssignValue = __nested_webpack_require_170903__(37);\r\n/**\r\n * Copies properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy properties from.\r\n * @param {Array} props The property identifiers to copy.\r\n * @param {Object} [object={}] The object to copy properties to.\r\n * @param {Function} [customizer] The function to customize copied values.\r\n * @returns {Object} Returns `object`.\r\n */\r\n\r\n\r\nfunction copyObject(source, props, object, customizer) {\r\n  var isNew = !object;\r\n  object || (object = {});\r\n  var index = -1,\r\n      length = props.length;\r\n\r\n  while (++index < length) {\r\n    var key = props[index];\r\n    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\r\n\r\n    if (newValue === undefined) {\r\n      newValue = source[key];\r\n    }\r\n\r\n    if (isNew) {\r\n      baseAssignValue(object, key, newValue);\r\n    } else {\r\n      assignValue(object, key, newValue);\r\n    }\r\n  }\r\n\r\n  return object;\r\n}\r\n\r\nmodule.exports = copyObject;\r\n\r\n/***/ }),\r\n/* 141 */\r\n/***/ (function(module, exports, __nested_webpack_require_172050__) {\r\n\r\nvar baseTimes = __nested_webpack_require_172050__(142),\r\n    isArguments = __nested_webpack_require_172050__(30),\r\n    isArray = __nested_webpack_require_172050__(16),\r\n    isBuffer = __nested_webpack_require_172050__(52),\r\n    isIndex = __nested_webpack_require_172050__(31),\r\n    isTypedArray = __nested_webpack_require_172050__(53);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\n\r\nfunction arrayLikeKeys(value, inherited) {\r\n  var isArr = isArray(value),\r\n      isArg = !isArr && isArguments(value),\r\n      isBuff = !isArr && !isArg && isBuffer(value),\r\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n      skipIndexes = isArr || isArg || isBuff || isType,\r\n      result = skipIndexes ? baseTimes(value.length, String) : [],\r\n      length = result.length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.\r\n    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\r\n    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\r\n    isIndex(key, length)))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = arrayLikeKeys;\r\n\r\n/***/ }),\r\n/* 142 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseTimes;\r\n\r\n/***/ }),\r\n/* 143 */\r\n/***/ (function(module, exports, __nested_webpack_require_174458__) {\r\n\r\nvar isObject = __nested_webpack_require_174458__(15),\r\n    isPrototype = __nested_webpack_require_174458__(51),\r\n    nativeKeysIn = __nested_webpack_require_174458__(144);\r\n/** Used for built-in method references. */\r\n\r\n\r\nvar objectProto = Object.prototype;\r\n/** Used to check objects for own properties. */\r\n\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n/**\r\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\n\r\nfunction baseKeysIn(object) {\r\n  if (!isObject(object)) {\r\n    return nativeKeysIn(object);\r\n  }\r\n\r\n  var isProto = isPrototype(object),\r\n      result = [];\r\n\r\n  for (var key in object) {\r\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseKeysIn;\r\n\r\n/***/ }),\r\n/* 144 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * This function is like\r\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * except that it includes inherited enumerable properties.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction nativeKeysIn(object) {\r\n  var result = [];\r\n\r\n  if (object != null) {\r\n    for (var key in Object(object)) {\r\n      result.push(key);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = nativeKeysIn;\r\n\r\n/***/ }),\r\n/* 145 */\r\n/***/ (function(module, exports, __nested_webpack_require_176024__) {\r\n\r\nvar baseRest = __nested_webpack_require_176024__(146),\r\n    isIterateeCall = __nested_webpack_require_176024__(151);\r\n/**\r\n * Creates a function like `_.assign`.\r\n *\r\n * @private\r\n * @param {Function} assigner The function to assign values.\r\n * @returns {Function} Returns the new assigner function.\r\n */\r\n\r\n\r\nfunction createAssigner(assigner) {\r\n  return baseRest(function (object, sources) {\r\n    var index = -1,\r\n        length = sources.length,\r\n        customizer = length > 1 ? sources[length - 1] : undefined,\r\n        guard = length > 2 ? sources[2] : undefined;\r\n    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;\r\n\r\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\r\n      customizer = length < 3 ? undefined : customizer;\r\n      length = 1;\r\n    }\r\n\r\n    object = Object(object);\r\n\r\n    while (++index < length) {\r\n      var source = sources[index];\r\n\r\n      if (source) {\r\n        assigner(object, source, index, customizer);\r\n      }\r\n    }\r\n\r\n    return object;\r\n  });\r\n}\r\n\r\nmodule.exports = createAssigner;\r\n\r\n/***/ }),\r\n/* 146 */\r\n/***/ (function(module, exports, __nested_webpack_require_177177__) {\r\n\r\nvar identity = __nested_webpack_require_177177__(57),\r\n    overRest = __nested_webpack_require_177177__(58),\r\n    setToString = __nested_webpack_require_177177__(59);\r\n/**\r\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\r\n *\r\n * @private\r\n * @param {Function} func The function to apply a rest parameter to.\r\n * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n * @returns {Function} Returns the new function.\r\n */\r\n\r\n\r\nfunction baseRest(func, start) {\r\n  return setToString(overRest(func, start, identity), func + '');\r\n}\r\n\r\nmodule.exports = baseRest;\r\n\r\n/***/ }),\r\n/* 147 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * A faster alternative to `Function#apply`, this function invokes `func`\r\n * with the `this` binding of `thisArg` and the arguments of `args`.\r\n *\r\n * @private\r\n * @param {Function} func The function to invoke.\r\n * @param {*} thisArg The `this` binding of `func`.\r\n * @param {Array} args The arguments to invoke `func` with.\r\n * @returns {*} Returns the result of `func`.\r\n */\r\nfunction apply(func, thisArg, args) {\r\n  switch (args.length) {\r\n    case 0:\r\n      return func.call(thisArg);\r\n\r\n    case 1:\r\n      return func.call(thisArg, args[0]);\r\n\r\n    case 2:\r\n      return func.call(thisArg, args[0], args[1]);\r\n\r\n    case 3:\r\n      return func.call(thisArg, args[0], args[1], args[2]);\r\n  }\r\n\r\n  return func.apply(thisArg, args);\r\n}\r\n\r\nmodule.exports = apply;\r\n\r\n/***/ }),\r\n/* 148 */\r\n/***/ (function(module, exports, __nested_webpack_require_178672__) {\r\n\r\nvar constant = __nested_webpack_require_178672__(149),\r\n    defineProperty = __nested_webpack_require_178672__(49),\r\n    identity = __nested_webpack_require_178672__(57);\r\n/**\r\n * The base implementation of `setToString` without support for hot loop shorting.\r\n *\r\n * @private\r\n * @param {Function} func The function to modify.\r\n * @param {Function} string The `toString` result.\r\n * @returns {Function} Returns `func`.\r\n */\r\n\r\n\r\nvar baseSetToString = !defineProperty ? identity : function (func, string) {\r\n  return defineProperty(func, 'toString', {\r\n    'configurable': true,\r\n    'enumerable': false,\r\n    'value': constant(string),\r\n    'writable': true\r\n  });\r\n};\r\nmodule.exports = baseSetToString;\r\n\r\n/***/ }),\r\n/* 149 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Creates a function that returns `value`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Util\r\n * @param {*} value The value to return from the new function.\r\n * @returns {Function} Returns the new constant function.\r\n * @example\r\n *\r\n * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n *\r\n * console.log(objects);\r\n * // => [{ 'a': 1 }, { 'a': 1 }]\r\n *\r\n * console.log(objects[0] === objects[1]);\r\n * // => true\r\n */\r\nfunction constant(value) {\r\n  return function () {\r\n    return value;\r\n  };\r\n}\r\n\r\nmodule.exports = constant;\r\n\r\n/***/ }),\r\n/* 150 */\r\n/***/ (function(module, exports) {\r\n\r\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\r\nvar HOT_COUNT = 800,\r\n    HOT_SPAN = 16;\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\n\r\nvar nativeNow = Date.now;\r\n/**\r\n * Creates a function that'll short out and invoke `identity` instead\r\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\r\n * milliseconds.\r\n *\r\n * @private\r\n * @param {Function} func The function to restrict.\r\n * @returns {Function} Returns the new shortable function.\r\n */\r\n\r\nfunction shortOut(func) {\r\n  var count = 0,\r\n      lastCalled = 0;\r\n  return function () {\r\n    var stamp = nativeNow(),\r\n        remaining = HOT_SPAN - (stamp - lastCalled);\r\n    lastCalled = stamp;\r\n\r\n    if (remaining > 0) {\r\n      if (++count >= HOT_COUNT) {\r\n        return arguments[0];\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n\r\n    return func.apply(undefined, arguments);\r\n  };\r\n}\r\n\r\nmodule.exports = shortOut;\r\n\r\n/***/ }),\r\n/* 151 */\r\n/***/ (function(module, exports, __nested_webpack_require_181077__) {\r\n\r\nvar eq = __nested_webpack_require_181077__(26),\r\n    isArrayLike = __nested_webpack_require_181077__(39),\r\n    isIndex = __nested_webpack_require_181077__(31),\r\n    isObject = __nested_webpack_require_181077__(15);\r\n/**\r\n * Checks if the given arguments are from an iteratee call.\r\n *\r\n * @private\r\n * @param {*} value The potential iteratee value argument.\r\n * @param {*} index The potential iteratee index or key argument.\r\n * @param {*} object The potential iteratee object argument.\r\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\r\n *  else `false`.\r\n */\r\n\r\n\r\nfunction isIterateeCall(value, index, object) {\r\n  if (!isObject(object)) {\r\n    return false;\r\n  }\r\n\r\n  var type = typeof index;\r\n\r\n  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\r\n    return eq(object[index], value);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nmodule.exports = isIterateeCall;\r\n\r\n/***/ }),\r\n/* 152 */\r\n/***/ (function(module, exports) {\r\n\r\n/*\r\n * typedefs.js\r\n * Normalizes browser-specific prefixes and provide some basic polyfills\r\n */\r\nif (typeof window !== 'undefined') {\r\n  if (!window.requestAnimationFrame) {\r\n    window.requestAnimationFrame = function () {\r\n      return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (\r\n      /* function FrameRequestCallback */\r\n      callback) {\r\n        window.setTimeout(callback, 1000 / 60);\r\n      };\r\n    }();\r\n  }\r\n}\r\n\r\nif (typeof Math.imul !== 'function') {\r\n  /* eslint-disable no-bitwise */\r\n  Math.imul = function (a, b) {\r\n    var ah = a >>> 16 & 0xffff;\r\n    var al = a & 0xffff;\r\n    var bh = b >>> 16 & 0xffff;\r\n    var bl = b & 0xffff; // the shift by 0 fixes the sign on the high part\r\n    // the final |0 converts the unsigned value into a signed value\r\n\r\n    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\r\n  };\r\n  /* eslint-enable no-bitwise */\r\n\r\n}\r\n\r\nif (typeof Object.assign !== 'function') {\r\n  Object.assign = function (target) {\r\n    // .length of function is 2\r\n    'use strict';\r\n\r\n    if (target === null) {\r\n      // TypeError if undefined or null\r\n      throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    var to = Object(target);\r\n\r\n    for (var index = 1; index < arguments.length; index++) {\r\n      // eslint-disable-next-line prefer-rest-params\r\n      var nextSource = arguments[index];\r\n\r\n      if (nextSource !== null) {\r\n        // Skip over if undefined or null\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        for (var nextKey in nextSource) {\r\n          // Avoid bugs when hasOwnProperty is shadowed\r\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n            to[nextKey] = nextSource[nextKey];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return to;\r\n  };\r\n}\r\n\r\n/***/ }),\r\n/* 153 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _arrayWithHoles(arr) {\r\n  if (Array.isArray(arr)) return arr;\r\n}\r\n\r\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 154 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _iterableToArrayLimit(arr, i) {\r\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\r\n\r\n  if (_i == null) return;\r\n  var _arr = [];\r\n  var _n = true;\r\n  var _d = false;\r\n\r\n  var _s, _e;\r\n\r\n  try {\r\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\r\n      _arr.push(_s.value);\r\n\r\n      if (i && _arr.length === i) break;\r\n    }\r\n  } catch (err) {\r\n    _d = true;\r\n    _e = err;\r\n  } finally {\r\n    try {\r\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\r\n    } finally {\r\n      if (_d) throw _e;\r\n    }\r\n  }\r\n\r\n  return _arr;\r\n}\r\n\r\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 155 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _nonIterableRest() {\r\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 156 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = clone;\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\nfunction clone(a) {\r\n  var out = new Float32Array(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 157 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = fromValues;\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\nfunction fromValues(x, y) {\r\n  var out = new Float32Array(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 158 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = copy;\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 159 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = set;\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 160 */\r\n/***/ (function(module, exports, __nested_webpack_require_186875__) {\r\n\r\nmodule.exports = equals;\r\n\r\nvar EPSILON = __nested_webpack_require_186875__(62);\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0];\r\n  var a1 = a[1];\r\n  var b0 = b[0];\r\n  var b1 = b[1];\r\n  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n\r\n/***/ }),\r\n/* 161 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = exactEquals;\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/***/ }),\r\n/* 162 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = add;\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 163 */\r\n/***/ (function(module, exports, __nested_webpack_require_188358__) {\r\n\r\nmodule.exports = __nested_webpack_require_188358__(64);\r\n\r\n/***/ }),\r\n/* 164 */\r\n/***/ (function(module, exports, __nested_webpack_require_188484__) {\r\n\r\nmodule.exports = __nested_webpack_require_188484__(65);\r\n\r\n/***/ }),\r\n/* 165 */\r\n/***/ (function(module, exports, __nested_webpack_require_188610__) {\r\n\r\nmodule.exports = __nested_webpack_require_188610__(66);\r\n\r\n/***/ }),\r\n/* 166 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = inverse;\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 167 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = min;\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 168 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = max;\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 169 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = rotate;\r\n/**\r\n * Rotates a vec2 by an angle\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to rotate\r\n * @param {Number} angle the angle of rotation (in radians)\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction rotate(out, a, angle) {\r\n  var c = Math.cos(angle),\r\n      s = Math.sin(angle);\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = x * c - y * s;\r\n  out[1] = x * s + y * c;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 170 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = floor;\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 171 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = ceil;\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 172 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = round;\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 173 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = scale;\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 174 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = scaleAndAdd;\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 175 */\r\n/***/ (function(module, exports, __nested_webpack_require_192332__) {\r\n\r\nmodule.exports = __nested_webpack_require_192332__(67);\r\n\r\n/***/ }),\r\n/* 176 */\r\n/***/ (function(module, exports, __nested_webpack_require_192458__) {\r\n\r\nmodule.exports = __nested_webpack_require_192458__(68);\r\n\r\n/***/ }),\r\n/* 177 */\r\n/***/ (function(module, exports, __nested_webpack_require_192584__) {\r\n\r\nmodule.exports = __nested_webpack_require_192584__(69);\r\n\r\n/***/ }),\r\n/* 178 */\r\n/***/ (function(module, exports, __nested_webpack_require_192710__) {\r\n\r\nmodule.exports = __nested_webpack_require_192710__(70);\r\n\r\n/***/ }),\r\n/* 179 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = negate;\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 180 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = normalize;\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 181 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = dot;\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/***/ }),\r\n/* 182 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = cross;\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 183 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = lerp;\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 184 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = random;\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = Math.random() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 185 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformMat2;\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 186 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformMat2d;\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 187 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformMat3;\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 188 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformMat4;\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 189 */\r\n/***/ (function(module, exports, __nested_webpack_require_197520__) {\r\n\r\nmodule.exports = forEach;\r\n\r\nvar vec = __nested_webpack_require_197520__(63)();\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\n\r\nfunction forEach(a, stride, offset, count, fn, arg) {\r\n  var i, l;\r\n\r\n  if (!stride) {\r\n    stride = 2;\r\n  }\r\n\r\n  if (!offset) {\r\n    offset = 0;\r\n  }\r\n\r\n  if (count) {\r\n    l = Math.min(count * stride + offset, a.length);\r\n  } else {\r\n    l = a.length;\r\n  }\r\n\r\n  for (i = offset; i < l; i += stride) {\r\n    vec[0] = a[i];\r\n    vec[1] = a[i + 1];\r\n    fn(vec, vec, arg);\r\n    a[i] = vec[0];\r\n    a[i + 1] = vec[1];\r\n  }\r\n\r\n  return a;\r\n}\r\n\r\n/***/ }),\r\n/* 190 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = limit;\r\n/**\r\n * Limit the magnitude of this vector to the value used for the `max`\r\n * parameter.\r\n *\r\n * @param  {vec2} the vector to limit\r\n * @param  {Number} max the maximum magnitude for the vector\r\n * @returns {vec2} out\r\n */\r\n\r\nfunction limit(out, a, max) {\r\n  var mSq = a[0] * a[0] + a[1] * a[1];\r\n\r\n  if (mSq > max * max) {\r\n    var n = Math.sqrt(mSq);\r\n    out[0] = a[0] / n * max;\r\n    out[1] = a[1] / n * max;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 191 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = clone;\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\nfunction clone(a) {\r\n  var out = new Float32Array(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 192 */\r\n/***/ (function(module, exports, __nested_webpack_require_199637__) {\r\n\r\nmodule.exports = angle;\r\n\r\nvar fromValues = __nested_webpack_require_199637__(73);\r\n\r\nvar normalize = __nested_webpack_require_199637__(74);\r\n\r\nvar dot = __nested_webpack_require_199637__(75);\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\n\r\n\r\nfunction angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/***/ }),\r\n/* 193 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = copy;\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 194 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = set;\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 195 */\r\n/***/ (function(module, exports, __nested_webpack_require_201108__) {\r\n\r\nmodule.exports = equals;\r\n\r\nvar EPSILON = __nested_webpack_require_201108__(71);\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0];\r\n  var a1 = a[1];\r\n  var a2 = a[2];\r\n  var b0 = b[0];\r\n  var b1 = b[1];\r\n  var b2 = b[2];\r\n  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/***/ }),\r\n/* 196 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = exactEquals;\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/***/ }),\r\n/* 197 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = add;\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 198 */\r\n/***/ (function(module, exports, __nested_webpack_require_202745__) {\r\n\r\nmodule.exports = __nested_webpack_require_202745__(76);\r\n\r\n/***/ }),\r\n/* 199 */\r\n/***/ (function(module, exports, __nested_webpack_require_202871__) {\r\n\r\nmodule.exports = __nested_webpack_require_202871__(77);\r\n\r\n/***/ }),\r\n/* 200 */\r\n/***/ (function(module, exports, __nested_webpack_require_202997__) {\r\n\r\nmodule.exports = __nested_webpack_require_202997__(78);\r\n\r\n/***/ }),\r\n/* 201 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = min;\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 202 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = max;\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 203 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = floor;\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 204 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = ceil;\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 205 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = round;\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 206 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = scale;\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 207 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = scaleAndAdd;\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 208 */\r\n/***/ (function(module, exports, __nested_webpack_require_206076__) {\r\n\r\nmodule.exports = __nested_webpack_require_206076__(79);\r\n\r\n/***/ }),\r\n/* 209 */\r\n/***/ (function(module, exports, __nested_webpack_require_206202__) {\r\n\r\nmodule.exports = __nested_webpack_require_206202__(80);\r\n\r\n/***/ }),\r\n/* 210 */\r\n/***/ (function(module, exports, __nested_webpack_require_206328__) {\r\n\r\nmodule.exports = __nested_webpack_require_206328__(81);\r\n\r\n/***/ }),\r\n/* 211 */\r\n/***/ (function(module, exports, __nested_webpack_require_206454__) {\r\n\r\nmodule.exports = __nested_webpack_require_206454__(82);\r\n\r\n/***/ }),\r\n/* 212 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = negate;\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 213 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = inverse;\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 214 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = cross;\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 215 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = lerp;\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 216 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = random;\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = Math.random() * 2.0 * Math.PI;\r\n  var z = Math.random() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 217 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformMat4;\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 218 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformMat3;\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 219 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transformQuat;\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction transformQuat(out, a, q) {\r\n  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      // calculate quat * vec\r\n  ix = qw * x + qy * z - qz * y,\r\n      iy = qw * y + qz * x - qx * z,\r\n      iz = qw * z + qx * y - qy * x,\r\n      iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\r\n\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 220 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = rotateX;\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction rotateX(out, a, b, c) {\r\n  var by = b[1];\r\n  var bz = b[2]; // Translate point to the origin\r\n\r\n  var py = a[1] - by;\r\n  var pz = a[2] - bz;\r\n  var sc = Math.sin(c);\r\n  var cc = Math.cos(c); // perform rotation and translate to correct position\r\n\r\n  out[0] = a[0];\r\n  out[1] = by + py * cc - pz * sc;\r\n  out[2] = bz + py * sc + pz * cc;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 221 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = rotateY;\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction rotateY(out, a, b, c) {\r\n  var bx = b[0];\r\n  var bz = b[2]; // translate point to the origin\r\n\r\n  var px = a[0] - bx;\r\n  var pz = a[2] - bz;\r\n  var sc = Math.sin(c);\r\n  var cc = Math.cos(c); // perform rotation and translate to correct position\r\n\r\n  out[0] = bx + pz * sc + px * cc;\r\n  out[1] = a[1];\r\n  out[2] = bz + pz * cc - px * sc;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 222 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = rotateZ;\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\n\r\nfunction rotateZ(out, a, b, c) {\r\n  var bx = b[0];\r\n  var by = b[1]; //Translate point to the origin\r\n\r\n  var px = a[0] - bx;\r\n  var py = a[1] - by;\r\n  var sc = Math.sin(c);\r\n  var cc = Math.cos(c); // perform rotation and translate to correct position\r\n\r\n  out[0] = bx + px * cc - py * sc;\r\n  out[1] = by + px * sc + py * cc;\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 223 */\r\n/***/ (function(module, exports, __nested_webpack_require_213349__) {\r\n\r\nmodule.exports = forEach;\r\n\r\nvar vec = __nested_webpack_require_213349__(72)();\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\n\r\nfunction forEach(a, stride, offset, count, fn, arg) {\r\n  var i, l;\r\n\r\n  if (!stride) {\r\n    stride = 3;\r\n  }\r\n\r\n  if (!offset) {\r\n    offset = 0;\r\n  }\r\n\r\n  if (count) {\r\n    l = Math.min(count * stride + offset, a.length);\r\n  } else {\r\n    l = a.length;\r\n  }\r\n\r\n  for (i = offset; i < l; i += stride) {\r\n    vec[0] = a[i];\r\n    vec[1] = a[i + 1];\r\n    vec[2] = a[i + 2];\r\n    fn(vec, vec, arg);\r\n    a[i] = vec[0];\r\n    a[i + 1] = vec[1];\r\n    a[i + 2] = vec[2];\r\n  }\r\n\r\n  return a;\r\n}\r\n\r\n/***/ }),\r\n/* 224 */\r\n/***/ (function(module, exports, __webpack_require__) {\r\n\r\n/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\nvar runtime = function (exports) {\r\n  \"use strict\";\r\n\r\n  var Op = Object.prototype;\r\n  var hasOwn = Op.hasOwnProperty;\r\n  var undefined; // More compressible than void 0.\r\n\r\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\r\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\r\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\r\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\r\n\r\n  function wrap(innerFn, outerFn, self, tryLocsList) {\r\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\r\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\r\n    var generator = Object.create(protoGenerator.prototype);\r\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\r\n    // .throw, and .return methods.\r\n\r\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\r\n    return generator;\r\n  }\r\n\r\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\r\n  // record like context.tryEntries[i].completion. This interface could\r\n  // have been (and was previously) designed to take a closure to be\r\n  // invoked without arguments, but in all the cases we care about we\r\n  // already have an existing method we want to call, so there's no need\r\n  // to create a new function object. We can even get away with assuming\r\n  // the method takes exactly one argument, since that happens to be true\r\n  // in every case, so we don't have to touch the arguments object. The\r\n  // only additional allocation required is the completion record, which\r\n  // has a stable shape and so hopefully should be cheap to allocate.\r\n\r\n  function tryCatch(fn, obj, arg) {\r\n    try {\r\n      return {\r\n        type: \"normal\",\r\n        arg: fn.call(obj, arg)\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        type: \"throw\",\r\n        arg: err\r\n      };\r\n    }\r\n  }\r\n\r\n  var GenStateSuspendedStart = \"suspendedStart\";\r\n  var GenStateSuspendedYield = \"suspendedYield\";\r\n  var GenStateExecuting = \"executing\";\r\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\r\n  // breaking out of the dispatch switch statement.\r\n\r\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\r\n  // .constructor.prototype properties for functions that return Generator\r\n  // objects. For full spec compliance, you may wish to configure your\r\n  // minifier not to mangle the names of these two functions.\r\n\r\n  function Generator() {}\r\n\r\n  function GeneratorFunction() {}\r\n\r\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\r\n  // don't natively support it.\r\n\r\n\r\n  var IteratorPrototype = {};\r\n\r\n  IteratorPrototype[iteratorSymbol] = function () {\r\n    return this;\r\n  };\r\n\r\n  var getProto = Object.getPrototypeOf;\r\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\r\n\r\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\r\n    // This environment has a native %IteratorPrototype%; use it instead\r\n    // of the polyfill.\r\n    IteratorPrototype = NativeIteratorPrototype;\r\n  }\r\n\r\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\r\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\r\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\r\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\r\n  // Iterator interface in terms of a single ._invoke method.\r\n\r\n  function defineIteratorMethods(prototype) {\r\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\r\n      prototype[method] = function (arg) {\r\n        return this._invoke(method, arg);\r\n      };\r\n    });\r\n  }\r\n\r\n  exports.isGeneratorFunction = function (genFun) {\r\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\r\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\r\n    // do is to check its .name property.\r\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\r\n  };\r\n\r\n  exports.mark = function (genFun) {\r\n    if (Object.setPrototypeOf) {\r\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\r\n    } else {\r\n      genFun.__proto__ = GeneratorFunctionPrototype;\r\n\r\n      if (!(toStringTagSymbol in genFun)) {\r\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\r\n      }\r\n    }\r\n\r\n    genFun.prototype = Object.create(Gp);\r\n    return genFun;\r\n  }; // Within the body of any async function, `await x` is transformed to\r\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\r\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\r\n  // meant to be awaited.\r\n\r\n\r\n  exports.awrap = function (arg) {\r\n    return {\r\n      __await: arg\r\n    };\r\n  };\r\n\r\n  function AsyncIterator(generator, PromiseImpl) {\r\n    function invoke(method, arg, resolve, reject) {\r\n      var record = tryCatch(generator[method], generator, arg);\r\n\r\n      if (record.type === \"throw\") {\r\n        reject(record.arg);\r\n      } else {\r\n        var result = record.arg;\r\n        var value = result.value;\r\n\r\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\r\n          return PromiseImpl.resolve(value.__await).then(function (value) {\r\n            invoke(\"next\", value, resolve, reject);\r\n          }, function (err) {\r\n            invoke(\"throw\", err, resolve, reject);\r\n          });\r\n        }\r\n\r\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\r\n          // When a yielded Promise is resolved, its final value becomes\r\n          // the .value of the Promise<{value,done}> result for the\r\n          // current iteration.\r\n          result.value = unwrapped;\r\n          resolve(result);\r\n        }, function (error) {\r\n          // If a rejected Promise was yielded, throw the rejection back\r\n          // into the async generator function so it can be handled there.\r\n          return invoke(\"throw\", error, resolve, reject);\r\n        });\r\n      }\r\n    }\r\n\r\n    var previousPromise;\r\n\r\n    function enqueue(method, arg) {\r\n      function callInvokeWithMethodAndArg() {\r\n        return new PromiseImpl(function (resolve, reject) {\r\n          invoke(method, arg, resolve, reject);\r\n        });\r\n      }\r\n\r\n      return previousPromise = // If enqueue has been called before, then we want to wait until\r\n      // all previous Promises have been resolved before calling invoke,\r\n      // so that results are always delivered in the correct order. If\r\n      // enqueue has not been called before, then it is important to\r\n      // call invoke immediately, without waiting on a callback to fire,\r\n      // so that the async generator function has the opportunity to do\r\n      // any necessary setup in a predictable way. This predictability\r\n      // is why the Promise constructor synchronously invokes its\r\n      // executor callback, and why async functions synchronously\r\n      // execute code before the first await. Since we implement simple\r\n      // async functions in terms of async generators, it is especially\r\n      // important to get this right, even though it requires care.\r\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\r\n      // invocations of the iterator.\r\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\r\n    } // Define the unified helper method that is used to implement .next,\r\n    // .throw, and .return (see defineIteratorMethods).\r\n\r\n\r\n    this._invoke = enqueue;\r\n  }\r\n\r\n  defineIteratorMethods(AsyncIterator.prototype);\r\n\r\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\r\n    return this;\r\n  };\r\n\r\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\r\n  // AsyncIterator objects; they just return a Promise for the value of\r\n  // the final result produced by the iterator.\r\n\r\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\r\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\r\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\r\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\r\n    : iter.next().then(function (result) {\r\n      return result.done ? result.value : iter.next();\r\n    });\r\n  };\r\n\r\n  function makeInvokeMethod(innerFn, self, context) {\r\n    var state = GenStateSuspendedStart;\r\n    return function invoke(method, arg) {\r\n      if (state === GenStateExecuting) {\r\n        throw new Error(\"Generator is already running\");\r\n      }\r\n\r\n      if (state === GenStateCompleted) {\r\n        if (method === \"throw\") {\r\n          throw arg;\r\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\r\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\r\n\r\n\r\n        return doneResult();\r\n      }\r\n\r\n      context.method = method;\r\n      context.arg = arg;\r\n\r\n      while (true) {\r\n        var delegate = context.delegate;\r\n\r\n        if (delegate) {\r\n          var delegateResult = maybeInvokeDelegate(delegate, context);\r\n\r\n          if (delegateResult) {\r\n            if (delegateResult === ContinueSentinel) continue;\r\n            return delegateResult;\r\n          }\r\n        }\r\n\r\n        if (context.method === \"next\") {\r\n          // Setting context._sent for legacy support of Babel's\r\n          // function.sent implementation.\r\n          context.sent = context._sent = context.arg;\r\n        } else if (context.method === \"throw\") {\r\n          if (state === GenStateSuspendedStart) {\r\n            state = GenStateCompleted;\r\n            throw context.arg;\r\n          }\r\n\r\n          context.dispatchException(context.arg);\r\n        } else if (context.method === \"return\") {\r\n          context.abrupt(\"return\", context.arg);\r\n        }\r\n\r\n        state = GenStateExecuting;\r\n        var record = tryCatch(innerFn, self, context);\r\n\r\n        if (record.type === \"normal\") {\r\n          // If an exception is thrown from innerFn, we leave state ===\r\n          // GenStateExecuting and loop back for another invocation.\r\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\r\n\r\n          if (record.arg === ContinueSentinel) {\r\n            continue;\r\n          }\r\n\r\n          return {\r\n            value: record.arg,\r\n            done: context.done\r\n          };\r\n        } else if (record.type === \"throw\") {\r\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\r\n          // context.dispatchException(context.arg) call above.\r\n\r\n          context.method = \"throw\";\r\n          context.arg = record.arg;\r\n        }\r\n      }\r\n    };\r\n  } // Call delegate.iterator[context.method](context.arg) and handle the\r\n  // result, either by returning a { value, done } result from the\r\n  // delegate iterator, or by modifying context.method and context.arg,\r\n  // setting context.delegate to null, and returning the ContinueSentinel.\r\n\r\n\r\n  function maybeInvokeDelegate(delegate, context) {\r\n    var method = delegate.iterator[context.method];\r\n\r\n    if (method === undefined) {\r\n      // A .throw or .return when the delegate iterator has no .throw\r\n      // method always terminates the yield* loop.\r\n      context.delegate = null;\r\n\r\n      if (context.method === \"throw\") {\r\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\r\n        if (delegate.iterator[\"return\"]) {\r\n          // If the delegate iterator has a return method, give it a\r\n          // chance to clean up.\r\n          context.method = \"return\";\r\n          context.arg = undefined;\r\n          maybeInvokeDelegate(delegate, context);\r\n\r\n          if (context.method === \"throw\") {\r\n            // If maybeInvokeDelegate(context) changed context.method from\r\n            // \"return\" to \"throw\", let that override the TypeError below.\r\n            return ContinueSentinel;\r\n          }\r\n        }\r\n\r\n        context.method = \"throw\";\r\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var record = tryCatch(method, delegate.iterator, context.arg);\r\n\r\n    if (record.type === \"throw\") {\r\n      context.method = \"throw\";\r\n      context.arg = record.arg;\r\n      context.delegate = null;\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    var info = record.arg;\r\n\r\n    if (!info) {\r\n      context.method = \"throw\";\r\n      context.arg = new TypeError(\"iterator result is not an object\");\r\n      context.delegate = null;\r\n      return ContinueSentinel;\r\n    }\r\n\r\n    if (info.done) {\r\n      // Assign the result of the finished delegate to the temporary\r\n      // variable specified by delegate.resultName (see delegateYield).\r\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\r\n\r\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\r\n      // exception, let the outer generator proceed normally. If\r\n      // context.method was \"next\", forget context.arg since it has been\r\n      // \"consumed\" by the delegate iterator. If context.method was\r\n      // \"return\", allow the original .return call to continue in the\r\n      // outer generator.\r\n\r\n      if (context.method !== \"return\") {\r\n        context.method = \"next\";\r\n        context.arg = undefined;\r\n      }\r\n    } else {\r\n      // Re-yield the result returned by the delegate method.\r\n      return info;\r\n    } // The delegate iterator is finished, so forget it and continue with\r\n    // the outer generator.\r\n\r\n\r\n    context.delegate = null;\r\n    return ContinueSentinel;\r\n  } // Define Generator.prototype.{next,throw,return} in terms of the\r\n  // unified ._invoke helper method.\r\n\r\n\r\n  defineIteratorMethods(Gp);\r\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\r\n  // @@iterator function is called on it. Some browsers' implementations of the\r\n  // iterator prototype chain incorrectly implement this, causing the Generator\r\n  // object to not be returned from this call. This ensures that doesn't happen.\r\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\r\n\r\n  Gp[iteratorSymbol] = function () {\r\n    return this;\r\n  };\r\n\r\n  Gp.toString = function () {\r\n    return \"[object Generator]\";\r\n  };\r\n\r\n  function pushTryEntry(locs) {\r\n    var entry = {\r\n      tryLoc: locs[0]\r\n    };\r\n\r\n    if (1 in locs) {\r\n      entry.catchLoc = locs[1];\r\n    }\r\n\r\n    if (2 in locs) {\r\n      entry.finallyLoc = locs[2];\r\n      entry.afterLoc = locs[3];\r\n    }\r\n\r\n    this.tryEntries.push(entry);\r\n  }\r\n\r\n  function resetTryEntry(entry) {\r\n    var record = entry.completion || {};\r\n    record.type = \"normal\";\r\n    delete record.arg;\r\n    entry.completion = record;\r\n  }\r\n\r\n  function Context(tryLocsList) {\r\n    // The root entry object (effectively a try statement without a catch\r\n    // or a finally block) gives us a place to store values thrown from\r\n    // locations where there is no enclosing try statement.\r\n    this.tryEntries = [{\r\n      tryLoc: \"root\"\r\n    }];\r\n    tryLocsList.forEach(pushTryEntry, this);\r\n    this.reset(true);\r\n  }\r\n\r\n  exports.keys = function (object) {\r\n    var keys = [];\r\n\r\n    for (var key in object) {\r\n      keys.push(key);\r\n    }\r\n\r\n    keys.reverse(); // Rather than returning an object with a next method, we keep\r\n    // things simple and return the next function itself.\r\n\r\n    return function next() {\r\n      while (keys.length) {\r\n        var key = keys.pop();\r\n\r\n        if (key in object) {\r\n          next.value = key;\r\n          next.done = false;\r\n          return next;\r\n        }\r\n      } // To avoid creating an additional object, we just hang the .value\r\n      // and .done properties off the next function object itself. This\r\n      // also ensures that the minifier will not anonymize the function.\r\n\r\n\r\n      next.done = true;\r\n      return next;\r\n    };\r\n  };\r\n\r\n  function values(iterable) {\r\n    if (iterable) {\r\n      var iteratorMethod = iterable[iteratorSymbol];\r\n\r\n      if (iteratorMethod) {\r\n        return iteratorMethod.call(iterable);\r\n      }\r\n\r\n      if (typeof iterable.next === \"function\") {\r\n        return iterable;\r\n      }\r\n\r\n      if (!isNaN(iterable.length)) {\r\n        var i = -1,\r\n            next = function next() {\r\n          while (++i < iterable.length) {\r\n            if (hasOwn.call(iterable, i)) {\r\n              next.value = iterable[i];\r\n              next.done = false;\r\n              return next;\r\n            }\r\n          }\r\n\r\n          next.value = undefined;\r\n          next.done = true;\r\n          return next;\r\n        };\r\n\r\n        return next.next = next;\r\n      }\r\n    } // Return an iterator with no values.\r\n\r\n\r\n    return {\r\n      next: doneResult\r\n    };\r\n  }\r\n\r\n  exports.values = values;\r\n\r\n  function doneResult() {\r\n    return {\r\n      value: undefined,\r\n      done: true\r\n    };\r\n  }\r\n\r\n  Context.prototype = {\r\n    constructor: Context,\r\n    reset: function (skipTempReset) {\r\n      this.prev = 0;\r\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\r\n      // function.sent implementation.\r\n\r\n      this.sent = this._sent = undefined;\r\n      this.done = false;\r\n      this.delegate = null;\r\n      this.method = \"next\";\r\n      this.arg = undefined;\r\n      this.tryEntries.forEach(resetTryEntry);\r\n\r\n      if (!skipTempReset) {\r\n        for (var name in this) {\r\n          // Not sure about the optimal order of these conditions:\r\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\r\n            this[name] = undefined;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    stop: function () {\r\n      this.done = true;\r\n      var rootEntry = this.tryEntries[0];\r\n      var rootRecord = rootEntry.completion;\r\n\r\n      if (rootRecord.type === \"throw\") {\r\n        throw rootRecord.arg;\r\n      }\r\n\r\n      return this.rval;\r\n    },\r\n    dispatchException: function (exception) {\r\n      if (this.done) {\r\n        throw exception;\r\n      }\r\n\r\n      var context = this;\r\n\r\n      function handle(loc, caught) {\r\n        record.type = \"throw\";\r\n        record.arg = exception;\r\n        context.next = loc;\r\n\r\n        if (caught) {\r\n          // If the dispatched exception was caught by a catch block,\r\n          // then let that catch block handle the exception normally.\r\n          context.method = \"next\";\r\n          context.arg = undefined;\r\n        }\r\n\r\n        return !!caught;\r\n      }\r\n\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n        var record = entry.completion;\r\n\r\n        if (entry.tryLoc === \"root\") {\r\n          // Exception thrown outside of any try block that could handle\r\n          // it, so set the completion value of the entire function to\r\n          // throw the exception.\r\n          return handle(\"end\");\r\n        }\r\n\r\n        if (entry.tryLoc <= this.prev) {\r\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\r\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\r\n\r\n          if (hasCatch && hasFinally) {\r\n            if (this.prev < entry.catchLoc) {\r\n              return handle(entry.catchLoc, true);\r\n            } else if (this.prev < entry.finallyLoc) {\r\n              return handle(entry.finallyLoc);\r\n            }\r\n          } else if (hasCatch) {\r\n            if (this.prev < entry.catchLoc) {\r\n              return handle(entry.catchLoc, true);\r\n            }\r\n          } else if (hasFinally) {\r\n            if (this.prev < entry.finallyLoc) {\r\n              return handle(entry.finallyLoc);\r\n            }\r\n          } else {\r\n            throw new Error(\"try statement without catch or finally\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n    abrupt: function (type, arg) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n\r\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\r\n          var finallyEntry = entry;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\r\n        // Ignore the finally entry if control is not jumping to a\r\n        // location outside the try/catch block.\r\n        finallyEntry = null;\r\n      }\r\n\r\n      var record = finallyEntry ? finallyEntry.completion : {};\r\n      record.type = type;\r\n      record.arg = arg;\r\n\r\n      if (finallyEntry) {\r\n        this.method = \"next\";\r\n        this.next = finallyEntry.finallyLoc;\r\n        return ContinueSentinel;\r\n      }\r\n\r\n      return this.complete(record);\r\n    },\r\n    complete: function (record, afterLoc) {\r\n      if (record.type === \"throw\") {\r\n        throw record.arg;\r\n      }\r\n\r\n      if (record.type === \"break\" || record.type === \"continue\") {\r\n        this.next = record.arg;\r\n      } else if (record.type === \"return\") {\r\n        this.rval = this.arg = record.arg;\r\n        this.method = \"return\";\r\n        this.next = \"end\";\r\n      } else if (record.type === \"normal\" && afterLoc) {\r\n        this.next = afterLoc;\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    },\r\n    finish: function (finallyLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n\r\n        if (entry.finallyLoc === finallyLoc) {\r\n          this.complete(entry.completion, entry.afterLoc);\r\n          resetTryEntry(entry);\r\n          return ContinueSentinel;\r\n        }\r\n      }\r\n    },\r\n    \"catch\": function (tryLoc) {\r\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\r\n        var entry = this.tryEntries[i];\r\n\r\n        if (entry.tryLoc === tryLoc) {\r\n          var record = entry.completion;\r\n\r\n          if (record.type === \"throw\") {\r\n            var thrown = record.arg;\r\n            resetTryEntry(entry);\r\n          }\r\n\r\n          return thrown;\r\n        }\r\n      } // The context.catch method must only be called with a location\r\n      // argument that corresponds to a known catch block.\r\n\r\n\r\n      throw new Error(\"illegal catch attempt\");\r\n    },\r\n    delegateYield: function (iterable, resultName, nextLoc) {\r\n      this.delegate = {\r\n        iterator: values(iterable),\r\n        resultName: resultName,\r\n        nextLoc: nextLoc\r\n      };\r\n\r\n      if (this.method === \"next\") {\r\n        // Deliberately forget the last sent value so that we don't\r\n        // accidentally pass it on to the delegate.\r\n        this.arg = undefined;\r\n      }\r\n\r\n      return ContinueSentinel;\r\n    }\r\n  }; // Regardless of whether this script is executing as a CommonJS module\r\n  // or not, return the runtime object so that we can declare the variable\r\n  // regeneratorRuntime in the outer scope, which allows this module to be\r\n  // injected easily by `bin/regenerator --include-runtime script.js`.\r\n\r\n  return exports;\r\n}( // If this script is executing as a CommonJS module, use module.exports\r\n// as the regeneratorRuntime namespace. Otherwise create a new empty\r\n// object. Either way, the resulting object will be used to initialize\r\n// the regeneratorRuntime variable at the top of this file.\r\n  true ? module.exports : 0);\r\n\r\ntry {\r\n  regeneratorRuntime = runtime;\r\n} catch (accidentalStrictMode) {\r\n  // This module should not be running in strict mode, so the above\r\n  // assignment should always work unless something is misconfigured. Just\r\n  // in case runtime.js accidentally runs in strict mode, we can escape\r\n  // strict mode using a global Function call. This could conceivably fail\r\n  // if a Content Security Policy forbids using Function, but in that case\r\n  // the proper solution is to fix the accidental strict mode problem. If\r\n  // you've misconfigured your bundler to force strict mode and applied a\r\n  // CSP to forbid Function, and you're not willing to fix either of those\r\n  // problems, please detail your unique predicament in a GitHub issue.\r\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\r\n}\r\n\r\n/***/ }),\r\n/* 225 */\r\n/***/ (function(module, exports, __nested_webpack_require_239255__) {\r\n\r\nvar getPrototypeOf = __nested_webpack_require_239255__(2);\r\n\r\nfunction _superPropBase(object, property) {\r\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\r\n    object = getPrototypeOf(object);\r\n    if (object === null) break;\r\n  }\r\n\r\n  return object;\r\n}\r\n\r\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 226 */\r\n/***/ (function(module, exports, __nested_webpack_require_239713__) {\r\n\r\nvar arrayLikeToArray = __nested_webpack_require_239713__(61);\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\r\n}\r\n\r\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 227 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _iterableToArray(iter) {\r\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\r\n}\r\n\r\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 228 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _nonIterableSpread() {\r\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n}\r\n\r\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 229 */\r\n/***/ (function(module, exports, __nested_webpack_require_240779__) {\r\n\r\nvar basePickBy = __nested_webpack_require_240779__(230),\r\n    hasIn = __nested_webpack_require_240779__(240);\r\n/**\r\n * The base implementation of `_.pick` without support for individual\r\n * property identifiers.\r\n *\r\n * @private\r\n * @param {Object} object The source object.\r\n * @param {string[]} paths The property paths to pick.\r\n * @returns {Object} Returns the new object.\r\n */\r\n\r\n\r\nfunction basePick(object, paths) {\r\n  return basePickBy(object, paths, function (value, path) {\r\n    return hasIn(object, path);\r\n  });\r\n}\r\n\r\nmodule.exports = basePick;\r\n\r\n/***/ }),\r\n/* 230 */\r\n/***/ (function(module, exports, __nested_webpack_require_241391__) {\r\n\r\nvar baseGet = __nested_webpack_require_241391__(231),\r\n    baseSet = __nested_webpack_require_241391__(239),\r\n    castPath = __nested_webpack_require_241391__(32);\r\n/**\r\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Object} object The source object.\r\n * @param {string[]} paths The property paths to pick.\r\n * @param {Function} predicate The function invoked per property.\r\n * @returns {Object} Returns the new object.\r\n */\r\n\r\n\r\nfunction basePickBy(object, paths, predicate) {\r\n  var index = -1,\r\n      length = paths.length,\r\n      result = {};\r\n\r\n  while (++index < length) {\r\n    var path = paths[index],\r\n        value = baseGet(object, path);\r\n\r\n    if (predicate(value, path)) {\r\n      baseSet(result, castPath(path, object), value);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = basePickBy;\r\n\r\n/***/ }),\r\n/* 231 */\r\n/***/ (function(module, exports, __nested_webpack_require_242306__) {\r\n\r\nvar castPath = __nested_webpack_require_242306__(32),\r\n    toKey = __nested_webpack_require_242306__(43);\r\n/**\r\n * The base implementation of `_.get` without support for default values.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Array|string} path The path of the property to get.\r\n * @returns {*} Returns the resolved value.\r\n */\r\n\r\n\r\nfunction baseGet(object, path) {\r\n  path = castPath(path, object);\r\n  var index = 0,\r\n      length = path.length;\r\n\r\n  while (object != null && index < length) {\r\n    object = object[toKey(path[index++])];\r\n  }\r\n\r\n  return index && index == length ? object : undefined;\r\n}\r\n\r\nmodule.exports = baseGet;\r\n\r\n/***/ }),\r\n/* 232 */\r\n/***/ (function(module, exports, __nested_webpack_require_243034__) {\r\n\r\nvar isArray = __nested_webpack_require_243034__(16),\r\n    isSymbol = __nested_webpack_require_243034__(42);\r\n/** Used to match property names within property paths. */\r\n\r\n\r\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\r\n    reIsPlainProp = /^\\w*$/;\r\n/**\r\n * Checks if `value` is a property name and not a property path.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {Object} [object] The object to query keys on.\r\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\r\n */\r\n\r\nfunction isKey(value, object) {\r\n  if (isArray(value)) {\r\n    return false;\r\n  }\r\n\r\n  var type = typeof value;\r\n\r\n  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\r\n    return true;\r\n  }\r\n\r\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\r\n}\r\n\r\nmodule.exports = isKey;\r\n\r\n/***/ }),\r\n/* 233 */\r\n/***/ (function(module, exports, __nested_webpack_require_244025__) {\r\n\r\nvar memoizeCapped = __nested_webpack_require_244025__(234);\r\n/** Used to match property names within property paths. */\r\n\r\n\r\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\n/** Used to match backslashes in property paths. */\r\n\r\nvar reEscapeChar = /\\\\(\\\\)?/g;\r\n/**\r\n * Converts `string` to a property path array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the property path array.\r\n */\r\n\r\nvar stringToPath = memoizeCapped(function (string) {\r\n  var result = [];\r\n\r\n  if (string.charCodeAt(0) === 46\r\n  /* . */\r\n  ) {\r\n    result.push('');\r\n  }\r\n\r\n  string.replace(rePropName, function (match, number, quote, subString) {\r\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\r\n  });\r\n  return result;\r\n});\r\nmodule.exports = stringToPath;\r\n\r\n/***/ }),\r\n/* 234 */\r\n/***/ (function(module, exports, __nested_webpack_require_244983__) {\r\n\r\nvar memoize = __nested_webpack_require_244983__(235);\r\n/** Used as the maximum memoize cache size. */\r\n\r\n\r\nvar MAX_MEMOIZE_SIZE = 500;\r\n/**\r\n * A specialized version of `_.memoize` which clears the memoized function's\r\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\r\n *\r\n * @private\r\n * @param {Function} func The function to have its output memoized.\r\n * @returns {Function} Returns the new memoized function.\r\n */\r\n\r\nfunction memoizeCapped(func) {\r\n  var result = memoize(func, function (key) {\r\n    if (cache.size === MAX_MEMOIZE_SIZE) {\r\n      cache.clear();\r\n    }\r\n\r\n    return key;\r\n  });\r\n  var cache = result.cache;\r\n  return result;\r\n}\r\n\r\nmodule.exports = memoizeCapped;\r\n\r\n/***/ }),\r\n/* 235 */\r\n/***/ (function(module, exports, __nested_webpack_require_245732__) {\r\n\r\nvar MapCache = __nested_webpack_require_245732__(47);\r\n/** Error message constants. */\r\n\r\n\r\nvar FUNC_ERROR_TEXT = 'Expected a function';\r\n/**\r\n * Creates a function that memoizes the result of `func`. If `resolver` is\r\n * provided, it determines the cache key for storing the result based on the\r\n * arguments provided to the memoized function. By default, the first argument\r\n * provided to the memoized function is used as the map cache key. The `func`\r\n * is invoked with the `this` binding of the memoized function.\r\n *\r\n * **Note:** The cache is exposed as the `cache` property on the memoized\r\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\r\n * constructor with one whose instances implement the\r\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\r\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Function\r\n * @param {Function} func The function to have its output memoized.\r\n * @param {Function} [resolver] The function to resolve the cache key.\r\n * @returns {Function} Returns the new memoized function.\r\n * @example\r\n *\r\n * var object = { 'a': 1, 'b': 2 };\r\n * var other = { 'c': 3, 'd': 4 };\r\n *\r\n * var values = _.memoize(_.values);\r\n * values(object);\r\n * // => [1, 2]\r\n *\r\n * values(other);\r\n * // => [3, 4]\r\n *\r\n * object.a = 2;\r\n * values(object);\r\n * // => [1, 2]\r\n *\r\n * // Modify the result cache.\r\n * values.cache.set(object, ['a', 'b']);\r\n * values(object);\r\n * // => ['a', 'b']\r\n *\r\n * // Replace `_.memoize.Cache`.\r\n * _.memoize.Cache = WeakMap;\r\n */\r\n\r\nfunction memoize(func, resolver) {\r\n  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n\r\n  var memoized = function () {\r\n    var args = arguments,\r\n        key = resolver ? resolver.apply(this, args) : args[0],\r\n        cache = memoized.cache;\r\n\r\n    if (cache.has(key)) {\r\n      return cache.get(key);\r\n    }\r\n\r\n    var result = func.apply(this, args);\r\n    memoized.cache = cache.set(key, result) || cache;\r\n    return result;\r\n  };\r\n\r\n  memoized.cache = new (memoize.Cache || MapCache)();\r\n  return memoized;\r\n} // Expose `MapCache`.\r\n\r\n\r\nmemoize.Cache = MapCache;\r\nmodule.exports = memoize;\r\n\r\n/***/ }),\r\n/* 236 */\r\n/***/ (function(module, exports, __nested_webpack_require_248121__) {\r\n\r\nvar baseToString = __nested_webpack_require_248121__(237);\r\n/**\r\n * Converts `value` to a string. An empty string is returned for `null`\r\n * and `undefined` values. The sign of `-0` is preserved.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n * @example\r\n *\r\n * _.toString(null);\r\n * // => ''\r\n *\r\n * _.toString(-0);\r\n * // => '-0'\r\n *\r\n * _.toString([1, 2, 3]);\r\n * // => '1,2,3'\r\n */\r\n\r\n\r\nfunction toString(value) {\r\n  return value == null ? '' : baseToString(value);\r\n}\r\n\r\nmodule.exports = toString;\r\n\r\n/***/ }),\r\n/* 237 */\r\n/***/ (function(module, exports, __nested_webpack_require_248812__) {\r\n\r\nvar Symbol = __nested_webpack_require_248812__(27),\r\n    arrayMap = __nested_webpack_require_248812__(238),\r\n    isArray = __nested_webpack_require_248812__(16),\r\n    isSymbol = __nested_webpack_require_248812__(42);\r\n/** Used as references for various `Number` constants. */\r\n\r\n\r\nvar INFINITY = 1 / 0;\r\n/** Used to convert symbols to primitives and strings. */\r\n\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n/**\r\n * The base implementation of `_.toString` which doesn't convert nullish\r\n * values to empty strings.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\r\n\r\nfunction baseToString(value) {\r\n  // Exit early for strings to avoid a performance hit in some environments.\r\n  if (typeof value == 'string') {\r\n    return value;\r\n  }\r\n\r\n  if (isArray(value)) {\r\n    // Recursively convert values (susceptible to call stack limits).\r\n    return arrayMap(value, baseToString) + '';\r\n  }\r\n\r\n  if (isSymbol(value)) {\r\n    return symbolToString ? symbolToString.call(value) : '';\r\n  }\r\n\r\n  var result = value + '';\r\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\r\n}\r\n\r\nmodule.exports = baseToString;\r\n\r\n/***/ }),\r\n/* 238 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * A specialized version of `_.map` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the new mapped array.\r\n */\r\nfunction arrayMap(array, iteratee) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      result = Array(length);\r\n\r\n  while (++index < length) {\r\n    result[index] = iteratee(array[index], index, array);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = arrayMap;\r\n\r\n/***/ }),\r\n/* 239 */\r\n/***/ (function(module, exports, __nested_webpack_require_250739__) {\r\n\r\nvar assignValue = __nested_webpack_require_250739__(55),\r\n    castPath = __nested_webpack_require_250739__(32),\r\n    isIndex = __nested_webpack_require_250739__(31),\r\n    isObject = __nested_webpack_require_250739__(15),\r\n    toKey = __nested_webpack_require_250739__(43);\r\n/**\r\n * The base implementation of `_.set`.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {Array|string} path The path of the property to set.\r\n * @param {*} value The value to set.\r\n * @param {Function} [customizer] The function to customize path creation.\r\n * @returns {Object} Returns `object`.\r\n */\r\n\r\n\r\nfunction baseSet(object, path, value, customizer) {\r\n  if (!isObject(object)) {\r\n    return object;\r\n  }\r\n\r\n  path = castPath(path, object);\r\n  var index = -1,\r\n      length = path.length,\r\n      lastIndex = length - 1,\r\n      nested = object;\r\n\r\n  while (nested != null && ++index < length) {\r\n    var key = toKey(path[index]),\r\n        newValue = value;\r\n\r\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\r\n      return object;\r\n    }\r\n\r\n    if (index != lastIndex) {\r\n      var objValue = nested[key];\r\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\r\n\r\n      if (newValue === undefined) {\r\n        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\r\n      }\r\n    }\r\n\r\n    assignValue(nested, key, newValue);\r\n    nested = nested[key];\r\n  }\r\n\r\n  return object;\r\n}\r\n\r\nmodule.exports = baseSet;\r\n\r\n/***/ }),\r\n/* 240 */\r\n/***/ (function(module, exports, __nested_webpack_require_252249__) {\r\n\r\nvar baseHasIn = __nested_webpack_require_252249__(241),\r\n    hasPath = __nested_webpack_require_252249__(242);\r\n/**\r\n * Checks if `path` is a direct or inherited property of `object`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @param {Array|string} path The path to check.\r\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n * @example\r\n *\r\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\r\n *\r\n * _.hasIn(object, 'a');\r\n * // => true\r\n *\r\n * _.hasIn(object, 'a.b');\r\n * // => true\r\n *\r\n * _.hasIn(object, ['a', 'b']);\r\n * // => true\r\n *\r\n * _.hasIn(object, 'b');\r\n * // => false\r\n */\r\n\r\n\r\nfunction hasIn(object, path) {\r\n  return object != null && hasPath(object, path, baseHasIn);\r\n}\r\n\r\nmodule.exports = hasIn;\r\n\r\n/***/ }),\r\n/* 241 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * The base implementation of `_.hasIn` without support for deep paths.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {Array|string} key The key to check.\r\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\r\n */\r\nfunction baseHasIn(object, key) {\r\n  return object != null && key in Object(object);\r\n}\r\n\r\nmodule.exports = baseHasIn;\r\n\r\n/***/ }),\r\n/* 242 */\r\n/***/ (function(module, exports, __nested_webpack_require_253574__) {\r\n\r\nvar castPath = __nested_webpack_require_253574__(32),\r\n    isArguments = __nested_webpack_require_253574__(30),\r\n    isArray = __nested_webpack_require_253574__(16),\r\n    isIndex = __nested_webpack_require_253574__(31),\r\n    isLength = __nested_webpack_require_253574__(40),\r\n    toKey = __nested_webpack_require_253574__(43);\r\n/**\r\n * Checks if `path` exists on `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Array|string} path The path to check.\r\n * @param {Function} hasFunc The function to check properties.\r\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n */\r\n\r\n\r\nfunction hasPath(object, path, hasFunc) {\r\n  path = castPath(path, object);\r\n  var index = -1,\r\n      length = path.length,\r\n      result = false;\r\n\r\n  while (++index < length) {\r\n    var key = toKey(path[index]);\r\n\r\n    if (!(result = object != null && hasFunc(object, key))) {\r\n      break;\r\n    }\r\n\r\n    object = object[key];\r\n  }\r\n\r\n  if (result || ++index != length) {\r\n    return result;\r\n  }\r\n\r\n  length = object == null ? 0 : object.length;\r\n  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\r\n}\r\n\r\nmodule.exports = hasPath;\r\n\r\n/***/ }),\r\n/* 243 */\r\n/***/ (function(module, exports, __nested_webpack_require_254795__) {\r\n\r\nvar flatten = __nested_webpack_require_254795__(244),\r\n    overRest = __nested_webpack_require_254795__(58),\r\n    setToString = __nested_webpack_require_254795__(59);\r\n/**\r\n * A specialized version of `baseRest` which flattens the rest array.\r\n *\r\n * @private\r\n * @param {Function} func The function to apply a rest parameter to.\r\n * @returns {Function} Returns the new function.\r\n */\r\n\r\n\r\nfunction flatRest(func) {\r\n  return setToString(overRest(func, undefined, flatten), func + '');\r\n}\r\n\r\nmodule.exports = flatRest;\r\n\r\n/***/ }),\r\n/* 244 */\r\n/***/ (function(module, exports, __nested_webpack_require_255356__) {\r\n\r\nvar baseFlatten = __nested_webpack_require_255356__(245);\r\n/**\r\n * Flattens `array` a single level deep.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Array\r\n * @param {Array} array The array to flatten.\r\n * @returns {Array} Returns the new flattened array.\r\n * @example\r\n *\r\n * _.flatten([1, [2, [3, [4]], 5]]);\r\n * // => [1, 2, [3, [4]], 5]\r\n */\r\n\r\n\r\nfunction flatten(array) {\r\n  var length = array == null ? 0 : array.length;\r\n  return length ? baseFlatten(array, 1) : [];\r\n}\r\n\r\nmodule.exports = flatten;\r\n\r\n/***/ }),\r\n/* 245 */\r\n/***/ (function(module, exports, __nested_webpack_require_255951__) {\r\n\r\nvar arrayPush = __nested_webpack_require_255951__(246),\r\n    isFlattenable = __nested_webpack_require_255951__(247);\r\n/**\r\n * The base implementation of `_.flatten` with support for restricting flattening.\r\n *\r\n * @private\r\n * @param {Array} array The array to flatten.\r\n * @param {number} depth The maximum recursion depth.\r\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\r\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\r\n * @param {Array} [result=[]] The initial result value.\r\n * @returns {Array} Returns the new flattened array.\r\n */\r\n\r\n\r\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\r\n  var index = -1,\r\n      length = array.length;\r\n  predicate || (predicate = isFlattenable);\r\n  result || (result = []);\r\n\r\n  while (++index < length) {\r\n    var value = array[index];\r\n\r\n    if (depth > 0 && predicate(value)) {\r\n      if (depth > 1) {\r\n        // Recursively flatten arrays (susceptible to call stack limits).\r\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\r\n      } else {\r\n        arrayPush(result, value);\r\n      }\r\n    } else if (!isStrict) {\r\n      result[result.length] = value;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseFlatten;\r\n\r\n/***/ }),\r\n/* 246 */\r\n/***/ (function(module, exports) {\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nmodule.exports = arrayPush;\r\n\r\n/***/ }),\r\n/* 247 */\r\n/***/ (function(module, exports, __nested_webpack_require_257796__) {\r\n\r\nvar Symbol = __nested_webpack_require_257796__(27),\r\n    isArguments = __nested_webpack_require_257796__(30),\r\n    isArray = __nested_webpack_require_257796__(16);\r\n/** Built-in value references. */\r\n\r\n\r\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\r\n/**\r\n * Checks if `value` is a flattenable `arguments` object or array.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\r\n */\r\n\r\nfunction isFlattenable(value) {\r\n  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\r\n}\r\n\r\nmodule.exports = isFlattenable;\r\n\r\n/***/ }),\r\n/* 248 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _isNativeFunction(fn) {\r\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\r\n}\r\n\r\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 249 */\r\n/***/ (function(module, exports, __nested_webpack_require_258795__) {\r\n\r\nvar setPrototypeOf = __nested_webpack_require_258795__(41);\r\n\r\nvar isNativeReflectConstruct = __nested_webpack_require_258795__(250);\r\n\r\nfunction _construct(Parent, args, Class) {\r\n  if (isNativeReflectConstruct()) {\r\n    module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  } else {\r\n    module.exports = _construct = function _construct(Parent, args, Class) {\r\n      var a = [null];\r\n      a.push.apply(a, args);\r\n      var Constructor = Function.bind.apply(Parent, a);\r\n      var instance = new Constructor();\r\n      if (Class) setPrototypeOf(instance, Class.prototype);\r\n      return instance;\r\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  }\r\n\r\n  return _construct.apply(null, arguments);\r\n}\r\n\r\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 250 */\r\n/***/ (function(module, exports) {\r\n\r\nfunction _isNativeReflectConstruct() {\r\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\r\n  if (Reflect.construct.sham) return false;\r\n  if (typeof Proxy === \"function\") return true;\r\n\r\n  try {\r\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n\r\n/***/ }),\r\n/* 251 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = determinant;\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @alias mat2.determinant\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/***/ }),\r\n/* 252 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = transpose;\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @alias mat2.transpose\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 253 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = multiply;\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @alias mat2.multiply\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 254 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = identity;\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @alias mat2.identity\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 255 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = adjoint;\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @alias mat2.adjoint\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 256 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = rotate;\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @alias mat2.rotate\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 257 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = invert;\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @alias mat2.invert\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction invert(out, a) {\r\n  var a0 = a[0];\r\n  var a1 = a[1];\r\n  var a2 = a[2];\r\n  var a3 = a[3];\r\n  var det = a0 * a3 - a2 * a1;\r\n  if (!det) return null;\r\n  det = 1.0 / det;\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 258 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = create;\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @alias mat2.create\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\n\r\nfunction create() {\r\n  var out = new Float32Array(4);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 259 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = scale;\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @alias mat2.scale\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\n\r\nfunction scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 260 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = copy;\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @alias mat2.copy\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/***/ }),\r\n/* 261 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = frob;\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @alias mat2.frob\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\nfunction frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\r\n}\r\n\r\n/***/ }),\r\n/* 262 */\r\n/***/ (function(module, exports) {\r\n\r\nmodule.exports = ldu;\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n *\r\n * @alias mat2.ldu\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nfunction ldu(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/***/ }),\r\n/* 263 */\r\n/***/ (function(module, __webpack_exports__, __nested_webpack_require_266069__) {\r\n\r\n\"use strict\";\r\n// ESM COMPAT FLAG\r\n__nested_webpack_require_266069__.r(__webpack_exports__);\r\n\r\n// EXPORTS\r\n__nested_webpack_require_266069__.d(__webpack_exports__, \"BarcodeDecoder\", function() { return /* reexport */ barcode_decoder; });\r\n__nested_webpack_require_266069__.d(__webpack_exports__, \"Readers\", function() { return /* reexport */ reader_namespaceObject; });\r\n__nested_webpack_require_266069__.d(__webpack_exports__, \"CameraAccess\", function() { return /* reexport */ camera_access; });\r\n__nested_webpack_require_266069__.d(__webpack_exports__, \"ImageDebug\", function() { return /* reexport */ image_debug[\"a\" /* default */]; });\r\n__nested_webpack_require_266069__.d(__webpack_exports__, \"ImageWrapper\", function() { return /* reexport */ image_wrapper[\"a\" /* default */]; });\r\n__nested_webpack_require_266069__.d(__webpack_exports__, \"ResultCollector\", function() { return /* reexport */ result_collector; });\r\n\r\n// NAMESPACE OBJECT: ./src/reader/index.ts\r\nvar reader_namespaceObject = {};\r\n__nested_webpack_require_266069__.r(reader_namespaceObject);\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"BarcodeReader\", function() { return barcode_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"TwoOfFiveReader\", function() { return _2of5_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"NewCodabarReader\", function() { return codabar_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"Code128Reader\", function() { return code_128_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"Code32Reader\", function() { return code_32_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"Code39Reader\", function() { return code_39_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"Code39VINReader\", function() { return code_39_vin_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"Code93Reader\", function() { return code_93_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"EAN2Reader\", function() { return ean_2_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"EAN5Reader\", function() { return ean_5_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"EAN8Reader\", function() { return ean_8_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"EANReader\", function() { return ean_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"I2of5Reader\", function() { return i2of5_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"UPCEReader\", function() { return upc_e_reader; });\r\n__nested_webpack_require_266069__.d(reader_namespaceObject, \"UPCReader\", function() { return upc_reader; });\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js\r\nvar helpers_typeof = __nested_webpack_require_266069__(20);\r\nvar typeof_default = /*#__PURE__*/__nested_webpack_require_266069__.n(helpers_typeof);\r\n\r\n// EXTERNAL MODULE: ./node_modules/lodash/merge.js\r\nvar merge = __nested_webpack_require_266069__(17);\r\nvar merge_default = /*#__PURE__*/__nested_webpack_require_266069__.n(merge);\r\n\r\n// EXTERNAL MODULE: ./src/common/typedefs.js\r\nvar typedefs = __nested_webpack_require_266069__(152);\r\n\r\n// EXTERNAL MODULE: ./src/common/image_wrapper.ts\r\nvar image_wrapper = __nested_webpack_require_266069__(12);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js\r\nvar asyncToGenerator = __nested_webpack_require_266069__(13);\r\nvar asyncToGenerator_default = /*#__PURE__*/__nested_webpack_require_266069__.n(asyncToGenerator);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\r\nvar regenerator = __nested_webpack_require_266069__(8);\r\nvar regenerator_default = /*#__PURE__*/__nested_webpack_require_266069__.n(regenerator);\r\n\r\n// EXTERNAL MODULE: ./src/common/image_debug.ts\r\nvar image_debug = __nested_webpack_require_266069__(10);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js\r\nvar classCallCheck = __nested_webpack_require_266069__(3);\r\nvar classCallCheck_default = /*#__PURE__*/__nested_webpack_require_266069__.n(classCallCheck);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js\r\nvar createClass = __nested_webpack_require_266069__(4);\r\nvar createClass_default = /*#__PURE__*/__nested_webpack_require_266069__.n(createClass);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/assertThisInitialized.js\r\nvar assertThisInitialized = __nested_webpack_require_266069__(1);\r\nvar assertThisInitialized_default = /*#__PURE__*/__nested_webpack_require_266069__.n(assertThisInitialized);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js\r\nvar inherits = __nested_webpack_require_266069__(6);\r\nvar inherits_default = /*#__PURE__*/__nested_webpack_require_266069__.n(inherits);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\r\nvar possibleConstructorReturn = __nested_webpack_require_266069__(5);\r\nvar possibleConstructorReturn_default = /*#__PURE__*/__nested_webpack_require_266069__.n(possibleConstructorReturn);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js\r\nvar getPrototypeOf = __nested_webpack_require_266069__(2);\r\nvar getPrototypeOf_default = /*#__PURE__*/__nested_webpack_require_266069__.n(getPrototypeOf);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js\r\nvar defineProperty = __nested_webpack_require_266069__(0);\r\nvar defineProperty_default = /*#__PURE__*/__nested_webpack_require_266069__.n(defineProperty);\r\n\r\n// EXTERNAL MODULE: ./src/common/array_helper.ts\r\nvar array_helper = __nested_webpack_require_266069__(11);\r\n\r\n// CONCATENATED MODULE: ./src/reader/barcode_reader.ts\r\n\r\n\r\n\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\n/* eslint-disable class-methods-use-this */\r\n// eslint-disable-next-line import/no-cycle\r\n // for some reason this throws a shadow error on itself?!\r\n// eslint-disable-next-line no-shadow\r\n\r\nvar BarcodeDirection;\r\n\r\n(function (BarcodeDirection) {\r\n  BarcodeDirection[BarcodeDirection[\"Forward\"] = 1] = \"Forward\";\r\n  BarcodeDirection[BarcodeDirection[\"Reverse\"] = -1] = \"Reverse\";\r\n})(BarcodeDirection || (BarcodeDirection = {}));\r\n\r\nvar barcode_reader_BarcodeReader = /*#__PURE__*/function () {\r\n  function BarcodeReader(config, supplements) {\r\n    classCallCheck_default()(this, BarcodeReader);\r\n\r\n    defineProperty_default()(this, \"_row\", []);\r\n\r\n    defineProperty_default()(this, \"config\", {});\r\n\r\n    defineProperty_default()(this, \"supplements\", []);\r\n\r\n    defineProperty_default()(this, \"SINGLE_CODE_ERROR\", 0);\r\n\r\n    defineProperty_default()(this, \"FORMAT\", 'unknown');\r\n\r\n    defineProperty_default()(this, \"CONFIG_KEYS\", {});\r\n\r\n    this._row = [];\r\n    this.config = config || {};\r\n\r\n    if (supplements) {\r\n      this.supplements = supplements;\r\n    }\r\n  }\r\n\r\n  createClass_default()(BarcodeReader, [{\r\n    key: \"_nextUnset\",\r\n    value: function _nextUnset(line) {\r\n      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n\r\n      for (var i = start; i < line.length; i++) {\r\n        if (!line[i]) return i;\r\n      }\r\n\r\n      return line.length;\r\n    }\r\n  }, {\r\n    key: \"_matchPattern\",\r\n    value: function _matchPattern(counter, code) {\r\n      var maxSingleError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.SINGLE_CODE_ERROR || 1;\r\n      var error = 0;\r\n      var singleError = 0;\r\n      var sum = 0;\r\n      var modulo = 0;\r\n      var barWidth = 0;\r\n      var count = 0;\r\n      var scaled = 0;\r\n\r\n      for (var i = 0; i < counter.length; i++) {\r\n        sum += counter[i];\r\n        modulo += code[i];\r\n      }\r\n\r\n      if (sum < modulo) {\r\n        return Number.MAX_VALUE;\r\n      }\r\n\r\n      barWidth = sum / modulo; // eslint-disable-next-line no-param-reassign\r\n\r\n      maxSingleError *= barWidth;\r\n\r\n      for (var _i = 0; _i < counter.length; _i++) {\r\n        count = counter[_i];\r\n        scaled = code[_i] * barWidth;\r\n        singleError = Math.abs(count - scaled) / scaled;\r\n\r\n        if (singleError > maxSingleError) {\r\n          return Number.MAX_VALUE;\r\n        }\r\n\r\n        error += singleError;\r\n      }\r\n\r\n      return error / modulo;\r\n    }\r\n  }, {\r\n    key: \"_nextSet\",\r\n    value: function _nextSet(line) {\r\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\r\n\r\n      for (var i = offset; i < line.length; i++) {\r\n        if (line[i]) return i;\r\n      }\r\n\r\n      return line.length;\r\n    }\r\n  }, {\r\n    key: \"_correctBars\",\r\n    value: function _correctBars(counter, correction, indices) {\r\n      var length = indices.length;\r\n      var tmp = 0;\r\n\r\n      while (length--) {\r\n        tmp = counter[indices[length]] * (1 - (1 - correction) / 2);\r\n\r\n        if (tmp > 1) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          counter[indices[length]] = tmp;\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"decodePattern\",\r\n    value: function decodePattern(pattern) {\r\n      // console.warn('* decodePattern', pattern);\r\n      this._row = pattern; // console.warn('* decodePattern calling decode', typeof this, this.constructor, this.FORMAT, JSON.stringify(this));\r\n\r\n      var result = this.decode(); // console.warn('* first result=', result);\r\n\r\n      if (result === null) {\r\n        this._row.reverse();\r\n\r\n        result = this.decode(); // console.warn('* reversed result=', result);\r\n\r\n        if (result) {\r\n          result.direction = BarcodeDirection.Reverse;\r\n          result.start = this._row.length - result.start;\r\n          result.end = this._row.length - result.end;\r\n        }\r\n      } else {\r\n        result.direction = BarcodeDirection.Forward;\r\n      }\r\n\r\n      if (result) {\r\n        result.format = this.FORMAT;\r\n      } // console.warn('* returning', result);\r\n\r\n\r\n      return result;\r\n    }\r\n  }, {\r\n    key: \"_matchRange\",\r\n    value: function _matchRange(start, end, value) {\r\n      // eslint-disable-next-line no-param-reassign\r\n      start = start < 0 ? 0 : start;\r\n      var i;\r\n\r\n      for (i = start; i < end; i++) {\r\n        if (this._row[i] !== value) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }, {\r\n    key: \"_fillCounters\",\r\n    value: function _fillCounters() {\r\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._nextUnset(this._row);\r\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._row.length;\r\n      var isWhite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n      var counters = [];\r\n      var counterPos = 0;\r\n      counters[counterPos] = 0;\r\n\r\n      for (var i = offset; i < end; i++) {\r\n        // eslint-disable-next-line no-bitwise\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counters[counterPos]++;\r\n        } else {\r\n          counterPos++;\r\n          counters[counterPos] = 1; // eslint-disable-next-line no-param-reassign\r\n\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return counters;\r\n    }\r\n  }, {\r\n    key: \"_toCounters\",\r\n    value: function _toCounters(start, counters) {\r\n      var numCounters = counters.length;\r\n      var end = this._row.length;\r\n      var isWhite = !this._row[start];\r\n      var counterPos = 0;\r\n      array_helper[\"a\" /* default */].init(counters, 0);\r\n\r\n      for (var i = start; i < end; i++) {\r\n        // eslint-disable-next-line no-bitwise\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          // eslint-disable-next-line no-param-reassign\r\n          counters[counterPos]++;\r\n        } else {\r\n          counterPos++;\r\n\r\n          if (counterPos === numCounters) {\r\n            break;\r\n          } else {\r\n            // eslint-disable-next-line no-param-reassign\r\n            counters[counterPos] = 1;\r\n            isWhite = !isWhite;\r\n          }\r\n        }\r\n      }\r\n\r\n      return counters;\r\n    } // override/implement this in your custom readers.\r\n\r\n  }, {\r\n    key: \"decodeImage\",\r\n    value: function decodeImage(imageWrapper) {\r\n      // eslint-disable-next-line no-void\r\n      void imageWrapper;\r\n      return null;\r\n    }\r\n  }], [{\r\n    key: \"Exception\",\r\n    get: function get() {\r\n      return {\r\n        StartNotFoundException: 'Start-Info was not found!',\r\n        CodeNotFoundException: 'Code could not be found!',\r\n        PatternNotFoundException: 'Pattern could not be found!'\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return BarcodeReader;\r\n}();\r\n/* harmony default export */ var barcode_reader = (barcode_reader_BarcodeReader);\r\n// CONCATENATED MODULE: ./src/reader/2of5_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\nvar N = 1;\r\nvar W = 3;\r\nvar START_PATTERN = [W, N, W, N, N, N];\r\nvar STOP_PATTERN = [W, N, N, N, W];\r\nvar CODE_PATTERN = [[N, N, W, W, N], [W, N, N, N, W], [N, W, N, N, W], [W, W, N, N, N], [N, N, W, N, W], [W, N, W, N, N], [N, W, W, N, N], [N, N, N, W, W], [W, N, N, W, N], [N, W, N, W, N]];\r\nvar START_PATTERN_LENGTH = START_PATTERN.reduce(function (sum, val) {\r\n  return sum + val;\r\n}, 0);\r\n\r\nvar _2of5_reader_TwoOfFiveReader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(TwoOfFiveReader, _BarcodeReader);\r\n\r\n  var _super = _createSuper(TwoOfFiveReader);\r\n\r\n  function TwoOfFiveReader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, TwoOfFiveReader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"barSpaceRatio\", [1, 1]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", '2of5');\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.78);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"AVG_CODE_ERROR\", 0.30);\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(TwoOfFiveReader, [{\r\n    key: \"_findPattern\",\r\n    value: function _findPattern(pattern, offset) {\r\n      var isWhite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n      var tryHarder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\r\n      var counter = [];\r\n      var counterPos = 0;\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        code: -1,\r\n        start: 0,\r\n        end: 0\r\n      };\r\n      var sum = 0;\r\n      var error = 0;\r\n      var epsilon = this.AVG_CODE_ERROR;\r\n\r\n      if (!offset) {\r\n        offset = this._nextSet(this._row);\r\n      }\r\n\r\n      for (var i = 0; i < pattern.length; i++) {\r\n        counter[i] = 0;\r\n      }\r\n\r\n      for (var _i = offset; _i < this._row.length; _i++) {\r\n        if (this._row[_i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            sum = 0;\r\n\r\n            for (var j = 0; j < counter.length; j++) {\r\n              sum += counter[j];\r\n            }\r\n\r\n            error = this._matchPattern(counter, pattern);\r\n\r\n            if (error < epsilon) {\r\n              bestMatch.error = error;\r\n              bestMatch.start = _i - sum;\r\n              bestMatch.end = _i;\r\n              return bestMatch;\r\n            }\r\n\r\n            if (tryHarder) {\r\n              for (var _j = 0; _j < counter.length - 2; _j++) {\r\n                counter[_j] = counter[_j + 2];\r\n              }\r\n\r\n              counter[counter.length - 2] = 0;\r\n              counter[counter.length - 1] = 0;\r\n              counterPos--;\r\n            } else {\r\n              return null;\r\n            }\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_findStart\",\r\n    value: function _findStart() {\r\n      var startInfo = null;\r\n\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var narrowBarWidth = 1;\r\n      var leadingWhitespaceStart = 0;\r\n\r\n      while (!startInfo) {\r\n        startInfo = this._findPattern(START_PATTERN, offset, false, true);\r\n\r\n        if (!startInfo) {\r\n          return null;\r\n        }\r\n\r\n        narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / START_PATTERN_LENGTH);\r\n        leadingWhitespaceStart = startInfo.start - narrowBarWidth * 5;\r\n\r\n        if (leadingWhitespaceStart >= 0) {\r\n          if (this._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\r\n            return startInfo;\r\n          }\r\n        }\r\n\r\n        offset = startInfo.end;\r\n        startInfo = null;\r\n      }\r\n\r\n      return startInfo;\r\n    }\r\n  }, {\r\n    key: \"_verifyTrailingWhitespace\",\r\n    value: function _verifyTrailingWhitespace(endInfo) {\r\n      var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\r\n\r\n      if (trailingWhitespaceEnd < this._row.length) {\r\n        if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n          return endInfo;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_findEnd\",\r\n    value: function _findEnd() {\r\n      // TODO: reverse, followed by some calcs, followed by another reverse? really?\r\n      this._row.reverse();\r\n\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var endInfo = this._findPattern(STOP_PATTERN, offset, false, true);\r\n\r\n      this._row.reverse();\r\n\r\n      if (endInfo === null) {\r\n        return null;\r\n      } // reverse numbers\r\n\r\n\r\n      var tmp = endInfo.start;\r\n      endInfo.start = this._row.length - endInfo.end;\r\n      endInfo.end = this._row.length - tmp;\r\n      return endInfo !== null ? this._verifyTrailingWhitespace(endInfo) : null;\r\n    }\r\n  }, {\r\n    key: \"_verifyCounterLength\",\r\n    value: function _verifyCounterLength(counters) {\r\n      return counters.length % 10 === 0;\r\n    }\r\n  }, {\r\n    key: \"_decodeCode\",\r\n    value: function _decodeCode(counter) {\r\n      var epsilon = this.AVG_CODE_ERROR;\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        code: -1,\r\n        start: 0,\r\n        end: 0\r\n      };\r\n\r\n      for (var code = 0; code < CODE_PATTERN.length; code++) {\r\n        var error = this._matchPattern(counter, CODE_PATTERN[code]);\r\n\r\n        if (error < bestMatch.error) {\r\n          bestMatch.code = code;\r\n          bestMatch.error = error;\r\n        }\r\n      }\r\n\r\n      if (bestMatch.error < epsilon) {\r\n        return bestMatch;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_decodePayload\",\r\n    value: function _decodePayload(counters, result, decodedCodes) {\r\n      var pos = 0;\r\n      var counterLength = counters.length;\r\n      var counter = [0, 0, 0, 0, 0];\r\n      var code = null;\r\n\r\n      while (pos < counterLength) {\r\n        for (var i = 0; i < 5; i++) {\r\n          counter[i] = counters[pos] * this.barSpaceRatio[0];\r\n          pos += 2;\r\n        }\r\n\r\n        code = this._decodeCode(counter);\r\n\r\n        if (!code) {\r\n          return null;\r\n        }\r\n\r\n        result.push(\"\".concat(code.code));\r\n        decodedCodes.push(code);\r\n      }\r\n\r\n      return code;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      var startInfo = this._findStart();\r\n\r\n      if (!startInfo) {\r\n        return null;\r\n      }\r\n\r\n      var endInfo = this._findEnd();\r\n\r\n      if (!endInfo) {\r\n        return null;\r\n      }\r\n\r\n      var counters = this._fillCounters(startInfo.end, endInfo.start, false);\r\n\r\n      if (!this._verifyCounterLength(counters)) {\r\n        return null;\r\n      }\r\n\r\n      var decodedCodes = [];\r\n      decodedCodes.push(startInfo);\r\n      var result = [];\r\n\r\n      var code = this._decodePayload(counters, result, decodedCodes);\r\n\r\n      if (!code) {\r\n        return null;\r\n      }\r\n\r\n      if (result.length < 5) {\r\n        return null;\r\n      }\r\n\r\n      decodedCodes.push(endInfo);\r\n      return {\r\n        code: result.join(''),\r\n        start: startInfo.start,\r\n        end: endInfo.end,\r\n        startInfo: startInfo,\r\n        decodedCodes: decodedCodes,\r\n        format: this.FORMAT\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return TwoOfFiveReader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var _2of5_reader = (_2of5_reader_TwoOfFiveReader);\r\n// CONCATENATED MODULE: ./src/reader/codabar_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction codabar_reader_createSuper(Derived) { var hasNativeReflectConstruct = codabar_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction codabar_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n // const ALPHABETH_STRING = '0123456789-$:/.+ABCD';\r\n\r\nvar ALPHABET = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 36, 58, 47, 46, 43, 65, 66, 67, 68];\r\nvar CHARACTER_ENCODINGS = [0x003, 0x006, 0x009, 0x060, 0x012, 0x042, 0x021, 0x024, 0x030, 0x048, 0x00c, 0x018, 0x045, 0x051, 0x054, 0x015, 0x01A, 0x029, 0x00B, 0x00E];\r\nvar START_END = [0x01A, 0x029, 0x00B, 0x00E];\r\nvar MIN_ENCODED_CHARS = 4;\r\nvar MAX_ACCEPTABLE = 2.0;\r\nvar PADDING = 1.5;\r\n;\r\n;\r\n\r\nvar codabar_reader_NewCodabarReader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(NewCodabarReader, _BarcodeReader);\r\n\r\n  var _super = codabar_reader_createSuper(NewCodabarReader);\r\n\r\n  function NewCodabarReader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, NewCodabarReader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"_counters\", []);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'codabar');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(NewCodabarReader, [{\r\n    key: \"_computeAlternatingThreshold\",\r\n    value: function _computeAlternatingThreshold(offset, end) {\r\n      var min = Number.MAX_VALUE;\r\n      var max = 0;\r\n      var counter = 0;\r\n\r\n      for (var i = offset; i < end; i += 2) {\r\n        counter = this._counters[i];\r\n\r\n        if (counter > max) {\r\n          max = counter;\r\n        }\r\n\r\n        if (counter < min) {\r\n          min = counter;\r\n        }\r\n      }\r\n\r\n      return (min + max) / 2.0 | 0;\r\n    }\r\n  }, {\r\n    key: \"_toPattern\",\r\n    value: function _toPattern(offset) {\r\n      var numCounters = 7;\r\n      var end = offset + numCounters;\r\n\r\n      if (end > this._counters.length) {\r\n        return -1;\r\n      }\r\n\r\n      var barThreshold = this._computeAlternatingThreshold(offset, end);\r\n\r\n      var spaceThreshold = this._computeAlternatingThreshold(offset + 1, end);\r\n\r\n      var bitmask = 1 << numCounters - 1;\r\n      var threshold = 0;\r\n      var pattern = 0;\r\n\r\n      for (var i = 0; i < numCounters; i++) {\r\n        threshold = (i & 1) === 0 ? barThreshold : spaceThreshold;\r\n\r\n        if (this._counters[offset + i] > threshold) {\r\n          pattern |= bitmask;\r\n        }\r\n\r\n        bitmask >>= 1;\r\n      }\r\n\r\n      return pattern;\r\n    }\r\n  }, {\r\n    key: \"_isStartEnd\",\r\n    value: function _isStartEnd(pattern) {\r\n      for (var i = 0; i < START_END.length; i++) {\r\n        if (START_END[i] === pattern) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }, {\r\n    key: \"_sumCounters\",\r\n    value: function _sumCounters(start, end) {\r\n      var sum = 0;\r\n\r\n      for (var i = start; i < end; i++) {\r\n        sum += this._counters[i];\r\n      }\r\n\r\n      return sum;\r\n    }\r\n  }, {\r\n    key: \"_findStart\",\r\n    value: function _findStart() {\r\n      var start = this._nextUnset(this._row);\r\n\r\n      var end = start;\r\n\r\n      for (var i = 1; i < this._counters.length; i++) {\r\n        var pattern = this._toPattern(i);\r\n\r\n        if (pattern !== -1 && this._isStartEnd(pattern)) {\r\n          // TODO: Look for whitespace ahead\r\n          start += this._sumCounters(0, i);\r\n          end = start + this._sumCounters(i, i + 8);\r\n          return {\r\n            start: start,\r\n            end: end,\r\n            startCounter: i,\r\n            endCounter: i + 8\r\n          };\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_patternToChar\",\r\n    value: function _patternToChar(pattern) {\r\n      for (var i = 0; i < CHARACTER_ENCODINGS.length; i++) {\r\n        if (CHARACTER_ENCODINGS[i] === pattern) {\r\n          return String.fromCharCode(ALPHABET[i]);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_calculatePatternLength\",\r\n    value: function _calculatePatternLength(offset) {\r\n      var sum = 0;\r\n\r\n      for (var i = offset; i < offset + 7; i++) {\r\n        sum += this._counters[i];\r\n      }\r\n\r\n      return sum;\r\n    }\r\n  }, {\r\n    key: \"_verifyWhitespace\",\r\n    value: function _verifyWhitespace(startCounter, endCounter) {\r\n      if (startCounter - 1 <= 0 || this._counters[startCounter - 1] >= this._calculatePatternLength(startCounter) / 2.0) {\r\n        if (endCounter + 8 >= this._counters.length || this._counters[endCounter + 7] >= this._calculatePatternLength(endCounter) / 2.0) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }, {\r\n    key: \"_charToPattern\",\r\n    value: function _charToPattern(_char) {\r\n      var charCode = _char.charCodeAt(0);\r\n\r\n      for (var i = 0; i < ALPHABET.length; i++) {\r\n        if (ALPHABET[i] === charCode) {\r\n          return CHARACTER_ENCODINGS[i];\r\n        }\r\n      }\r\n\r\n      return 0x0;\r\n    }\r\n  }, {\r\n    key: \"_thresholdResultPattern\",\r\n    value: function _thresholdResultPattern(result, startCounter) {\r\n      var categorization = {\r\n        space: {\r\n          narrow: {\r\n            size: 0,\r\n            counts: 0,\r\n            min: 0,\r\n            max: Number.MAX_VALUE\r\n          },\r\n          wide: {\r\n            size: 0,\r\n            counts: 0,\r\n            min: 0,\r\n            max: Number.MAX_VALUE\r\n          }\r\n        },\r\n        bar: {\r\n          narrow: {\r\n            size: 0,\r\n            counts: 0,\r\n            min: 0,\r\n            max: Number.MAX_VALUE\r\n          },\r\n          wide: {\r\n            size: 0,\r\n            counts: 0,\r\n            min: 0,\r\n            max: Number.MAX_VALUE\r\n          }\r\n        }\r\n      };\r\n      var pos = startCounter;\r\n      var pattern;\r\n\r\n      for (var i = 0; i < result.length; i++) {\r\n        pattern = this._charToPattern(result[i]);\r\n\r\n        for (var j = 6; j >= 0; j--) {\r\n          var kind = (j & 1) === 2 ? categorization.bar : categorization.space;\r\n          var cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\r\n          cat.size += this._counters[pos + j];\r\n          cat.counts++;\r\n          pattern >>= 1;\r\n        }\r\n\r\n        pos += 8;\r\n      }\r\n\r\n      ['space', 'bar'].forEach(function (key) {\r\n        var newkind = categorization[key];\r\n        newkind.wide.min = Math.floor((newkind.narrow.size / newkind.narrow.counts + newkind.wide.size / newkind.wide.counts) / 2);\r\n        newkind.narrow.max = Math.ceil(newkind.wide.min);\r\n        newkind.wide.max = Math.ceil((newkind.wide.size * MAX_ACCEPTABLE + PADDING) / newkind.wide.counts);\r\n      });\r\n      return categorization;\r\n    }\r\n  }, {\r\n    key: \"_validateResult\",\r\n    value: function _validateResult(result, startCounter) {\r\n      var thresholds = this._thresholdResultPattern(result, startCounter);\r\n\r\n      var pos = startCounter;\r\n      var pattern;\r\n\r\n      for (var i = 0; i < result.length; i++) {\r\n        pattern = this._charToPattern(result[i]);\r\n\r\n        for (var j = 6; j >= 0; j--) {\r\n          var kind = (j & 1) === 0 ? thresholds.bar : thresholds.space;\r\n          var cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\r\n          var size = this._counters[pos + j];\r\n\r\n          if (size < cat.min || size > cat.max) {\r\n            return false;\r\n          }\r\n\r\n          pattern >>= 1;\r\n        }\r\n\r\n        pos += 8;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      this._counters = this._fillCounters();\r\n      start = this._findStart();\r\n\r\n      if (!start) {\r\n        return null;\r\n      }\r\n\r\n      var nextStart = start.startCounter;\r\n      var result = [];\r\n      var pattern;\r\n\r\n      do {\r\n        pattern = this._toPattern(nextStart);\r\n\r\n        if (pattern < 0) {\r\n          return null;\r\n        }\r\n\r\n        var decodedChar = this._patternToChar(pattern);\r\n\r\n        if (decodedChar === null) {\r\n          return null;\r\n        }\r\n\r\n        result.push(decodedChar);\r\n        nextStart += 8;\r\n\r\n        if (result.length > 1 && this._isStartEnd(pattern)) {\r\n          break;\r\n        }\r\n      } while (nextStart < this._counters.length); // verify end\r\n\r\n\r\n      if (result.length - 2 < MIN_ENCODED_CHARS || !this._isStartEnd(pattern)) {\r\n        return null;\r\n      } // verify end white space\r\n\r\n\r\n      if (!this._verifyWhitespace(start.startCounter, nextStart - 8)) {\r\n        return null;\r\n      }\r\n\r\n      if (!this._validateResult(result, start.startCounter)) {\r\n        return null;\r\n      }\r\n\r\n      nextStart = nextStart > this._counters.length ? this._counters.length : nextStart;\r\n\r\n      var end = start.start + this._sumCounters(start.startCounter, nextStart - 8);\r\n\r\n      return {\r\n        code: result.join(''),\r\n        start: start.start,\r\n        end: end,\r\n        startInfo: start,\r\n        decodedCodes: result,\r\n        format: this.FORMAT // TODO: i think it should not be required to return format from this, as barcode_reader force sets the format anyway\r\n\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return NewCodabarReader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var codabar_reader = (codabar_reader_NewCodabarReader);\r\n// CONCATENATED MODULE: ./src/reader/code_128_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction code_128_reader_createSuper(Derived) { var hasNativeReflectConstruct = code_128_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction code_128_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n\r\nvar code_128_reader_Code128Reader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(Code128Reader, _BarcodeReader);\r\n\r\n  var _super = code_128_reader_createSuper(Code128Reader);\r\n\r\n  function Code128Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, Code128Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_SHIFT\", 98);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_C\", 99);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_B\", 100);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_A\", 101);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"START_CODE_A\", 103);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"START_CODE_B\", 104);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"START_CODE_C\", 105);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_CODE\", 106);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_PATTERN\", [[2, 1, 2, 2, 2, 2], [2, 2, 2, 1, 2, 2], [2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 2, 3], [1, 2, 1, 3, 2, 2], [1, 3, 1, 2, 2, 2], [1, 2, 2, 2, 1, 3], [1, 2, 2, 3, 1, 2], [1, 3, 2, 2, 1, 2], [2, 2, 1, 2, 1, 3], [2, 2, 1, 3, 1, 2], [2, 3, 1, 2, 1, 2], [1, 1, 2, 2, 3, 2], [1, 2, 2, 1, 3, 2], [1, 2, 2, 2, 3, 1], [1, 1, 3, 2, 2, 2], [1, 2, 3, 1, 2, 2], [1, 2, 3, 2, 2, 1], [2, 2, 3, 2, 1, 1], [2, 2, 1, 1, 3, 2], [2, 2, 1, 2, 3, 1], [2, 1, 3, 2, 1, 2], [2, 2, 3, 1, 1, 2], [3, 1, 2, 1, 3, 1], [3, 1, 1, 2, 2, 2], [3, 2, 1, 1, 2, 2], [3, 2, 1, 2, 2, 1], [3, 1, 2, 2, 1, 2], [3, 2, 2, 1, 1, 2], [3, 2, 2, 2, 1, 1], [2, 1, 2, 1, 2, 3], [2, 1, 2, 3, 2, 1], [2, 3, 2, 1, 2, 1], [1, 1, 1, 3, 2, 3], [1, 3, 1, 1, 2, 3], [1, 3, 1, 3, 2, 1], [1, 1, 2, 3, 1, 3], [1, 3, 2, 1, 1, 3], [1, 3, 2, 3, 1, 1], [2, 1, 1, 3, 1, 3], [2, 3, 1, 1, 1, 3], [2, 3, 1, 3, 1, 1], [1, 1, 2, 1, 3, 3], [1, 1, 2, 3, 3, 1], [1, 3, 2, 1, 3, 1], [1, 1, 3, 1, 2, 3], [1, 1, 3, 3, 2, 1], [1, 3, 3, 1, 2, 1], [3, 1, 3, 1, 2, 1], [2, 1, 1, 3, 3, 1], [2, 3, 1, 1, 3, 1], [2, 1, 3, 1, 1, 3], [2, 1, 3, 3, 1, 1], [2, 1, 3, 1, 3, 1], [3, 1, 1, 1, 2, 3], [3, 1, 1, 3, 2, 1], [3, 3, 1, 1, 2, 1], [3, 1, 2, 1, 1, 3], [3, 1, 2, 3, 1, 1], [3, 3, 2, 1, 1, 1], [3, 1, 4, 1, 1, 1], [2, 2, 1, 4, 1, 1], [4, 3, 1, 1, 1, 1], [1, 1, 1, 2, 2, 4], [1, 1, 1, 4, 2, 2], [1, 2, 1, 1, 2, 4], [1, 2, 1, 4, 2, 1], [1, 4, 1, 1, 2, 2], [1, 4, 1, 2, 2, 1], [1, 1, 2, 2, 1, 4], [1, 1, 2, 4, 1, 2], [1, 2, 2, 1, 1, 4], [1, 2, 2, 4, 1, 1], [1, 4, 2, 1, 1, 2], [1, 4, 2, 2, 1, 1], [2, 4, 1, 2, 1, 1], [2, 2, 1, 1, 1, 4], [4, 1, 3, 1, 1, 1], [2, 4, 1, 1, 1, 2], [1, 3, 4, 1, 1, 1], [1, 1, 1, 2, 4, 2], [1, 2, 1, 1, 4, 2], [1, 2, 1, 2, 4, 1], [1, 1, 4, 2, 1, 2], [1, 2, 4, 1, 1, 2], [1, 2, 4, 2, 1, 1], [4, 1, 1, 2, 1, 2], [4, 2, 1, 1, 1, 2], [4, 2, 1, 2, 1, 1], [2, 1, 2, 1, 4, 1], [2, 1, 4, 1, 2, 1], [4, 1, 2, 1, 2, 1], [1, 1, 1, 1, 4, 3], [1, 1, 1, 3, 4, 1], [1, 3, 1, 1, 4, 1], [1, 1, 4, 1, 1, 3], [1, 1, 4, 3, 1, 1], [4, 1, 1, 1, 1, 3], [4, 1, 1, 3, 1, 1], [1, 1, 3, 1, 4, 1], [1, 1, 4, 1, 3, 1], [3, 1, 1, 1, 4, 1], [4, 1, 1, 1, 3, 1], [2, 1, 1, 4, 1, 2], [2, 1, 1, 2, 1, 4], [2, 1, 1, 2, 3, 2], [2, 3, 3, 1, 1, 1, 2]]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.64);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"AVG_CODE_ERROR\", 0.30);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'code_128');\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"MODULE_INDICES\", {\r\n      bar: [0, 2, 4],\r\n      space: [1, 3, 5]\r\n    });\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(Code128Reader, [{\r\n    key: \"_decodeCode\",\r\n    value: function _decodeCode(start, correction) {\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        code: -1,\r\n        start: start,\r\n        end: start,\r\n        correction: {\r\n          bar: 1,\r\n          space: 1\r\n        }\r\n      };\r\n      var counter = [0, 0, 0, 0, 0, 0];\r\n      var offset = start;\r\n      var isWhite = !this._row[offset];\r\n      var counterPos = 0;\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            if (correction) {\r\n              this._correct(counter, correction);\r\n            }\r\n\r\n            for (var code = 0; code < this.CODE_PATTERN.length; code++) {\r\n              var error = this._matchPattern(counter, this.CODE_PATTERN[code]);\r\n\r\n              if (error < bestMatch.error) {\r\n                bestMatch.code = code;\r\n                bestMatch.error = error;\r\n              }\r\n            }\r\n\r\n            bestMatch.end = i;\r\n\r\n            if (bestMatch.code === -1 || bestMatch.error > this.AVG_CODE_ERROR) {\r\n              return null;\r\n            }\r\n\r\n            if (this.CODE_PATTERN[bestMatch.code]) {\r\n              bestMatch.correction.bar = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\r\n              bestMatch.correction.space = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\r\n            }\r\n\r\n            return bestMatch;\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_correct\",\r\n    value: function _correct(counter, correction) {\r\n      this._correctBars(counter, correction.bar, this.MODULE_INDICES.bar);\r\n\r\n      this._correctBars(counter, correction.space, this.MODULE_INDICES.space);\r\n    }\r\n  }, {\r\n    key: \"_findStart\",\r\n    value: // TODO: _findStart and decodeCode share similar code, can we re-use some?\r\n    function _findStart() {\r\n      var counter = [0, 0, 0, 0, 0, 0];\r\n\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        code: -1,\r\n        start: 0,\r\n        end: 0,\r\n        correction: {\r\n          bar: 1,\r\n          space: 1\r\n        }\r\n      };\r\n      var isWhite = false;\r\n      var counterPos = 0;\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            var sum = counter.reduce(function (prev, next) {\r\n              return prev + next;\r\n            }, 0);\r\n\r\n            for (var code = this.START_CODE_A; code <= this.START_CODE_C; code++) {\r\n              var error = this._matchPattern(counter, this.CODE_PATTERN[code]);\r\n\r\n              if (error < bestMatch.error) {\r\n                bestMatch.code = code;\r\n                bestMatch.error = error;\r\n              }\r\n            }\r\n\r\n            if (bestMatch.error < this.AVG_CODE_ERROR) {\r\n              bestMatch.start = i - sum;\r\n              bestMatch.end = i;\r\n              bestMatch.correction.bar = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\r\n              bestMatch.correction.space = this.calculateCorrection(this.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\r\n              return bestMatch;\r\n            }\r\n\r\n            for (var j = 0; j < 4; j++) {\r\n              counter[j] = counter[j + 2];\r\n            }\r\n\r\n            counter[4] = 0;\r\n            counter[5] = 0;\r\n            counterPos--;\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      var _this2 = this;\r\n\r\n      var startInfo = this._findStart();\r\n\r\n      if (startInfo === null) {\r\n        return null;\r\n      } // var self = this,\r\n      //     done = false,\r\n      //     result = [],\r\n      //     multiplier = 0,\r\n      //     checksum = 0,\r\n      //     codeset,\r\n      //     rawResult = [],\r\n      //     decodedCodes = [],\r\n      //     shiftNext = false,\r\n      //     unshift,\r\n      //     removeLastCharacter = true;\r\n\r\n\r\n      var code = {\r\n        code: startInfo.code,\r\n        start: startInfo.start,\r\n        end: startInfo.end,\r\n        correction: {\r\n          bar: startInfo.correction.bar,\r\n          space: startInfo.correction.space\r\n        }\r\n      };\r\n      var decodedCodes = [];\r\n      decodedCodes.push(code);\r\n      var checksum = code.code;\r\n\r\n      var codeset = function (c) {\r\n        switch (c) {\r\n          case _this2.START_CODE_A:\r\n            return _this2.CODE_A;\r\n\r\n          case _this2.START_CODE_B:\r\n            return _this2.CODE_B;\r\n\r\n          case _this2.START_CODE_C:\r\n            return _this2.CODE_C;\r\n\r\n          default:\r\n            return null;\r\n        }\r\n      }(code.code);\r\n\r\n      var done = false;\r\n      var shiftNext = false;\r\n      var unshift = shiftNext;\r\n      var removeLastCharacter = true;\r\n      var multiplier = 0;\r\n      var rawResult = [];\r\n      var result = []; // TODO: i think this should be string only, but it creates problems if it is\r\n\r\n      while (!done) {\r\n        unshift = shiftNext;\r\n        shiftNext = false;\r\n        code = this._decodeCode(code.end, code.correction);\r\n\r\n        if (code !== null) {\r\n          if (code.code !== this.STOP_CODE) {\r\n            removeLastCharacter = true;\r\n          }\r\n\r\n          if (code.code !== this.STOP_CODE) {\r\n            rawResult.push(code.code);\r\n            multiplier++;\r\n            checksum += multiplier * code.code;\r\n          }\r\n\r\n          decodedCodes.push(code);\r\n\r\n          switch (codeset) {\r\n            case this.CODE_A:\r\n              if (code.code < 64) {\r\n                result.push(String.fromCharCode(32 + code.code));\r\n              } else if (code.code < 96) {\r\n                result.push(String.fromCharCode(code.code - 64));\r\n              } else {\r\n                if (code.code !== this.STOP_CODE) {\r\n                  removeLastCharacter = false;\r\n                }\r\n\r\n                switch (code.code) {\r\n                  case this.CODE_SHIFT:\r\n                    shiftNext = true;\r\n                    codeset = this.CODE_B;\r\n                    break;\r\n\r\n                  case this.CODE_B:\r\n                    codeset = this.CODE_B;\r\n                    break;\r\n\r\n                  case this.CODE_C:\r\n                    codeset = this.CODE_C;\r\n                    break;\r\n\r\n                  case this.STOP_CODE:\r\n                    done = true;\r\n                    break;\r\n                }\r\n              }\r\n\r\n              break;\r\n\r\n            case this.CODE_B:\r\n              if (code.code < 96) {\r\n                result.push(String.fromCharCode(32 + code.code));\r\n              } else {\r\n                if (code.code !== this.STOP_CODE) {\r\n                  removeLastCharacter = false;\r\n                }\r\n\r\n                switch (code.code) {\r\n                  case this.CODE_SHIFT:\r\n                    shiftNext = true;\r\n                    codeset = this.CODE_A;\r\n                    break;\r\n\r\n                  case this.CODE_A:\r\n                    codeset = this.CODE_A;\r\n                    break;\r\n\r\n                  case this.CODE_C:\r\n                    codeset = this.CODE_C;\r\n                    break;\r\n\r\n                  case this.STOP_CODE:\r\n                    done = true;\r\n                    break;\r\n                }\r\n              }\r\n\r\n              break;\r\n\r\n            case this.CODE_C:\r\n              if (code.code < 100) {\r\n                result.push(code.code < 10 ? '0' + code.code : code.code);\r\n              } else {\r\n                if (code.code !== this.STOP_CODE) {\r\n                  removeLastCharacter = false;\r\n                }\r\n\r\n                switch (code.code) {\r\n                  case this.CODE_A:\r\n                    codeset = this.CODE_A;\r\n                    break;\r\n\r\n                  case this.CODE_B:\r\n                    codeset = this.CODE_B;\r\n                    break;\r\n\r\n                  case this.STOP_CODE:\r\n                    done = true;\r\n                    break;\r\n                }\r\n              }\r\n\r\n              break;\r\n          }\r\n        } else {\r\n          done = true;\r\n        }\r\n\r\n        if (unshift) {\r\n          codeset = codeset === this.CODE_A ? this.CODE_B : this.CODE_A;\r\n        }\r\n      }\r\n\r\n      if (code === null) {\r\n        return null;\r\n      }\r\n\r\n      code.end = this._nextUnset(this._row, code.end);\r\n\r\n      if (!this._verifyTrailingWhitespace(code)) {\r\n        return null;\r\n      }\r\n\r\n      checksum -= multiplier * rawResult[rawResult.length - 1];\r\n\r\n      if (checksum % 103 !== rawResult[rawResult.length - 1]) {\r\n        return null;\r\n      }\r\n\r\n      if (!result.length) {\r\n        return null;\r\n      } // remove last code from result (checksum)\r\n\r\n\r\n      if (removeLastCharacter) {\r\n        result.splice(result.length - 1, 1);\r\n      }\r\n\r\n      return {\r\n        code: result.join(''),\r\n        start: startInfo.start,\r\n        end: code.end,\r\n        codeset: codeset,\r\n        startInfo: startInfo,\r\n        decodedCodes: decodedCodes,\r\n        endInfo: code,\r\n        format: this.FORMAT\r\n      };\r\n    }\r\n  }, {\r\n    key: \"_verifyTrailingWhitespace\",\r\n    value: function _verifyTrailingWhitespace(endInfo) {\r\n      var self = this,\r\n          trailingWhitespaceEnd;\r\n      trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\r\n\r\n      if (trailingWhitespaceEnd < self._row.length) {\r\n        if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n          return endInfo;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"calculateCorrection\",\r\n    value: function calculateCorrection(expected, normalized, indices) {\r\n      var length = indices.length,\r\n          sumNormalized = 0,\r\n          sumExpected = 0;\r\n\r\n      while (length--) {\r\n        sumExpected += expected[indices[length]];\r\n        sumNormalized += normalized[indices[length]];\r\n      }\r\n\r\n      return sumExpected / sumNormalized;\r\n    }\r\n  }]);\r\n\r\n  return Code128Reader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var code_128_reader = (code_128_reader_Code128Reader);\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js\r\nvar get = __nested_webpack_require_266069__(14);\r\nvar get_default = /*#__PURE__*/__nested_webpack_require_266069__.n(get);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js\r\nvar toConsumableArray = __nested_webpack_require_266069__(33);\r\nvar toConsumableArray_default = /*#__PURE__*/__nested_webpack_require_266069__.n(toConsumableArray);\r\n\r\n// CONCATENATED MODULE: ./src/reader/code_39_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction code_39_reader_createSuper(Derived) { var hasNativeReflectConstruct = code_39_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction code_39_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n/* eslint-disable class-methods-use-this */\r\n\r\n\r\nvar ALPHABETH_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%';\r\nvar code_39_reader_ALPHABET = new Uint16Array(toConsumableArray_default()(ALPHABETH_STRING).map(function (_char) {\r\n  return _char.charCodeAt(0);\r\n}));\r\nvar code_39_reader_CHARACTER_ENCODINGS = new Uint16Array([0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, 0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C, 0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016, 0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x094, 0x0A8, 0x0A2, 0x08A, 0x02A]);\r\nvar ASTERISK = 0x094;\r\n\r\nvar code_39_reader_Code39Reader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(Code39Reader, _BarcodeReader);\r\n\r\n  var _super = code_39_reader_createSuper(Code39Reader);\r\n\r\n  function Code39Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, Code39Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'code_39');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(Code39Reader, [{\r\n    key: \"_findStart\",\r\n    value: function _findStart() {\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var patternStart = offset;\r\n      var counter = new Uint16Array([0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n      var counterPos = 0;\r\n      var isWhite = false;\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        // eslint-disable-next-line no-bitwise\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            // find start pattern\r\n            if (this._toPattern(counter) === ASTERISK) {\r\n              var whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\r\n\r\n              if (this._matchRange(whiteSpaceMustStart, patternStart, 0)) {\r\n                return {\r\n                  start: patternStart,\r\n                  end: i\r\n                };\r\n              }\r\n            }\r\n\r\n            patternStart += counter[0] + counter[1];\r\n\r\n            for (var j = 0; j < 7; j++) {\r\n              counter[j] = counter[j + 2];\r\n            }\r\n\r\n            counter[7] = 0;\r\n            counter[8] = 0;\r\n            counterPos--;\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_toPattern\",\r\n    value: function _toPattern(counters) {\r\n      var numCounters = counters.length;\r\n      var maxNarrowWidth = 0;\r\n      var numWideBars = numCounters;\r\n      var wideBarWidth = 0;\r\n\r\n      while (numWideBars > 3) {\r\n        maxNarrowWidth = this._findNextWidth(counters, maxNarrowWidth);\r\n        numWideBars = 0;\r\n        var pattern = 0;\r\n\r\n        for (var i = 0; i < numCounters; i++) {\r\n          if (counters[i] > maxNarrowWidth) {\r\n            // eslint-disable-next-line no-bitwise\r\n            pattern |= 1 << numCounters - 1 - i;\r\n            numWideBars++;\r\n            wideBarWidth += counters[i];\r\n          }\r\n        }\r\n\r\n        if (numWideBars === 3) {\r\n          for (var _i = 0; _i < numCounters && numWideBars > 0; _i++) {\r\n            if (counters[_i] > maxNarrowWidth) {\r\n              numWideBars--;\r\n\r\n              if (counters[_i] * 2 >= wideBarWidth) {\r\n                return -1;\r\n              }\r\n            }\r\n          }\r\n\r\n          return pattern;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n  }, {\r\n    key: \"_findNextWidth\",\r\n    value: function _findNextWidth(counters, current) {\r\n      var minWidth = Number.MAX_VALUE;\r\n\r\n      for (var i = 0; i < counters.length; i++) {\r\n        if (counters[i] < minWidth && counters[i] > current) {\r\n          minWidth = counters[i];\r\n        }\r\n      }\r\n\r\n      return minWidth;\r\n    }\r\n  }, {\r\n    key: \"_patternToChar\",\r\n    value: function _patternToChar(pattern) {\r\n      for (var i = 0; i < code_39_reader_CHARACTER_ENCODINGS.length; i++) {\r\n        if (code_39_reader_CHARACTER_ENCODINGS[i] === pattern) {\r\n          return String.fromCharCode(code_39_reader_ALPHABET[i]);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_verifyTrailingWhitespace\",\r\n    value: function _verifyTrailingWhitespace(lastStart, nextStart, counters) {\r\n      var patternSize = array_helper[\"a\" /* default */].sum(counters);\r\n      var trailingWhitespaceEnd = nextStart - lastStart - patternSize;\r\n\r\n      if (trailingWhitespaceEnd * 3 >= patternSize) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode() {\r\n      var counters = new Uint16Array([0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n      var result = [];\r\n\r\n      var start = this._findStart();\r\n\r\n      if (!start) {\r\n        return null;\r\n      }\r\n\r\n      var nextStart = this._nextSet(this._row, start.end);\r\n\r\n      var decodedChar;\r\n      var lastStart;\r\n\r\n      do {\r\n        counters = this._toCounters(nextStart, counters);\r\n\r\n        var pattern = this._toPattern(counters);\r\n\r\n        if (pattern < 0) {\r\n          return null;\r\n        }\r\n\r\n        decodedChar = this._patternToChar(pattern);\r\n\r\n        if (decodedChar === null) {\r\n          return null;\r\n        }\r\n\r\n        result.push(decodedChar);\r\n        lastStart = nextStart;\r\n        nextStart += array_helper[\"a\" /* default */].sum(counters);\r\n        nextStart = this._nextSet(this._row, nextStart);\r\n      } while (decodedChar !== '*');\r\n\r\n      result.pop();\r\n\r\n      if (!result.length) {\r\n        return null;\r\n      }\r\n\r\n      if (!this._verifyTrailingWhitespace(lastStart, nextStart, counters)) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        code: result.join(''),\r\n        start: start.start,\r\n        end: nextStart,\r\n        startInfo: start,\r\n        decodedCodes: result,\r\n        format: this.FORMAT\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return Code39Reader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var code_39_reader = (code_39_reader_Code39Reader);\r\n// CONCATENATED MODULE: ./src/reader/code_32_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction code_32_reader_createSuper(Derived) { var hasNativeReflectConstruct = code_32_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction code_32_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\nvar patterns = {\r\n  AEIO: /[AEIO]/g,\r\n  AZ09: /[A-Z0-9]/\r\n};\r\nvar code32set = '0123456789BCDFGHJKLMNPQRSTUVWXYZ';\r\n\r\nvar code_32_reader_Code32Reader = /*#__PURE__*/function (_Code39Reader) {\r\n  inherits_default()(Code32Reader, _Code39Reader);\r\n\r\n  var _super = code_32_reader_createSuper(Code32Reader);\r\n\r\n  function Code32Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, Code32Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'code_32_reader');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(Code32Reader, [{\r\n    key: \"_decodeCode32\",\r\n    value: function _decodeCode32(code) {\r\n      if (/[^0-9BCDFGHJKLMNPQRSTUVWXYZ]/.test(code)) {\r\n        return null;\r\n      }\r\n\r\n      var res = 0;\r\n\r\n      for (var i = 0; i < code.length; i++) {\r\n        res = res * 32 + code32set.indexOf(code[i]);\r\n      }\r\n\r\n      var code32 = \"\".concat(res);\r\n\r\n      if (code32.length < 9) {\r\n        code32 = ('000000000' + code32).slice(-9);\r\n      }\r\n\r\n      return 'A' + code32;\r\n    } // TODO (this was todo in original repo, no text was there. sorry.)\r\n\r\n  }, {\r\n    key: \"_checkChecksum\",\r\n    value: function _checkChecksum(code) {\r\n      return !!code;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode() {\r\n      var result = get_default()(getPrototypeOf_default()(Code32Reader.prototype), \"decode\", this).call(this);\r\n\r\n      if (!result) {\r\n        return null;\r\n      }\r\n\r\n      var code = result.code;\r\n\r\n      if (!code) {\r\n        return null;\r\n      }\r\n\r\n      code = code.replace(patterns.AEIO, '');\r\n\r\n      if (!this._checkChecksum(code)) {\r\n        return null;\r\n      }\r\n\r\n      var code32 = this._decodeCode32(code);\r\n\r\n      if (!code32) {\r\n        return null;\r\n      }\r\n\r\n      result.code = code32;\r\n      return result;\r\n    }\r\n  }]);\r\n\r\n  return Code32Reader;\r\n}(code_39_reader);\r\n\r\n/* harmony default export */ var code_32_reader = (code_32_reader_Code32Reader);\r\n// CONCATENATED MODULE: ./src/reader/code_39_vin_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction code_39_vin_reader_createSuper(Derived) { var hasNativeReflectConstruct = code_39_vin_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction code_39_vin_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n/* eslint-disable class-methods-use-this */\r\n\r\nvar code_39_vin_reader_patterns = {\r\n  IOQ: /[IOQ]/g,\r\n  AZ09: /[A-Z0-9]{17}/\r\n};\r\n\r\nvar code_39_vin_reader_Code39VINReader = /*#__PURE__*/function (_Code39Reader) {\r\n  inherits_default()(Code39VINReader, _Code39Reader);\r\n\r\n  var _super = code_39_vin_reader_createSuper(Code39VINReader);\r\n\r\n  function Code39VINReader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, Code39VINReader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'code_39_vin');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(Code39VINReader, [{\r\n    key: \"_checkChecksum\",\r\n    value: // TODO (this was todo in original repo, no text was there. sorry.)\r\n    function _checkChecksum(code) {\r\n      return !!code;\r\n    } // Cribbed from:\r\n    // https://github.com/zxing/zxing/blob/master/core/src/main/java/com/google/zxing/client/result/VINResultParser.java\r\n\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode() {\r\n      var result = get_default()(getPrototypeOf_default()(Code39VINReader.prototype), \"decode\", this).call(this);\r\n\r\n      if (!result) {\r\n        return null;\r\n      }\r\n\r\n      var code = result.code;\r\n\r\n      if (!code) {\r\n        return null;\r\n      }\r\n\r\n      code = code.replace(code_39_vin_reader_patterns.IOQ, '');\r\n\r\n      if (!code.match(code_39_vin_reader_patterns.AZ09)) {\r\n        if (true) {\r\n          console.log('Failed AZ09 pattern code:', code);\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      if (!this._checkChecksum(code)) {\r\n        return null;\r\n      }\r\n\r\n      result.code = code;\r\n      return result;\r\n    }\r\n  }]);\r\n\r\n  return Code39VINReader;\r\n}(code_39_reader);\r\n\r\n/* harmony default export */ var code_39_vin_reader = (code_39_vin_reader_Code39VINReader);\r\n// CONCATENATED MODULE: ./src/reader/code_93_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction code_93_reader_createSuper(Derived) { var hasNativeReflectConstruct = code_93_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction code_93_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n\r\nvar code_93_reader_ALPHABETH_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*';\r\nvar code_93_reader_ALPHABET = new Uint16Array(toConsumableArray_default()(code_93_reader_ALPHABETH_STRING).map(function (_char) {\r\n  return _char.charCodeAt(0);\r\n}));\r\nvar code_93_reader_CHARACTER_ENCODINGS = new Uint16Array([0x114, 0x148, 0x144, 0x142, 0x128, 0x124, 0x122, 0x150, 0x112, 0x10A, 0x1A8, 0x1A4, 0x1A2, 0x194, 0x192, 0x18A, 0x168, 0x164, 0x162, 0x134, 0x11A, 0x158, 0x14C, 0x146, 0x12C, 0x116, 0x1B4, 0x1B2, 0x1AC, 0x1A6, 0x196, 0x19A, 0x16C, 0x166, 0x136, 0x13A, 0x12E, 0x1D4, 0x1D2, 0x1CA, 0x16E, 0x176, 0x1AE, 0x126, 0x1DA, 0x1D6, 0x132, 0x15E]);\r\nvar code_93_reader_ASTERISK = 0x15E;\r\n\r\nvar code_93_reader_Code93Reader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(Code93Reader, _BarcodeReader);\r\n\r\n  var _super = code_93_reader_createSuper(Code93Reader);\r\n\r\n  function Code93Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, Code93Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'code_93');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(Code93Reader, [{\r\n    key: \"_patternToChar\",\r\n    value: function _patternToChar(pattern) {\r\n      for (var i = 0; i < code_93_reader_CHARACTER_ENCODINGS.length; i++) {\r\n        if (code_93_reader_CHARACTER_ENCODINGS[i] === pattern) {\r\n          return String.fromCharCode(code_93_reader_ALPHABET[i]);\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_toPattern\",\r\n    value: function _toPattern(counters) {\r\n      var numCounters = counters.length;\r\n      var sum = counters.reduce(function (prev, next) {\r\n        return prev + next;\r\n      }, 0);\r\n      var pattern = 0;\r\n\r\n      for (var i = 0; i < numCounters; i++) {\r\n        var normalized = Math.round(counters[i] * 9 / sum);\r\n\r\n        if (normalized < 1 || normalized > 4) {\r\n          return -1;\r\n        }\r\n\r\n        if ((i & 1) === 0) {\r\n          for (var j = 0; j < normalized; j++) {\r\n            pattern = pattern << 1 | 1;\r\n          }\r\n        } else {\r\n          pattern <<= normalized;\r\n        }\r\n      }\r\n\r\n      return pattern;\r\n    }\r\n  }, {\r\n    key: \"_findStart\",\r\n    value: function _findStart() {\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var patternStart = offset;\r\n      var counter = new Uint16Array([0, 0, 0, 0, 0, 0]);\r\n      var counterPos = 0;\r\n      var isWhite = false;\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            // find start pattern\r\n            if (this._toPattern(counter) === code_93_reader_ASTERISK) {\r\n              var whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\r\n\r\n              if (this._matchRange(whiteSpaceMustStart, patternStart, 0)) {\r\n                return {\r\n                  start: patternStart,\r\n                  end: i\r\n                };\r\n              }\r\n            }\r\n\r\n            patternStart += counter[0] + counter[1];\r\n\r\n            for (var j = 0; j < 4; j++) {\r\n              counter[j] = counter[j + 2];\r\n            }\r\n\r\n            counter[4] = 0;\r\n            counter[5] = 0;\r\n            counterPos--;\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_verifyEnd\",\r\n    value: function _verifyEnd(lastStart, nextStart) {\r\n      if (lastStart === nextStart || !this._row[nextStart]) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  }, {\r\n    key: \"_decodeExtended\",\r\n    value: function _decodeExtended(charArray) {\r\n      var length = charArray.length;\r\n      var result = [];\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        var _char2 = charArray[i];\r\n\r\n        if (_char2 >= 'a' && _char2 <= 'd') {\r\n          if (i > length - 2) {\r\n            return null;\r\n          }\r\n\r\n          var nextChar = charArray[++i];\r\n          var nextCharCode = nextChar.charCodeAt(0);\r\n          var decodedChar = void 0;\r\n\r\n          switch (_char2) {\r\n            case 'a':\r\n              if (nextChar >= 'A' && nextChar <= 'Z') {\r\n                decodedChar = String.fromCharCode(nextCharCode - 64);\r\n              } else {\r\n                return null;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'b':\r\n              if (nextChar >= 'A' && nextChar <= 'E') {\r\n                decodedChar = String.fromCharCode(nextCharCode - 38);\r\n              } else if (nextChar >= 'F' && nextChar <= 'J') {\r\n                decodedChar = String.fromCharCode(nextCharCode - 11);\r\n              } else if (nextChar >= 'K' && nextChar <= 'O') {\r\n                decodedChar = String.fromCharCode(nextCharCode + 16);\r\n              } else if (nextChar >= 'P' && nextChar <= 'S') {\r\n                decodedChar = String.fromCharCode(nextCharCode + 43);\r\n              } else if (nextChar >= 'T' && nextChar <= 'Z') {\r\n                decodedChar = String.fromCharCode(127);\r\n              } else {\r\n                return null;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'c':\r\n              if (nextChar >= 'A' && nextChar <= 'O') {\r\n                decodedChar = String.fromCharCode(nextCharCode - 32);\r\n              } else if (nextChar === 'Z') {\r\n                decodedChar = ':';\r\n              } else {\r\n                return null;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'd':\r\n              if (nextChar >= 'A' && nextChar <= 'Z') {\r\n                decodedChar = String.fromCharCode(nextCharCode + 32);\r\n              } else {\r\n                return null;\r\n              }\r\n\r\n              break;\r\n\r\n            default:\r\n              console.warn('* code_93_reader _decodeExtended hit default case, this may be an error', decodedChar);\r\n              return null;\r\n          }\r\n\r\n          result.push(decodedChar);\r\n        } else {\r\n          result.push(_char2);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }, {\r\n    key: \"_matchCheckChar\",\r\n    value: function _matchCheckChar(charArray, index, maxWeight) {\r\n      var arrayToCheck = charArray.slice(0, index);\r\n      var length = arrayToCheck.length;\r\n      var weightedSums = arrayToCheck.reduce(function (sum, _char3, i) {\r\n        var weight = (i * -1 + (length - 1)) % maxWeight + 1;\r\n        var value = code_93_reader_ALPHABET.indexOf(_char3.charCodeAt(0));\r\n        return sum + weight * value;\r\n      }, 0);\r\n      var checkChar = code_93_reader_ALPHABET[weightedSums % 47];\r\n      return checkChar === charArray[index].charCodeAt(0);\r\n    }\r\n  }, {\r\n    key: \"_verifyChecksums\",\r\n    value: function _verifyChecksums(charArray) {\r\n      return this._matchCheckChar(charArray, charArray.length - 2, 20) && this._matchCheckChar(charArray, charArray.length - 1, 15);\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      start = this._findStart();\r\n\r\n      if (!start) {\r\n        return null;\r\n      }\r\n\r\n      var counters = new Uint16Array([0, 0, 0, 0, 0, 0]);\r\n      var result = [];\r\n\r\n      var nextStart = this._nextSet(this._row, start.end);\r\n\r\n      var lastStart;\r\n      var decodedChar;\r\n\r\n      do {\r\n        counters = this._toCounters(nextStart, counters);\r\n\r\n        var pattern = this._toPattern(counters);\r\n\r\n        if (pattern < 0) {\r\n          return null;\r\n        }\r\n\r\n        decodedChar = this._patternToChar(pattern);\r\n\r\n        if (decodedChar === null) {\r\n          return null;\r\n        }\r\n\r\n        result.push(decodedChar);\r\n        lastStart = nextStart;\r\n        nextStart += array_helper[\"a\" /* default */].sum(counters);\r\n        nextStart = this._nextSet(this._row, nextStart);\r\n      } while (decodedChar !== '*');\r\n\r\n      result.pop();\r\n\r\n      if (!result.length) {\r\n        return null;\r\n      }\r\n\r\n      if (!this._verifyEnd(lastStart, nextStart)) {\r\n        return null;\r\n      }\r\n\r\n      if (!this._verifyChecksums(result)) {\r\n        return null;\r\n      }\r\n\r\n      result = result.slice(0, result.length - 2); // yes, this is an assign inside an if.\r\n\r\n      if ((result = this._decodeExtended(result)) === null) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        code: result.join(''),\r\n        start: start.start,\r\n        end: nextStart,\r\n        startInfo: start,\r\n        decodedCodes: result,\r\n        format: this.FORMAT\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return Code93Reader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var code_93_reader = (code_93_reader_Code93Reader);\r\n// CONCATENATED MODULE: ./src/reader/ean_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nfunction ean_reader_createSuper(Derived) { var hasNativeReflectConstruct = ean_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction ean_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n // const CODE_L_START = 0;\r\n\r\nvar CODE_G_START = 10;\r\n\r\nvar ean_reader_START_PATTERN = [1, 1, 1];\r\nvar MIDDLE_PATTERN = [1, 1, 1, 1, 1];\r\n\r\nvar EXTENSION_START_PATTERN = [1, 1, 2];\r\nvar ean_reader_CODE_PATTERN = [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2], [1, 1, 2, 3], [1, 2, 2, 2], [2, 2, 1, 2], [1, 1, 4, 1], [2, 3, 1, 1], [1, 3, 2, 1], [4, 1, 1, 1], [2, 1, 3, 1], [3, 1, 2, 1], [2, 1, 1, 3]];\r\nvar CODE_FREQUENCY = [0, 11, 13, 14, 19, 25, 28, 21, 22, 26]; // const SINGLE_CODE_ERROR = 0.70;\r\n\r\nvar AVG_CODE_ERROR = 0.48;\r\n\r\nvar ean_reader_EANReader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(EANReader, _BarcodeReader);\r\n\r\n  var _super = ean_reader_createSuper(EANReader);\r\n\r\n  // TODO: does this need to be in the class?\r\n  function EANReader(config, supplements) {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, EANReader);\r\n\r\n    _this = _super.call(this, merge_default()({\r\n      supplements: []\r\n    }, config), supplements);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'ean_13');\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.70);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_PATTERN\", [1, 1, 1]);\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(EANReader, [{\r\n    key: \"_findPattern\",\r\n    value: function _findPattern(pattern, offset, isWhite, tryHarder) {\r\n      var counter = new Array(pattern.length).fill(0);\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        start: 0,\r\n        end: 0\r\n      };\r\n      var epsilon = AVG_CODE_ERROR; // console.warn('* findPattern', pattern, offset, isWhite, tryHarder, epsilon);\r\n\r\n      var counterPos = 0;\r\n\r\n      if (!offset) {\r\n        offset = this._nextSet(this._row);\r\n      }\r\n\r\n      var found = false;\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        // console.warn(`* loop i=${offset} len=${this._row.length} isWhite=${isWhite} counterPos=${counterPos}`);\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos] += 1;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            var error = this._matchPattern(counter, pattern); // console.warn('* matchPattern', error, counter, pattern);\r\n\r\n\r\n            if (error < epsilon && bestMatch.error && error < bestMatch.error) {\r\n              found = true;\r\n              bestMatch.error = error;\r\n              bestMatch.start = i - counter.reduce(function (sum, value) {\r\n                return sum + value;\r\n              }, 0);\r\n              bestMatch.end = i; // console.warn('* return bestMatch', JSON.stringify(bestMatch));\r\n\r\n              return bestMatch;\r\n            }\r\n\r\n            if (tryHarder) {\r\n              for (var j = 0; j < counter.length - 2; j++) {\r\n                counter[j] = counter[j + 2];\r\n              }\r\n\r\n              counter[counter.length - 2] = 0;\r\n              counter[counter.length - 1] = 0;\r\n              counterPos--;\r\n            }\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      if (found) {// console.warn('* return bestMatch', JSON.stringify(bestMatch));\r\n      } else {// console.warn('* return null');\r\n      }\r\n\r\n      return found ? bestMatch : null;\r\n    } // TODO: findPattern and decodeCode appear to share quite similar code, can it be reduced?\r\n\r\n  }, {\r\n    key: \"_decodeCode\",\r\n    value: function _decodeCode(start, coderange) {\r\n      // console.warn('* decodeCode', start, coderange);\r\n      var counter = [0, 0, 0, 0];\r\n      var offset = start;\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        code: -1,\r\n        start: start,\r\n        end: start\r\n      };\r\n      var epsilon = AVG_CODE_ERROR;\r\n      var isWhite = !this._row[offset];\r\n      var counterPos = 0;\r\n\r\n      if (!coderange) {\r\n        // console.warn('* decodeCode before length');\r\n        coderange = ean_reader_CODE_PATTERN.length; // console.warn('* decodeCode after length');\r\n      }\r\n\r\n      var found = false;\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            for (var code = 0; code < coderange; code++) {\r\n              var error = this._matchPattern(counter, ean_reader_CODE_PATTERN[code]);\r\n\r\n              bestMatch.end = i;\r\n\r\n              if (error < bestMatch.error) {\r\n                bestMatch.code = code;\r\n                bestMatch.error = error;\r\n              }\r\n            }\r\n\r\n            if (bestMatch.error > epsilon) {\r\n              // console.warn('* return null');\r\n              return null;\r\n            } // console.warn('* return bestMatch', JSON.stringify(bestMatch));\r\n\r\n\r\n            return bestMatch;\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return found ? bestMatch : null;\r\n    }\r\n  }, {\r\n    key: \"_findStart\",\r\n    value: function _findStart() {\r\n      // console.warn('* findStart');\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var startInfo = null;\r\n\r\n      while (!startInfo) {\r\n        startInfo = this._findPattern(ean_reader_START_PATTERN, offset, false, true); // console.warn('* startInfo=', JSON.stringify(startInfo));\r\n\r\n        if (!startInfo) {\r\n          return null;\r\n        }\r\n\r\n        var leadingWhitespaceStart = startInfo.start - (startInfo.end - startInfo.start);\r\n\r\n        if (leadingWhitespaceStart >= 0) {\r\n          if (this._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\r\n            // console.warn('* returning startInfo');\r\n            return startInfo;\r\n          }\r\n        }\r\n\r\n        offset = startInfo.end;\r\n        startInfo = null;\r\n      } // console.warn('* returning null');\r\n\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_calculateFirstDigit\",\r\n    value: function _calculateFirstDigit(codeFrequency) {\r\n      // console.warn('* calculateFirstDigit', codeFrequency);\r\n      for (var i = 0; i < CODE_FREQUENCY.length; i++) {\r\n        if (codeFrequency === CODE_FREQUENCY[i]) {\r\n          // console.warn('* returning', i);\r\n          return i;\r\n        }\r\n      } // console.warn('* return null');\r\n\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_decodePayload\",\r\n    value: function _decodePayload(inCode, result, decodedCodes) {\r\n      // console.warn('* decodePayload', inCode, result, decodedCodes);\r\n      var outCode = _objectSpread({}, inCode);\r\n\r\n      var codeFrequency = 0x0;\r\n\r\n      for (var i = 0; i < 6; i++) {\r\n        outCode = this._decodeCode(outCode.end); // console.warn('* decodeCode=', outCode);\r\n\r\n        if (!outCode) {\r\n          // console.warn('* return null');\r\n          return null;\r\n        }\r\n\r\n        if (outCode.code >= CODE_G_START) {\r\n          outCode.code -= CODE_G_START;\r\n          codeFrequency |= 1 << 5 - i;\r\n        } else {\r\n          codeFrequency |= 0 << 5 - i;\r\n        }\r\n\r\n        result.push(outCode.code);\r\n        decodedCodes.push(outCode);\r\n      }\r\n\r\n      var firstDigit = this._calculateFirstDigit(codeFrequency); // console.warn('* firstDigit=', firstDigit);\r\n\r\n\r\n      if (firstDigit === null) {\r\n        // console.warn('* return null');\r\n        return null;\r\n      }\r\n\r\n      result.unshift(firstDigit);\r\n\r\n      var middlePattern = this._findPattern(MIDDLE_PATTERN, outCode.end, true, false); // console.warn('* findPattern=', JSON.stringify(middlePattern));\r\n\r\n\r\n      if (middlePattern === null || !middlePattern.end) {\r\n        // console.warn('* return null');\r\n        return null;\r\n      }\r\n\r\n      decodedCodes.push(middlePattern);\r\n\r\n      for (var _i = 0; _i < 6; _i++) {\r\n        middlePattern = this._decodeCode(middlePattern.end, CODE_G_START); // console.warn('* decodeCode=', JSON.stringify(middlePattern));\r\n\r\n        if (!middlePattern) {\r\n          // console.warn('* return null');\r\n          return null;\r\n        }\r\n\r\n        decodedCodes.push(middlePattern);\r\n        result.push(middlePattern.code);\r\n      } // console.warn('* end code=', JSON.stringify(middlePattern));\r\n      // console.warn('* end result=', JSON.stringify(result));\r\n      // console.warn('* end decodedCodes=', decodedCodes);\r\n\r\n\r\n      return middlePattern;\r\n    }\r\n  }, {\r\n    key: \"_verifyTrailingWhitespace\",\r\n    value: function _verifyTrailingWhitespace(endInfo) {\r\n      // console.warn('* verifyTrailingWhitespace', JSON.stringify(endInfo));\r\n      var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start);\r\n\r\n      if (trailingWhitespaceEnd < this._row.length) {\r\n        if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n          // console.warn('* returning', JSON.stringify(endInfo));\r\n          return endInfo;\r\n        }\r\n      } // console.warn('* return null');\r\n\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_findEnd\",\r\n    value: function _findEnd(offset, isWhite) {\r\n      // console.warn('* findEnd', offset, isWhite);\r\n      var endInfo = this._findPattern(this.STOP_PATTERN, offset, isWhite, false);\r\n\r\n      return endInfo !== null ? this._verifyTrailingWhitespace(endInfo) : null;\r\n    }\r\n  }, {\r\n    key: \"_checksum\",\r\n    value: function _checksum(result) {\r\n      // console.warn('* _checksum', result);\r\n      var sum = 0;\r\n\r\n      for (var i = result.length - 2; i >= 0; i -= 2) {\r\n        sum += result[i];\r\n      }\r\n\r\n      sum *= 3;\r\n\r\n      for (var _i2 = result.length - 1; _i2 >= 0; _i2 -= 2) {\r\n        sum += result[_i2];\r\n      } // console.warn('* end checksum', sum % 10 === 0);\r\n\r\n\r\n      return sum % 10 === 0;\r\n    }\r\n  }, {\r\n    key: \"_decodeExtensions\",\r\n    value: function _decodeExtensions(offset) {\r\n      var start = this._nextSet(this._row, offset);\r\n\r\n      var startInfo = this._findPattern(EXTENSION_START_PATTERN, start, false, false);\r\n\r\n      if (startInfo === null) {\r\n        return null;\r\n      } // console.warn('* decodeExtensions', this.supplements);\r\n      // console.warn('* there are ', this.supplements.length, ' supplements');\r\n\r\n\r\n      for (var i = 0; i < this.supplements.length; i++) {\r\n        // console.warn('* extensions loop', i, this.supplements[i], this.supplements[i]._decode);\r\n        try {\r\n          var result = this.supplements[i].decode(this._row, startInfo.end); // console.warn('* decode result=', result);\r\n\r\n          if (result !== null) {\r\n            return {\r\n              code: result.code,\r\n              start: start,\r\n              startInfo: startInfo,\r\n              end: result.end,\r\n              decodedCodes: result.decodedCodes,\r\n              format: this.supplements[i].FORMAT\r\n            };\r\n          }\r\n        } catch (err) {\r\n          console.error('* decodeExtensions error in ', this.supplements[i], ': ', err);\r\n        }\r\n      } // console.warn('* end decodeExtensions');\r\n\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      // console.warn('* decode', row);\r\n      // console.warn('* decode', start);\r\n      var result = new Array();\r\n      var decodedCodes = new Array();\r\n      var resultInfo = {};\r\n\r\n      var startInfo = this._findStart();\r\n\r\n      if (!startInfo) {\r\n        return null;\r\n      }\r\n\r\n      var code = {\r\n        start: startInfo.start,\r\n        end: startInfo.end\r\n      };\r\n      decodedCodes.push(code);\r\n      code = this._decodePayload(code, result, decodedCodes);\r\n\r\n      if (!code) {\r\n        return null;\r\n      }\r\n\r\n      code = this._findEnd(code.end, false);\r\n\r\n      if (!code) {\r\n        return null;\r\n      }\r\n\r\n      decodedCodes.push(code); // Checksum\r\n\r\n      if (!this._checksum(result)) {\r\n        return null;\r\n      } // console.warn('* this.supplements=', this.supplements);\r\n\r\n\r\n      if (this.supplements.length > 0) {\r\n        var supplement = this._decodeExtensions(code.end); // console.warn('* decodeExtensions returns', supplement);\r\n\r\n\r\n        if (!supplement) {\r\n          return null;\r\n        }\r\n\r\n        if (!supplement.decodedCodes) {\r\n          return null;\r\n        }\r\n\r\n        var lastCode = supplement.decodedCodes[supplement.decodedCodes.length - 1];\r\n        var endInfo = {\r\n          start: lastCode.start + ((lastCode.end - lastCode.start) / 2 | 0),\r\n          end: lastCode.end\r\n        };\r\n\r\n        if (!this._verifyTrailingWhitespace(endInfo)) {\r\n          return null;\r\n        }\r\n\r\n        resultInfo = {\r\n          supplement: supplement,\r\n          code: result.join('') + supplement.code\r\n        };\r\n      }\r\n\r\n      return _objectSpread(_objectSpread({\r\n        code: result.join(''),\r\n        start: startInfo.start,\r\n        end: code.end,\r\n        startInfo: startInfo,\r\n        decodedCodes: decodedCodes\r\n      }, resultInfo), {}, {\r\n        format: this.FORMAT\r\n      });\r\n    }\r\n  }]);\r\n\r\n  return EANReader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var ean_reader = (ean_reader_EANReader);\r\n// CONCATENATED MODULE: ./src/reader/ean_2_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction ean_2_reader_createSuper(Derived) { var hasNativeReflectConstruct = ean_2_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction ean_2_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n\r\nvar ean_2_reader_EAN2Reader = /*#__PURE__*/function (_EANReader) {\r\n  inherits_default()(EAN2Reader, _EANReader);\r\n\r\n  var _super = ean_2_reader_createSuper(EAN2Reader);\r\n\r\n  function EAN2Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, EAN2Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'ean_2');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(EAN2Reader, [{\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      if (row) {\r\n        this._row = row;\r\n      }\r\n\r\n      var codeFrequency = 0;\r\n      var offset = start;\r\n      var end = this._row.length;\r\n      var result = [];\r\n      var decodedCodes = [];\r\n      var code = null;\r\n\r\n      if (offset === undefined) {\r\n        return null;\r\n      }\r\n\r\n      for (var i = 0; i < 2 && offset < end; i++) {\r\n        code = this._decodeCode(offset);\r\n\r\n        if (!code) {\r\n          return null;\r\n        }\r\n\r\n        decodedCodes.push(code);\r\n        result.push(code.code % 10);\r\n\r\n        if (code.code >= CODE_G_START) {\r\n          codeFrequency |= 1 << 1 - i;\r\n        }\r\n\r\n        if (i !== 1) {\r\n          offset = this._nextSet(this._row, code.end);\r\n          offset = this._nextUnset(this._row, offset);\r\n        }\r\n      }\r\n\r\n      if (result.length !== 2 || parseInt(result.join('')) % 4 !== codeFrequency) {\r\n        return null;\r\n      }\r\n\r\n      var startInfo = this._findStart();\r\n\r\n      return {\r\n        code: result.join(''),\r\n        decodedCodes: decodedCodes,\r\n        end: code.end,\r\n        format: this.FORMAT,\r\n        startInfo: startInfo,\r\n        start: startInfo.start\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return EAN2Reader;\r\n}(ean_reader);\r\n\r\n;\r\n/* harmony default export */ var ean_2_reader = (ean_2_reader_EAN2Reader);\r\n// CONCATENATED MODULE: ./src/reader/ean_5_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction ean_5_reader_createSuper(Derived) { var hasNativeReflectConstruct = ean_5_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction ean_5_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\nvar CHECK_DIGIT_ENCODINGS = [24, 20, 18, 17, 12, 6, 3, 10, 9, 5];\r\n\r\nfunction determineCheckDigit(codeFrequency) {\r\n  for (var i = 0; i < 10; i++) {\r\n    if (codeFrequency === CHECK_DIGIT_ENCODINGS[i]) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction extensionChecksum(result) {\r\n  var length = result.length;\r\n  var sum = 0;\r\n\r\n  for (var i = length - 2; i >= 0; i -= 2) {\r\n    sum += result[i];\r\n  }\r\n\r\n  sum *= 3;\r\n\r\n  for (var _i = length - 1; _i >= 0; _i -= 2) {\r\n    sum += result[_i];\r\n  }\r\n\r\n  sum *= 3;\r\n  return sum % 10;\r\n}\r\n\r\nvar ean_5_reader_EAN5Reader = /*#__PURE__*/function (_EANReader) {\r\n  inherits_default()(EAN5Reader, _EANReader);\r\n\r\n  var _super = ean_5_reader_createSuper(EAN5Reader);\r\n\r\n  function EAN5Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, EAN5Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'ean_5');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(EAN5Reader, [{\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      if (start === undefined) {\r\n        return null;\r\n      }\r\n\r\n      if (row) {\r\n        this._row = row;\r\n      }\r\n\r\n      var codeFrequency = 0;\r\n      var offset = start;\r\n      var end = this._row.length;\r\n      var code = null;\r\n      var result = [];\r\n      var decodedCodes = [];\r\n\r\n      for (var i = 0; i < 5 && offset < end; i++) {\r\n        code = this._decodeCode(offset);\r\n\r\n        if (!code) {\r\n          return null;\r\n        }\r\n\r\n        decodedCodes.push(code);\r\n        result.push(code.code % 10);\r\n\r\n        if (code.code >= CODE_G_START) {\r\n          codeFrequency |= 1 << 4 - i;\r\n        }\r\n\r\n        if (i !== 4) {\r\n          offset = this._nextSet(this._row, code.end);\r\n          offset = this._nextUnset(this._row, offset);\r\n        }\r\n      }\r\n\r\n      if (result.length !== 5) {\r\n        return null;\r\n      }\r\n\r\n      if (extensionChecksum(result) !== determineCheckDigit(codeFrequency)) {\r\n        return null;\r\n      }\r\n\r\n      var startInfo = this._findStart();\r\n\r\n      return {\r\n        code: result.join(''),\r\n        decodedCodes: decodedCodes,\r\n        end: code.end,\r\n        format: this.FORMAT,\r\n        startInfo: startInfo,\r\n        start: startInfo.start\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return EAN5Reader;\r\n}(ean_reader);\r\n\r\n;\r\n/* harmony default export */ var ean_5_reader = (ean_5_reader_EAN5Reader);\r\n// CONCATENATED MODULE: ./src/reader/ean_8_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction ean_8_reader_createSuper(Derived) { var hasNativeReflectConstruct = ean_8_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction ean_8_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n\r\nvar ean_8_reader_EAN8Reader = /*#__PURE__*/function (_EANReader) {\r\n  inherits_default()(EAN8Reader, _EANReader);\r\n\r\n  var _super = ean_8_reader_createSuper(EAN8Reader);\r\n\r\n  function EAN8Reader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, EAN8Reader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'ean_8');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(EAN8Reader, [{\r\n    key: \"_decodePayload\",\r\n    value: function _decodePayload(inCode, result, decodedCodes) {\r\n      var code = inCode;\r\n\r\n      for (var i = 0; i < 4; i++) {\r\n        code = this._decodeCode(code.end, CODE_G_START);\r\n\r\n        if (!code) {\r\n          return null;\r\n        }\r\n\r\n        result.push(code.code);\r\n        decodedCodes.push(code);\r\n      }\r\n\r\n      code = this._findPattern(MIDDLE_PATTERN, code.end, true, false);\r\n\r\n      if (code === null) {\r\n        return null;\r\n      }\r\n\r\n      decodedCodes.push(code);\r\n\r\n      for (var _i = 0; _i < 4; _i++) {\r\n        code = this._decodeCode(code.end, CODE_G_START);\r\n\r\n        if (!code) {\r\n          return null;\r\n        }\r\n\r\n        decodedCodes.push(code);\r\n        result.push(code.code);\r\n      }\r\n\r\n      return code;\r\n    }\r\n  }]);\r\n\r\n  return EAN8Reader;\r\n}(ean_reader);\r\n\r\n/* harmony default export */ var ean_8_reader = (ean_8_reader_EAN8Reader);\r\n// CONCATENATED MODULE: ./src/reader/i2of5_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction i2of5_reader_createSuper(Derived) { var hasNativeReflectConstruct = i2of5_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction i2of5_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n// TODO: i2of5_reader and 2of5_reader share very similar code, make use of that\r\n\r\n\r\nvar i2of5_reader_N = 1;\r\nvar i2of5_reader_W = 3;\r\n\r\nvar i2of5_reader_I2of5Reader = /*#__PURE__*/function (_BarcodeReader) {\r\n  inherits_default()(I2of5Reader, _BarcodeReader);\r\n\r\n  var _super = i2of5_reader_createSuper(I2of5Reader);\r\n\r\n  function I2of5Reader(opts) {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, I2of5Reader);\r\n\r\n    _this = _super.call(this, merge_default()({\r\n      normalizeBarSpaceWidth: false\r\n    }, opts));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"barSpaceRatio\", [1, 1]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"SINGLE_CODE_ERROR\", 0.78);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"AVG_CODE_ERROR\", 0.38);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"START_PATTERN\", [i2of5_reader_N, i2of5_reader_N, i2of5_reader_N, i2of5_reader_N]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_PATTERN\", [i2of5_reader_N, i2of5_reader_N, i2of5_reader_W]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_PATTERN\", [[i2of5_reader_N, i2of5_reader_N, i2of5_reader_W, i2of5_reader_W, i2of5_reader_N], [i2of5_reader_W, i2of5_reader_N, i2of5_reader_N, i2of5_reader_N, i2of5_reader_W], [i2of5_reader_N, i2of5_reader_W, i2of5_reader_N, i2of5_reader_N, i2of5_reader_W], [i2of5_reader_W, i2of5_reader_W, i2of5_reader_N, i2of5_reader_N, i2of5_reader_N], [i2of5_reader_N, i2of5_reader_N, i2of5_reader_W, i2of5_reader_N, i2of5_reader_W], [i2of5_reader_W, i2of5_reader_N, i2of5_reader_W, i2of5_reader_N, i2of5_reader_N], [i2of5_reader_N, i2of5_reader_W, i2of5_reader_W, i2of5_reader_N, i2of5_reader_N], [i2of5_reader_N, i2of5_reader_N, i2of5_reader_N, i2of5_reader_W, i2of5_reader_W], [i2of5_reader_W, i2of5_reader_N, i2of5_reader_N, i2of5_reader_W, i2of5_reader_N], [i2of5_reader_N, i2of5_reader_W, i2of5_reader_N, i2of5_reader_W, i2of5_reader_N]]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"MAX_CORRECTION_FACTOR\", 5);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'i2of5');\r\n\r\n    if (opts.normalizeBarSpaceWidth) {\r\n      _this.SINGLE_CODE_ERROR = 0.38;\r\n      _this.AVG_CODE_ERROR = 0.09;\r\n    }\r\n\r\n    _this.config = opts;\r\n    return possibleConstructorReturn_default()(_this, assertThisInitialized_default()(_this));\r\n  }\r\n\r\n  createClass_default()(I2of5Reader, [{\r\n    key: \"_matchPattern\",\r\n    value: function _matchPattern(counter, code) {\r\n      if (this.config.normalizeBarSpaceWidth) {\r\n        var counterSum = [0, 0];\r\n        var codeSum = [0, 0];\r\n        var correction = [0, 0];\r\n        var correctionRatio = this.MAX_CORRECTION_FACTOR;\r\n        var correctionRatioInverse = 1 / correctionRatio;\r\n\r\n        for (var i = 0; i < counter.length; i++) {\r\n          counterSum[i % 2] += counter[i];\r\n          codeSum[i % 2] += code[i];\r\n        }\r\n\r\n        correction[0] = codeSum[0] / counterSum[0];\r\n        correction[1] = codeSum[1] / counterSum[1];\r\n        correction[0] = Math.max(Math.min(correction[0], correctionRatio), correctionRatioInverse);\r\n        correction[1] = Math.max(Math.min(correction[1], correctionRatio), correctionRatioInverse);\r\n        this.barSpaceRatio = correction;\r\n\r\n        for (var _i = 0; _i < counter.length; _i++) {\r\n          counter[_i] *= this.barSpaceRatio[_i % 2];\r\n        }\r\n      }\r\n\r\n      return get_default()(getPrototypeOf_default()(I2of5Reader.prototype), \"_matchPattern\", this).call(this, counter, code);\r\n    }\r\n  }, {\r\n    key: \"_findPattern\",\r\n    value: function _findPattern(pattern, offset) {\r\n      var isWhite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n      var tryHarder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\r\n      var counter = new Array(pattern.length).fill(0);\r\n      var counterPos = 0;\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        start: 0,\r\n        end: 0\r\n      };\r\n      var epsilon = this.AVG_CODE_ERROR;\r\n      isWhite = isWhite || false;\r\n      tryHarder = tryHarder || false;\r\n\r\n      if (!offset) {\r\n        offset = this._nextSet(this._row);\r\n      }\r\n\r\n      for (var i = offset; i < this._row.length; i++) {\r\n        if (this._row[i] ^ (isWhite ? 1 : 0)) {\r\n          counter[counterPos]++;\r\n        } else {\r\n          if (counterPos === counter.length - 1) {\r\n            var sum = counter.reduce(function (prev, next) {\r\n              return prev + next;\r\n            }, 0);\r\n\r\n            var error = this._matchPattern(counter, pattern);\r\n\r\n            if (error < epsilon) {\r\n              bestMatch.error = error;\r\n              bestMatch.start = i - sum;\r\n              bestMatch.end = i;\r\n              return bestMatch;\r\n            }\r\n\r\n            if (tryHarder) {\r\n              for (var j = 0; j < counter.length - 2; j++) {\r\n                counter[j] = counter[j + 2];\r\n              }\r\n\r\n              counter[counter.length - 2] = 0;\r\n              counter[counter.length - 1] = 0;\r\n              counterPos--;\r\n            } else {\r\n              return null;\r\n            }\r\n          } else {\r\n            counterPos++;\r\n          }\r\n\r\n          counter[counterPos] = 1;\r\n          isWhite = !isWhite;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_findStart\",\r\n    value: function _findStart() {\r\n      var leadingWhitespaceStart = 0;\r\n\r\n      var offset = this._nextSet(this._row);\r\n\r\n      var startInfo = null;\r\n      var narrowBarWidth = 1;\r\n\r\n      while (!startInfo) {\r\n        startInfo = this._findPattern(this.START_PATTERN, offset, false, true);\r\n\r\n        if (!startInfo) {\r\n          return null;\r\n        }\r\n\r\n        narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / 4);\r\n        leadingWhitespaceStart = startInfo.start - narrowBarWidth * 10;\r\n\r\n        if (leadingWhitespaceStart >= 0) {\r\n          if (this._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\r\n            return startInfo;\r\n          }\r\n        }\r\n\r\n        offset = startInfo.end;\r\n        startInfo = null;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_verifyTrailingWhitespace\",\r\n    value: function _verifyTrailingWhitespace(endInfo) {\r\n      var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\r\n\r\n      if (trailingWhitespaceEnd < this._row.length) {\r\n        if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n          return endInfo;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_findEnd\",\r\n    value: function _findEnd() {\r\n      this._row.reverse();\r\n\r\n      var endInfo = this._findPattern(this.STOP_PATTERN);\r\n\r\n      this._row.reverse();\r\n\r\n      if (endInfo === null) {\r\n        return null;\r\n      } // reverse numbers\r\n\r\n\r\n      var tmp = endInfo.start;\r\n      endInfo.start = this._row.length - endInfo.end;\r\n      endInfo.end = this._row.length - tmp;\r\n      return endInfo !== null ? this._verifyTrailingWhitespace(endInfo) : null;\r\n    }\r\n  }, {\r\n    key: \"_decodePair\",\r\n    value: function _decodePair(counterPair) {\r\n      var codes = [];\r\n\r\n      for (var i = 0; i < counterPair.length; i++) {\r\n        var code = this._decodeCode(counterPair[i]);\r\n\r\n        if (!code) {\r\n          return null;\r\n        }\r\n\r\n        codes.push(code);\r\n      }\r\n\r\n      return codes;\r\n    }\r\n  }, {\r\n    key: \"_decodeCode\",\r\n    value: function _decodeCode(counter) {\r\n      var epsilon = this.AVG_CODE_ERROR;\r\n      var bestMatch = {\r\n        error: Number.MAX_VALUE,\r\n        code: -1,\r\n        start: 0,\r\n        end: 0\r\n      };\r\n\r\n      for (var code = 0; code < this.CODE_PATTERN.length; code++) {\r\n        var error = this._matchPattern(counter, this.CODE_PATTERN[code]);\r\n\r\n        if (error < bestMatch.error) {\r\n          bestMatch.code = code;\r\n          bestMatch.error = error;\r\n        }\r\n      }\r\n\r\n      if (bestMatch.error < epsilon) {\r\n        return bestMatch;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }, {\r\n    key: \"_decodePayload\",\r\n    value: function _decodePayload(counters, result, decodedCodes) {\r\n      var pos = 0;\r\n      var counterLength = counters.length;\r\n      var counterPair = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]];\r\n      var codes = null;\r\n\r\n      while (pos < counterLength) {\r\n        for (var i = 0; i < 5; i++) {\r\n          counterPair[0][i] = counters[pos] * this.barSpaceRatio[0];\r\n          counterPair[1][i] = counters[pos + 1] * this.barSpaceRatio[1];\r\n          pos += 2;\r\n        }\r\n\r\n        codes = this._decodePair(counterPair);\r\n\r\n        if (!codes) {\r\n          return null;\r\n        }\r\n\r\n        for (var _i2 = 0; _i2 < codes.length; _i2++) {\r\n          result.push(codes[_i2].code + '');\r\n          decodedCodes.push(codes[_i2]);\r\n        }\r\n      }\r\n\r\n      return codes;\r\n    }\r\n  }, {\r\n    key: \"_verifyCounterLength\",\r\n    value: function _verifyCounterLength(counters) {\r\n      return counters.length % 10 === 0;\r\n    }\r\n  }, {\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      var result = new Array();\r\n      var decodedCodes = new Array();\r\n\r\n      var startInfo = this._findStart();\r\n\r\n      if (!startInfo) {\r\n        return null;\r\n      }\r\n\r\n      decodedCodes.push(startInfo);\r\n\r\n      var endInfo = this._findEnd();\r\n\r\n      if (!endInfo) {\r\n        return null;\r\n      }\r\n\r\n      var counters = this._fillCounters(startInfo.end, endInfo.start, false);\r\n\r\n      if (!this._verifyCounterLength(counters)) {\r\n        return null;\r\n      }\r\n\r\n      var code = this._decodePayload(counters, result, decodedCodes);\r\n\r\n      if (!code) {\r\n        return null;\r\n      }\r\n\r\n      if (result.length % 2 !== 0 || result.length < 6) {\r\n        return null;\r\n      }\r\n\r\n      decodedCodes.push(endInfo);\r\n      return {\r\n        code: result.join(''),\r\n        start: startInfo.start,\r\n        end: endInfo.end,\r\n        startInfo: startInfo,\r\n        decodedCodes: decodedCodes,\r\n        format: this.FORMAT\r\n      };\r\n    }\r\n  }]);\r\n\r\n  return I2of5Reader;\r\n}(barcode_reader);\r\n\r\n/* harmony default export */ var i2of5_reader = (i2of5_reader_I2of5Reader);\r\n// CONCATENATED MODULE: ./src/reader/upc_e_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction upc_e_reader_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction upc_e_reader_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? upc_e_reader_ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : upc_e_reader_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nfunction upc_e_reader_createSuper(Derived) { var hasNativeReflectConstruct = upc_e_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction upc_e_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n\r\nvar upc_e_reader_UPCEReader = /*#__PURE__*/function (_EANReader) {\r\n  inherits_default()(UPCEReader, _EANReader);\r\n\r\n  var _super = upc_e_reader_createSuper(UPCEReader);\r\n\r\n  function UPCEReader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, UPCEReader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"CODE_FREQUENCY\", [[56, 52, 50, 49, 44, 38, 35, 42, 41, 37], [7, 11, 13, 14, 19, 25, 28, 21, 22, 26]]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"STOP_PATTERN\", [1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7]);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'upc_e');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(UPCEReader, [{\r\n    key: \"_decodePayload\",\r\n    value: function _decodePayload(inCode, result, decodedCodes) {\r\n      var outCode = upc_e_reader_objectSpread({}, inCode);\r\n\r\n      var codeFrequency = 0x0;\r\n\r\n      for (var i = 0; i < 6; i++) {\r\n        outCode = this._decodeCode(outCode.end);\r\n\r\n        if (!outCode) {\r\n          return null;\r\n        }\r\n\r\n        if (outCode.code >= CODE_G_START) {\r\n          outCode.code = outCode.code - CODE_G_START;\r\n          codeFrequency |= 1 << 5 - i;\r\n        }\r\n\r\n        result.push(outCode.code);\r\n        decodedCodes.push(outCode);\r\n      }\r\n\r\n      if (!this._determineParity(codeFrequency, result)) {\r\n        return null;\r\n      }\r\n\r\n      return outCode;\r\n    }\r\n  }, {\r\n    key: \"_determineParity\",\r\n    value: function _determineParity(codeFrequency, result) {\r\n      for (var nrSystem = 0; nrSystem < this.CODE_FREQUENCY.length; nrSystem++) {\r\n        for (var i = 0; i < this.CODE_FREQUENCY[nrSystem].length; i++) {\r\n          if (codeFrequency === this.CODE_FREQUENCY[nrSystem][i]) {\r\n            result.unshift(nrSystem);\r\n            result.push(i);\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }, {\r\n    key: \"_convertToUPCA\",\r\n    value: function _convertToUPCA(result) {\r\n      var upca = [result[0]];\r\n      var lastDigit = result[result.length - 2];\r\n\r\n      if (lastDigit <= 2) {\r\n        upca = upca.concat(result.slice(1, 3)).concat([lastDigit, 0, 0, 0, 0]).concat(result.slice(3, 6));\r\n      } else if (lastDigit === 3) {\r\n        upca = upca.concat(result.slice(1, 4)).concat([0, 0, 0, 0, 0]).concat(result.slice(4, 6));\r\n      } else if (lastDigit === 4) {\r\n        upca = upca.concat(result.slice(1, 5)).concat([0, 0, 0, 0, 0, result[5]]);\r\n      } else {\r\n        upca = upca.concat(result.slice(1, 6)).concat([0, 0, 0, 0, lastDigit]);\r\n      }\r\n\r\n      upca.push(result[result.length - 1]);\r\n      return upca;\r\n    }\r\n  }, {\r\n    key: \"_checksum\",\r\n    value: function _checksum(result) {\r\n      return get_default()(getPrototypeOf_default()(UPCEReader.prototype), \"_checksum\", this).call(this, this._convertToUPCA(result));\r\n    }\r\n  }, {\r\n    key: \"_findEnd\",\r\n    value: function _findEnd(offset, isWhite) {\r\n      return get_default()(getPrototypeOf_default()(UPCEReader.prototype), \"_findEnd\", this).call(this, offset, true);\r\n    }\r\n  }, {\r\n    key: \"_verifyTrailingWhitespace\",\r\n    value: function _verifyTrailingWhitespace(endInfo) {\r\n      var trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\r\n\r\n      if (trailingWhitespaceEnd < this._row.length) {\r\n        if (this._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\r\n          return endInfo;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }]);\r\n\r\n  return UPCEReader;\r\n}(ean_reader);\r\n\r\n/* harmony default export */ var upc_e_reader = (upc_e_reader_UPCEReader);\r\n// CONCATENATED MODULE: ./src/reader/upc_reader.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction upc_reader_createSuper(Derived) { var hasNativeReflectConstruct = upc_reader_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction upc_reader_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\n\r\n\r\nvar upc_reader_UPCReader = /*#__PURE__*/function (_EANReader) {\r\n  inherits_default()(UPCReader, _EANReader);\r\n\r\n  var _super = upc_reader_createSuper(UPCReader);\r\n\r\n  function UPCReader() {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, UPCReader);\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _super.call.apply(_super, [this].concat(args));\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"FORMAT\", 'upc_a');\r\n\r\n    return _this;\r\n  }\r\n\r\n  createClass_default()(UPCReader, [{\r\n    key: \"decode\",\r\n    value: function decode(row, start) {\r\n      var result = ean_reader.prototype.decode.call(this);\r\n\r\n      if (result && result.code && result.code.length === 13 && result.code.charAt(0) === '0') {\r\n        result.code = result.code.substring(1);\r\n        return result;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }]);\r\n\r\n  return UPCReader;\r\n}(ean_reader);\r\n\r\n/* harmony default export */ var upc_reader = (upc_reader_UPCReader);\r\n// CONCATENATED MODULE: ./src/decoder/bresenham.js\r\nvar Bresenham = {};\r\nvar Slope = {\r\n  DIR: {\r\n    UP: 1,\r\n    DOWN: -1\r\n  }\r\n};\r\n/**\r\n * Scans a line of the given image from point p1 to p2 and returns a result object containing\r\n * gray-scale values (0-255) of the underlying pixels in addition to the min\r\n * and max values.\r\n * @param {Object} imageWrapper\r\n * @param {Object} p1 The start point {x,y}\r\n * @param {Object} p2 The end point {x,y}\r\n * @returns {line, min, max}\r\n */\r\n\r\nBresenham.getBarcodeLine = function (imageWrapper, p1, p2) {\r\n  /* eslint-disable no-bitwise */\r\n  var x0 = p1.x | 0;\r\n  var y0 = p1.y | 0;\r\n  var x1 = p2.x | 0;\r\n  var y1 = p2.y | 0;\r\n  /* eslint-disable no-bitwise */\r\n\r\n  var steep = Math.abs(y1 - y0) > Math.abs(x1 - x0);\r\n  var error;\r\n  var y;\r\n  var tmp;\r\n  var x;\r\n  var line = [];\r\n  var imageData = imageWrapper.data;\r\n  var width = imageWrapper.size.x;\r\n  var val;\r\n  var min = 255;\r\n  var max = 0;\r\n\r\n  function read(a, b) {\r\n    val = imageData[b * width + a];\r\n    min = val < min ? val : min;\r\n    max = val > max ? val : max;\r\n    line.push(val);\r\n  }\r\n\r\n  if (steep) {\r\n    tmp = x0;\r\n    x0 = y0;\r\n    y0 = tmp;\r\n    tmp = x1;\r\n    x1 = y1;\r\n    y1 = tmp;\r\n  }\r\n\r\n  if (x0 > x1) {\r\n    tmp = x0;\r\n    x0 = x1;\r\n    x1 = tmp;\r\n    tmp = y0;\r\n    y0 = y1;\r\n    y1 = tmp;\r\n  }\r\n\r\n  var deltaX = x1 - x0;\r\n  var deltaY = Math.abs(y1 - y0);\r\n  error = deltaX / 2 | 0;\r\n  y = y0;\r\n  var yStep = y0 < y1 ? 1 : -1;\r\n\r\n  for (x = x0; x < x1; x++) {\r\n    if (steep) {\r\n      read(y, x);\r\n    } else {\r\n      read(x, y);\r\n    }\r\n\r\n    error -= deltaY;\r\n\r\n    if (error < 0) {\r\n      y += yStep;\r\n      error += deltaX;\r\n    }\r\n  }\r\n\r\n  return {\r\n    line: line,\r\n    min: min,\r\n    max: max\r\n  };\r\n};\r\n/**\r\n * Converts the result from getBarcodeLine into a binary representation\r\n * also considering the frequency and slope of the signal for more robust results\r\n * @param {Object} result {line, min, max}\r\n */\r\n\r\n\r\nBresenham.toBinaryLine = function (result) {\r\n  var min = result.min;\r\n  var max = result.max;\r\n  var line = result.line;\r\n  var slope;\r\n  var slope2;\r\n  var center = min + (max - min) / 2;\r\n  var extrema = [];\r\n  var currentDir;\r\n  var dir;\r\n  var threshold = (max - min) / 12;\r\n  var rThreshold = -threshold;\r\n  var i;\r\n  var j; // 1. find extrema\r\n\r\n  currentDir = line[0] > center ? Slope.DIR.UP : Slope.DIR.DOWN;\r\n  extrema.push({\r\n    pos: 0,\r\n    val: line[0]\r\n  });\r\n\r\n  for (i = 0; i < line.length - 2; i++) {\r\n    slope = line[i + 1] - line[i];\r\n    slope2 = line[i + 2] - line[i + 1];\r\n\r\n    if (slope + slope2 < rThreshold && line[i + 1] < center * 1.5) {\r\n      dir = Slope.DIR.DOWN;\r\n    } else if (slope + slope2 > threshold && line[i + 1] > center * 0.5) {\r\n      dir = Slope.DIR.UP;\r\n    } else {\r\n      dir = currentDir;\r\n    }\r\n\r\n    if (currentDir !== dir) {\r\n      extrema.push({\r\n        pos: i,\r\n        val: line[i]\r\n      });\r\n      currentDir = dir;\r\n    }\r\n  }\r\n\r\n  extrema.push({\r\n    pos: line.length,\r\n    val: line[line.length - 1]\r\n  });\r\n\r\n  for (j = extrema[0].pos; j < extrema[1].pos; j++) {\r\n    line[j] = line[j] > center ? 0 : 1;\r\n  } // iterate over extrema and convert to binary based on avg between minmax\r\n\r\n\r\n  for (i = 1; i < extrema.length - 1; i++) {\r\n    if (extrema[i + 1].val > extrema[i].val) {\r\n      threshold = extrema[i].val + (extrema[i + 1].val - extrema[i].val) / 3 * 2 | 0;\r\n    } else {\r\n      threshold = extrema[i + 1].val + (extrema[i].val - extrema[i + 1].val) / 3 | 0;\r\n    }\r\n\r\n    for (j = extrema[i].pos; j < extrema[i + 1].pos; j++) {\r\n      line[j] = line[j] > threshold ? 0 : 1;\r\n    }\r\n  }\r\n\r\n  return {\r\n    line: line,\r\n    threshold: threshold\r\n  };\r\n};\r\n/**\r\n * Used for development only\r\n */\r\n\r\n\r\nBresenham.debug = {\r\n  printFrequency: function printFrequency(line, canvas) {\r\n    var i;\r\n    var ctx = canvas.getContext('2d'); // eslint-disable-next-line no-param-reassign\r\n\r\n    canvas.width = line.length; // eslint-disable-next-line no-param-reassign\r\n\r\n    canvas.height = 256;\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = 'blue';\r\n\r\n    for (i = 0; i < line.length; i++) {\r\n      ctx.moveTo(i, 255);\r\n      ctx.lineTo(i, 255 - line[i]);\r\n    }\r\n\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  },\r\n  printPattern: function printPattern(line, canvas) {\r\n    var ctx = canvas.getContext('2d');\r\n    var i; // eslint-disable-next-line no-param-reassign\r\n\r\n    canvas.width = line.length;\r\n    ctx.fillColor = 'black';\r\n\r\n    for (i = 0; i < line.length; i++) {\r\n      if (line[i] === 1) {\r\n        ctx.fillRect(i, 0, 1, 100);\r\n      }\r\n    }\r\n  }\r\n};\r\n/* harmony default export */ var bresenham = (Bresenham);\r\n// CONCATENATED MODULE: ./src/decoder/barcode_decoder.js\r\n\r\n\r\n\r\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\r\n\r\n\r\n\r\n/* eslint-disable import/no-cycle */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar READERS = {\r\n  code_128_reader: code_128_reader,\r\n  ean_reader: ean_reader,\r\n  ean_5_reader: ean_5_reader,\r\n  ean_2_reader: ean_2_reader,\r\n  ean_8_reader: ean_8_reader,\r\n  code_39_reader: code_39_reader,\r\n  code_39_vin_reader: code_39_vin_reader,\r\n  codabar_reader: codabar_reader,\r\n  upc_reader: upc_reader,\r\n  upc_e_reader: upc_e_reader,\r\n  i2of5_reader: i2of5_reader,\r\n  '2of5_reader': _2of5_reader,\r\n  code_93_reader: code_93_reader,\r\n  code_32_reader: code_32_reader\r\n};\r\n/* harmony default export */ var barcode_decoder = ({\r\n  registerReader: function registerReader(name, reader) {\r\n    READERS[name] = reader;\r\n  },\r\n  create: function create(config, inputImageWrapper) {\r\n    var _canvas = {\r\n      ctx: {\r\n        frequency: null,\r\n        pattern: null,\r\n        overlay: null\r\n      },\r\n      dom: {\r\n        frequency: null,\r\n        pattern: null,\r\n        overlay: null\r\n      }\r\n    };\r\n    var _barcodeReaders = [];\r\n    initCanvas();\r\n    initReaders();\r\n    initConfig();\r\n\r\n    function initCanvas() {\r\n      if (  true && typeof document !== 'undefined') {\r\n        var $debug = document.querySelector('#debug.detection');\r\n        _canvas.dom.frequency = document.querySelector('canvas.frequency');\r\n\r\n        if (!_canvas.dom.frequency) {\r\n          _canvas.dom.frequency = document.createElement('canvas');\r\n          _canvas.dom.frequency.className = 'frequency';\r\n\r\n          if ($debug) {\r\n            $debug.appendChild(_canvas.dom.frequency);\r\n          }\r\n        }\r\n\r\n        _canvas.ctx.frequency = _canvas.dom.frequency.getContext('2d');\r\n        _canvas.dom.pattern = document.querySelector('canvas.patternBuffer');\r\n\r\n        if (!_canvas.dom.pattern) {\r\n          _canvas.dom.pattern = document.createElement('canvas');\r\n          _canvas.dom.pattern.className = 'patternBuffer';\r\n\r\n          if ($debug) {\r\n            $debug.appendChild(_canvas.dom.pattern);\r\n          }\r\n        }\r\n\r\n        _canvas.ctx.pattern = _canvas.dom.pattern.getContext('2d');\r\n        _canvas.dom.overlay = document.querySelector('canvas.drawingBuffer');\r\n\r\n        if (_canvas.dom.overlay) {\r\n          _canvas.ctx.overlay = _canvas.dom.overlay.getContext('2d');\r\n        }\r\n      }\r\n    }\r\n\r\n    function initReaders() {\r\n      config.readers.forEach(function (readerConfig) {\r\n        var reader;\r\n        var configuration = {};\r\n        var supplements = [];\r\n\r\n        if (typeof_default()(readerConfig) === 'object') {\r\n          reader = readerConfig.format;\r\n          configuration = readerConfig.config;\r\n        } else if (typeof readerConfig === 'string') {\r\n          reader = readerConfig;\r\n        }\r\n\r\n        if (true) {\r\n          console.log('Before registering reader: ', reader);\r\n        }\r\n\r\n        if (configuration.supplements) {\r\n          supplements = configuration.supplements.map(function (supplement) {\r\n            return new READERS[supplement]();\r\n          });\r\n        }\r\n\r\n        try {\r\n          var readerObj = new READERS[reader](configuration, supplements);\r\n\r\n          _barcodeReaders.push(readerObj);\r\n        } catch (err) {\r\n          console.error('* Error constructing reader ', reader, err);\r\n          throw err;\r\n        }\r\n      });\r\n\r\n      if (true) {\r\n        console.log(\"Registered Readers: \".concat(_barcodeReaders.map(function (reader) {\r\n          return JSON.stringify({\r\n            format: reader.FORMAT,\r\n            config: reader.config\r\n          });\r\n        }).join(', ')));\r\n      }\r\n    }\r\n\r\n    function initConfig() {\r\n      if (  true && typeof document !== 'undefined') {\r\n        var i;\r\n        var vis = [{\r\n          node: _canvas.dom.frequency,\r\n          prop: config.debug.showFrequency\r\n        }, {\r\n          node: _canvas.dom.pattern,\r\n          prop: config.debug.showPattern\r\n        }];\r\n\r\n        for (i = 0; i < vis.length; i++) {\r\n          if (vis[i].prop === true) {\r\n            vis[i].node.style.display = 'block';\r\n          } else {\r\n            vis[i].node.style.display = 'none';\r\n          }\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * extend the line on both ends\r\n     * @param {Array} line\r\n     * @param {Number} angle\r\n     */\r\n\r\n\r\n    function getExtendedLine(line, angle, ext) {\r\n      function extendLine(amount) {\r\n        var extension = {\r\n          y: amount * Math.sin(angle),\r\n          x: amount * Math.cos(angle)\r\n        };\r\n        /* eslint-disable no-param-reassign */\r\n\r\n        line[0].y -= extension.y;\r\n        line[0].x -= extension.x;\r\n        line[1].y += extension.y;\r\n        line[1].x += extension.x;\r\n        /* eslint-enable no-param-reassign */\r\n      } // check if inside image\r\n\r\n\r\n      extendLine(ext);\r\n\r\n      while (ext > 1 && (!inputImageWrapper.inImageWithBorder(line[0]) || !inputImageWrapper.inImageWithBorder(line[1]))) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        ext -= Math.ceil(ext / 2);\r\n        extendLine(-ext);\r\n      }\r\n\r\n      return line;\r\n    }\r\n\r\n    function getLine(box) {\r\n      return [{\r\n        x: (box[1][0] - box[0][0]) / 2 + box[0][0],\r\n        y: (box[1][1] - box[0][1]) / 2 + box[0][1]\r\n      }, {\r\n        x: (box[3][0] - box[2][0]) / 2 + box[2][0],\r\n        y: (box[3][1] - box[2][1]) / 2 + box[2][1]\r\n      }];\r\n    }\r\n\r\n    function tryDecode(line) {\r\n      var result = null;\r\n      var i;\r\n      var barcodeLine = bresenham.getBarcodeLine(inputImageWrapper, line[0], line[1]);\r\n\r\n      if (  true && config.debug.showFrequency) {\r\n        image_debug[\"a\" /* default */].drawPath(line, {\r\n          x: 'x',\r\n          y: 'y'\r\n        }, _canvas.ctx.overlay, {\r\n          color: 'red',\r\n          lineWidth: 3\r\n        });\r\n        bresenham.debug.printFrequency(barcodeLine.line, _canvas.dom.frequency);\r\n      }\r\n\r\n      bresenham.toBinaryLine(barcodeLine);\r\n\r\n      if (  true && config.debug.showPattern) {\r\n        bresenham.debug.printPattern(barcodeLine.line, _canvas.dom.pattern);\r\n      }\r\n\r\n      for (i = 0; i < _barcodeReaders.length && result === null; i++) {\r\n        result = _barcodeReaders[i].decodePattern(barcodeLine.line);\r\n      }\r\n\r\n      if (result === null) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        codeResult: result,\r\n        barcodeLine: barcodeLine\r\n      };\r\n    }\r\n    /**\r\n     * This method slices the given area apart and tries to detect a barcode-pattern\r\n     * for each slice. It returns the decoded barcode, or null if nothing was found\r\n     * @param {Array} box\r\n     * @param {Array} line\r\n     * @param {Number} lineAngle\r\n     */\r\n\r\n\r\n    function tryDecodeBruteForce(box, line, lineAngle) {\r\n      var sideLength = Math.sqrt(Math.pow(box[1][0] - box[0][0], 2) + Math.pow(box[1][1] - box[0][1], 2));\r\n      var i;\r\n      var slices = 16;\r\n      var result = null;\r\n      var dir;\r\n      var extension;\r\n      var xdir = Math.sin(lineAngle);\r\n      var ydir = Math.cos(lineAngle);\r\n\r\n      for (i = 1; i < slices && result === null; i++) {\r\n        // move line perpendicular to angle\r\n        // eslint-disable-next-line no-mixed-operators\r\n        dir = sideLength / slices * i * (i % 2 === 0 ? -1 : 1);\r\n        extension = {\r\n          y: dir * xdir,\r\n          x: dir * ydir\r\n        };\r\n        /* eslint-disable no-param-reassign */\r\n\r\n        line[0].y += extension.x;\r\n        line[0].x -= extension.y;\r\n        line[1].y += extension.x;\r\n        line[1].x -= extension.y;\r\n        /* eslint-enable no-param-reassign */\r\n\r\n        result = tryDecode(line);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function getLineLength(line) {\r\n      return Math.sqrt(Math.pow(Math.abs(line[1].y - line[0].y), 2) + Math.pow(Math.abs(line[1].x - line[0].x), 2));\r\n    }\r\n\r\n    function _decodeFromImage2(_x) {\r\n      return _decodeFromImage.apply(this, arguments);\r\n    }\r\n    /**\r\n     * With the help of the configured readers (Code128 or EAN) this function tries to detect a\r\n     * valid barcode pattern within the given area.\r\n     * @param {Object} box The area to search in\r\n     * @returns {Object} the result {codeResult, line, angle, pattern, threshold}\r\n     */\r\n\r\n\r\n    function _decodeFromImage() {\r\n      _decodeFromImage = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2(imageWrapper) {\r\n        var result, _iterator, _step, reader;\r\n\r\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\r\n          while (1) {\r\n            switch (_context2.prev = _context2.next) {\r\n              case 0:\r\n                result = null;\r\n                _iterator = _createForOfIteratorHelper(_barcodeReaders);\r\n                _context2.prev = 2;\r\n\r\n                _iterator.s();\r\n\r\n              case 4:\r\n                if ((_step = _iterator.n()).done) {\r\n                  _context2.next = 14;\r\n                  break;\r\n                }\r\n\r\n                reader = _step.value;\r\n\r\n                if (!reader.decodeImage) {\r\n                  _context2.next = 12;\r\n                  break;\r\n                }\r\n\r\n                _context2.next = 9;\r\n                return reader.decodeImage(imageWrapper);\r\n\r\n              case 9:\r\n                result = _context2.sent;\r\n\r\n                if (!result) {\r\n                  _context2.next = 12;\r\n                  break;\r\n                }\r\n\r\n                return _context2.abrupt(\"break\", 14);\r\n\r\n              case 12:\r\n                _context2.next = 4;\r\n                break;\r\n\r\n              case 14:\r\n                _context2.next = 19;\r\n                break;\r\n\r\n              case 16:\r\n                _context2.prev = 16;\r\n                _context2.t0 = _context2[\"catch\"](2);\r\n\r\n                _iterator.e(_context2.t0);\r\n\r\n              case 19:\r\n                _context2.prev = 19;\r\n\r\n                _iterator.f();\r\n\r\n                return _context2.finish(19);\r\n\r\n              case 22:\r\n                return _context2.abrupt(\"return\", result);\r\n\r\n              case 23:\r\n              case \"end\":\r\n                return _context2.stop();\r\n            }\r\n          }\r\n        }, _callee2, null, [[2, 16, 19, 22]]);\r\n      }));\r\n      return _decodeFromImage.apply(this, arguments);\r\n    }\r\n\r\n    function _decodeFromBoundingBox(box) {\r\n      var line;\r\n      var ctx = _canvas.ctx.overlay;\r\n      var result;\r\n\r\n      if (true) {\r\n        if (config.debug.drawBoundingBox && ctx) {\r\n          image_debug[\"a\" /* default */].drawPath(box, {\r\n            x: 0,\r\n            y: 1\r\n          }, ctx, {\r\n            color: 'blue',\r\n            lineWidth: 2\r\n          });\r\n        }\r\n      }\r\n\r\n      line = getLine(box);\r\n      var lineLength = getLineLength(line);\r\n      var lineAngle = Math.atan2(line[1].y - line[0].y, line[1].x - line[0].x);\r\n      line = getExtendedLine(line, lineAngle, Math.floor(lineLength * 0.1));\r\n\r\n      if (line === null) {\r\n        return null;\r\n      }\r\n\r\n      result = tryDecode(line);\r\n\r\n      if (result === null) {\r\n        result = tryDecodeBruteForce(box, line, lineAngle);\r\n      }\r\n\r\n      if (result === null) {\r\n        return null;\r\n      }\r\n\r\n      if (  true && result && config.debug.drawScanline && ctx) {\r\n        image_debug[\"a\" /* default */].drawPath(line, {\r\n          x: 'x',\r\n          y: 'y'\r\n        }, ctx, {\r\n          color: 'red',\r\n          lineWidth: 3\r\n        });\r\n      }\r\n\r\n      return {\r\n        codeResult: result.codeResult,\r\n        line: line,\r\n        angle: lineAngle,\r\n        pattern: result.barcodeLine.line,\r\n        threshold: result.barcodeLine.threshold\r\n      };\r\n    }\r\n\r\n    return {\r\n      decodeFromBoundingBox: function decodeFromBoundingBox(box) {\r\n        return _decodeFromBoundingBox(box);\r\n      },\r\n      decodeFromBoundingBoxes: function decodeFromBoundingBoxes(boxes) {\r\n        var i;\r\n        var result;\r\n        var barcodes = [];\r\n        var multiple = config.multiple;\r\n\r\n        for (i = 0; i < boxes.length; i++) {\r\n          var box = boxes[i];\r\n          result = _decodeFromBoundingBox(box) || {};\r\n          result.box = box;\r\n\r\n          if (multiple) {\r\n            barcodes.push(result);\r\n          } else if (result.codeResult) {\r\n            return result;\r\n          }\r\n        }\r\n\r\n        return {\r\n          barcodes: barcodes\r\n        };\r\n      },\r\n      decodeFromImage: function decodeFromImage(imageWrapperIn) {\r\n        return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\r\n          var result;\r\n          return regenerator_default.a.wrap(function _callee$(_context) {\r\n            while (1) {\r\n              switch (_context.prev = _context.next) {\r\n                case 0:\r\n                  _context.next = 2;\r\n                  return _decodeFromImage2(imageWrapperIn);\r\n\r\n                case 2:\r\n                  result = _context.sent;\r\n                  return _context.abrupt(\"return\", result);\r\n\r\n                case 4:\r\n                case \"end\":\r\n                  return _context.stop();\r\n              }\r\n            }\r\n          }, _callee);\r\n        }))();\r\n      },\r\n      registerReader: function registerReader(name, reader) {\r\n        if (READERS[name]) {\r\n          throw new Error('cannot register existing reader', name);\r\n        }\r\n\r\n        READERS[name] = reader;\r\n      },\r\n      setReaders: function setReaders(readers) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        config.readers = readers;\r\n        _barcodeReaders.length = 0;\r\n        initReaders();\r\n      }\r\n    };\r\n  }\r\n});\r\n// CONCATENATED MODULE: ./src/reader/index.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// CONCATENATED MODULE: ./src/common/events.ts\r\n/* harmony default export */ var events = ((function EventInterface() {\r\n  var events = {};\r\n\r\n  function getEvent(eventName) {\r\n    if (!events[eventName]) {\r\n      events[eventName] = {\r\n        subscribers: []\r\n      };\r\n    }\r\n\r\n    return events[eventName];\r\n  }\r\n\r\n  function clearEvents() {\r\n    events = {};\r\n  }\r\n\r\n  function publishSubscription(subscription, data) {\r\n    if (subscription.async) {\r\n      setTimeout(function () {\r\n        subscription.callback(data);\r\n      }, 4);\r\n    } else {\r\n      subscription.callback(data);\r\n    }\r\n  }\r\n\r\n  function _subscribe(event, callback, async) {\r\n    var subscription;\r\n\r\n    if (typeof callback === 'function') {\r\n      subscription = {\r\n        callback: callback,\r\n        async: async\r\n      };\r\n    } else {\r\n      subscription = callback;\r\n\r\n      if (!subscription.callback) {\r\n        throw new Error('Callback was not specified on options');\r\n      }\r\n    }\r\n\r\n    getEvent(event).subscribers.push(subscription);\r\n  }\r\n\r\n  return {\r\n    subscribe: function subscribe(event, callback, async) {\r\n      return _subscribe(event, callback, async);\r\n    },\r\n    publish: function publish(eventName, data) {\r\n      var event = getEvent(eventName);\r\n      var subscribers = event.subscribers; // Publish one-time subscriptions\r\n\r\n      subscribers.filter(function (subscriber) {\r\n        return !!subscriber.once;\r\n      }).forEach(function (subscriber) {\r\n        publishSubscription(subscriber, data);\r\n      }); // remove them from the subscriber\r\n\r\n      event.subscribers = subscribers.filter(function (subscriber) {\r\n        return !subscriber.once;\r\n      }); // publish the rest\r\n\r\n      event.subscribers.forEach(function (subscriber) {\r\n        publishSubscription(subscriber, data);\r\n      });\r\n    },\r\n    once: function once(event, callback) {\r\n      var async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n\r\n      _subscribe(event, {\r\n        callback: callback,\r\n        async: async,\r\n        once: true\r\n      });\r\n    },\r\n    unsubscribe: function unsubscribe(eventName, callback) {\r\n      if (eventName) {\r\n        var _event = getEvent(eventName);\r\n\r\n        if (_event && callback) {\r\n          _event.subscribers = _event.subscribers.filter(function (subscriber) {\r\n            return subscriber.callback !== callback;\r\n          });\r\n        } else {\r\n          _event.subscribers = [];\r\n        }\r\n      } else {\r\n        clearEvents();\r\n      }\r\n    }\r\n  };\r\n})());\r\n// EXTERNAL MODULE: ./node_modules/lodash/pick.js\r\nvar pick = __nested_webpack_require_266069__(85);\r\nvar pick_default = /*#__PURE__*/__nested_webpack_require_266069__.n(pick);\r\n\r\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js\r\nvar wrapNativeSuper = __nested_webpack_require_266069__(86);\r\nvar wrapNativeSuper_default = /*#__PURE__*/__nested_webpack_require_266069__.n(wrapNativeSuper);\r\n\r\n// CONCATENATED MODULE: ./src/quagga/Exception.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Exception_createSuper(Derived) { var hasNativeReflectConstruct = Exception_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\r\n\r\nfunction Exception_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\r\n\r\nvar Exception_Exception = /*#__PURE__*/function (_Error) {\r\n  inherits_default()(Exception, _Error);\r\n\r\n  var _super = Exception_createSuper(Exception);\r\n\r\n  function Exception(m, code) {\r\n    var _this;\r\n\r\n    classCallCheck_default()(this, Exception);\r\n\r\n    _this = _super.call(this, m);\r\n\r\n    defineProperty_default()(assertThisInitialized_default()(_this), \"code\", void 0);\r\n\r\n    _this.code = code;\r\n    Object.setPrototypeOf(assertThisInitialized_default()(_this), Exception.prototype);\r\n    return _this;\r\n  }\r\n\r\n  return createClass_default()(Exception);\r\n}( /*#__PURE__*/wrapNativeSuper_default()(Error));\r\n\r\n\r\n// CONCATENATED MODULE: ./src/common/mediaDevices.ts\r\n\r\nvar ERROR_DESC = 'This may mean that the user has declined camera access, or the browser does not support media APIs. If you are running in iOS, you must use Safari.';\r\nfunction enumerateDevices() {\r\n  try {\r\n    return navigator.mediaDevices.enumerateDevices();\r\n  } catch (err) {\r\n    var error = new Exception_Exception(\"enumerateDevices is not defined. \".concat(ERROR_DESC), -1);\r\n    return Promise.reject(error);\r\n  }\r\n}\r\nfunction getUserMedia(constraints) {\r\n  try {\r\n    return navigator.mediaDevices.getUserMedia(constraints);\r\n  } catch (err) {\r\n    var error = new Exception_Exception(\"getUserMedia is not defined. \".concat(ERROR_DESC), -1);\r\n    return Promise.reject(error);\r\n  }\r\n}\r\n// CONCATENATED MODULE: ./src/input/camera_access.ts\r\n\r\n\r\n// TODO: when this file was written years ago, HTMLMediaElement.play() did not return a useful value\r\n// to let us know when the video started playing.  Now, it does.  So, we shouldn't need to run this\r\n// odd waitForVideo() function that polls to see if the video has started.\r\n\r\n\r\n\r\nvar streamRef;\r\n\r\nfunction waitForVideo(video) {\r\n  return new Promise(function (resolve, reject) {\r\n    var attempts = 10;\r\n\r\n    function checkVideo() {\r\n      if (attempts > 0) {\r\n        if (video.videoWidth > 10 && video.videoHeight > 10) {\r\n          if (true) {\r\n            console.log(\"* dev: checkVideo found \".concat(video.videoWidth, \"px x \").concat(video.videoHeight, \"px\"));\r\n          }\r\n\r\n          resolve();\r\n        } else {\r\n          window.setTimeout(checkVideo, 500);\r\n        }\r\n      } else {\r\n        reject(new Exception_Exception('Unable to play video stream. Is webcam working?', -1)); // TODO: add error code\r\n      }\r\n\r\n      attempts--;\r\n    }\r\n\r\n    checkVideo();\r\n  });\r\n}\r\n/**\r\n * Tries to attach the camera-stream to a given video-element\r\n * and calls the callback function when the content is ready\r\n * @param {Object} constraints\r\n * @param {Object} video\r\n */\r\n\r\n\r\nfunction initCamera(_x, _x2) {\r\n  return _initCamera.apply(this, arguments);\r\n}\r\n\r\nfunction _initCamera() {\r\n  _initCamera = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee4(video, constraints) {\r\n    var stream;\r\n    return regenerator_default.a.wrap(function _callee4$(_context4) {\r\n      while (1) {\r\n        switch (_context4.prev = _context4.next) {\r\n          case 0:\r\n            _context4.next = 2;\r\n            return getUserMedia(constraints);\r\n\r\n          case 2:\r\n            stream = _context4.sent;\r\n            streamRef = stream;\r\n\r\n            if (!video) {\r\n              _context4.next = 11;\r\n              break;\r\n            }\r\n\r\n            video.setAttribute('autoplay', 'true');\r\n            video.setAttribute('muted', 'true');\r\n            video.setAttribute('playsinline', 'true'); // not listed on MDN...\r\n            // eslint-disable-next-line no-param-reassign\r\n\r\n            video.srcObject = stream;\r\n            video.addEventListener('loadedmetadata', function () {\r\n              video.play()[\"catch\"](function (err) {\r\n                console.warn('* Error while trying to play video stream:', err);\r\n              });\r\n            });\r\n            return _context4.abrupt(\"return\", waitForVideo(video));\r\n\r\n          case 11:\r\n            return _context4.abrupt(\"return\", Promise.resolve());\r\n\r\n          case 12:\r\n          case \"end\":\r\n            return _context4.stop();\r\n        }\r\n      }\r\n    }, _callee4);\r\n  }));\r\n  return _initCamera.apply(this, arguments);\r\n}\r\n\r\nfunction deprecatedConstraints(videoConstraints) {\r\n  var normalized = pick_default()(videoConstraints, ['width', 'height', 'facingMode', 'aspectRatio', 'deviceId']);\r\n\r\n  if (typeof videoConstraints.minAspectRatio !== 'undefined' && videoConstraints.minAspectRatio > 0) {\r\n    normalized.aspectRatio = videoConstraints.minAspectRatio;\r\n    console.log('WARNING: Constraint \\'minAspectRatio\\' is deprecated; Use \\'aspectRatio\\' instead');\r\n  }\r\n\r\n  if (typeof videoConstraints.facing !== 'undefined') {\r\n    normalized.facingMode = videoConstraints.facing;\r\n    console.log('WARNING: Constraint \\'facing\\' is deprecated. Use \\'facingMode\\' instead\\'');\r\n  }\r\n\r\n  return normalized;\r\n} // TODO: #192 I don't think there's any good reason pickConstraints should return a Promise,\r\n// I think it was just that way so it could be chained to other functions that did return a Promise.\r\n// That's not necessary with async functions being a thing, so that should be fixed.\r\n\r\n\r\nfunction pickConstraints() {\r\n  var videoConstraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n  var video = deprecatedConstraints(videoConstraints);\r\n\r\n  if (video && video.deviceId && video.facingMode) {\r\n    delete video.facingMode;\r\n  }\r\n\r\n  return Promise.resolve({\r\n    audio: false,\r\n    video: video\r\n  });\r\n}\r\n\r\nfunction enumerateVideoDevices() {\r\n  return _enumerateVideoDevices.apply(this, arguments);\r\n}\r\n\r\nfunction _enumerateVideoDevices() {\r\n  _enumerateVideoDevices = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee5() {\r\n    var devices;\r\n    return regenerator_default.a.wrap(function _callee5$(_context5) {\r\n      while (1) {\r\n        switch (_context5.prev = _context5.next) {\r\n          case 0:\r\n            _context5.next = 2;\r\n            return enumerateDevices();\r\n\r\n          case 2:\r\n            devices = _context5.sent;\r\n            return _context5.abrupt(\"return\", devices.filter(function (device) {\r\n              return device.kind === 'videoinput';\r\n            }));\r\n\r\n          case 4:\r\n          case \"end\":\r\n            return _context5.stop();\r\n        }\r\n      }\r\n    }, _callee5);\r\n  }));\r\n  return _enumerateVideoDevices.apply(this, arguments);\r\n}\r\n\r\nfunction getActiveTrack() {\r\n  if (!streamRef) {\r\n    return null;\r\n  }\r\n\r\n  var tracks = streamRef.getVideoTracks();\r\n  return tracks && tracks !== null && tracks !== void 0 && tracks.length ? tracks[0] : null;\r\n}\r\n/**\r\n * Used for accessing information about the active stream track and available video devices.\r\n */\r\n\r\n\r\nvar QuaggaJSCameraAccess = {\r\n  requestedVideoElement: null,\r\n  request: function request(video, videoConstraints) {\r\n    return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\r\n      var newConstraints;\r\n      return regenerator_default.a.wrap(function _callee$(_context) {\r\n        while (1) {\r\n          switch (_context.prev = _context.next) {\r\n            case 0:\r\n              QuaggaJSCameraAccess.requestedVideoElement = video;\r\n              _context.next = 3;\r\n              return pickConstraints(videoConstraints);\r\n\r\n            case 3:\r\n              newConstraints = _context.sent;\r\n              return _context.abrupt(\"return\", initCamera(video, newConstraints));\r\n\r\n            case 5:\r\n            case \"end\":\r\n              return _context.stop();\r\n          }\r\n        }\r\n      }, _callee);\r\n    }))();\r\n  },\r\n  release: function release() {\r\n    var tracks = streamRef && streamRef.getVideoTracks();\r\n\r\n    if (QuaggaJSCameraAccess.requestedVideoElement !== null) {\r\n      QuaggaJSCameraAccess.requestedVideoElement.pause();\r\n    }\r\n\r\n    return new Promise(function (resolve) {\r\n      setTimeout(function () {\r\n        if (tracks && tracks.length) {\r\n          tracks[0].stop();\r\n        }\r\n\r\n        streamRef = null;\r\n        QuaggaJSCameraAccess.requestedVideoElement = null;\r\n        resolve();\r\n      }, 0);\r\n    });\r\n  },\r\n  enumerateVideoDevices: enumerateVideoDevices,\r\n  getActiveStreamLabel: function getActiveStreamLabel() {\r\n    var track = getActiveTrack();\r\n    return track ? track.label : '';\r\n  },\r\n  getActiveTrack: getActiveTrack,\r\n  disableTorch: function disableTorch() {\r\n    return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\r\n      var track;\r\n      return regenerator_default.a.wrap(function _callee2$(_context2) {\r\n        while (1) {\r\n          switch (_context2.prev = _context2.next) {\r\n            case 0:\r\n              track = getActiveTrack(); // TODO: should we acquire camera access even if there's no current camera open?\r\n              // TODO: what happens on iOS or another device where torch isn't supported at all? Should we throw an error?\r\n\r\n              if (!track) {\r\n                _context2.next = 4;\r\n                break;\r\n              }\r\n\r\n              _context2.next = 4;\r\n              return track.applyConstraints({\r\n                advanced: [{\r\n                  torch: false\r\n                }]\r\n              });\r\n\r\n            case 4:\r\n            case \"end\":\r\n              return _context2.stop();\r\n          }\r\n        }\r\n      }, _callee2);\r\n    }))();\r\n  },\r\n  enableTorch: function enableTorch() {\r\n    return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\r\n      var track;\r\n      return regenerator_default.a.wrap(function _callee3$(_context3) {\r\n        while (1) {\r\n          switch (_context3.prev = _context3.next) {\r\n            case 0:\r\n              track = getActiveTrack(); // TODO: should we acquire camera access even if there's no current camera open?\r\n              // TODO: what happens on iOS or another device where torch isn't supported at all? Should we throw an error?\r\n\r\n              if (!track) {\r\n                _context3.next = 4;\r\n                break;\r\n              }\r\n\r\n              _context3.next = 4;\r\n              return track.applyConstraints({\r\n                advanced: [{\r\n                  torch: true\r\n                }]\r\n              });\r\n\r\n            case 4:\r\n            case \"end\":\r\n              return _context3.stop();\r\n          }\r\n        }\r\n      }, _callee3);\r\n    }))();\r\n  }\r\n};\r\n/* harmony default export */ var camera_access = (QuaggaJSCameraAccess);\r\n// CONCATENATED MODULE: ./src/analytics/result_collector.ts\r\n\r\n\r\nfunction contains(codeResult, list) {\r\n  return list && list.some(function (item) {\r\n    var keys = Object.keys(item);\r\n    return keys.every(function (key) {\r\n      return item[key] === codeResult[key];\r\n    });\r\n  });\r\n}\r\n\r\nfunction passesFilter(codeResult, filter) {\r\n  return typeof filter === 'function' ? filter(codeResult) : true;\r\n}\r\n\r\n/* harmony default export */ var result_collector = ({\r\n  create: function create(config) {\r\n    var _config$capacity;\r\n\r\n    var canvas = document.createElement('canvas');\r\n    var ctx = canvas.getContext('2d');\r\n    var results = [];\r\n    var capacity = (_config$capacity = config.capacity) !== null && _config$capacity !== void 0 ? _config$capacity : 20;\r\n    var capture = config.capture === true;\r\n\r\n    function matchesConstraints(codeResult) {\r\n      return !!capacity && codeResult && !contains(codeResult, config.blacklist) && passesFilter(codeResult, config.filter);\r\n    }\r\n\r\n    return {\r\n      addResult: function addResult(data, imageSize, codeResult) {\r\n        var result = {}; // this is 'any' to avoid having to construct a whole QuaggaJSCodeResult :|\r\n\r\n        if (matchesConstraints(codeResult)) {\r\n          capacity--;\r\n          result.codeResult = codeResult;\r\n\r\n          if (capture) {\r\n            canvas.width = imageSize.x;\r\n            canvas.height = imageSize.y;\r\n            image_debug[\"a\" /* default */].drawImage(data, imageSize, ctx);\r\n            result.frame = canvas.toDataURL();\r\n          }\r\n\r\n          results.push(result);\r\n        }\r\n      },\r\n      getResults: function getResults() {\r\n        return results;\r\n      }\r\n    };\r\n  }\r\n});\r\n// CONCATENATED MODULE: ./src/config/config.dev.ts\r\nvar DevConfig = {\r\n  inputStream: {\r\n    name: 'Live',\r\n    type: 'LiveStream',\r\n    constraints: {\r\n      width: 640,\r\n      height: 480,\r\n      // aspectRatio: 640/480, // optional\r\n      facingMode: 'environment' // or user\r\n      // deviceId: \"38745983457387598375983759834\"\r\n\r\n    },\r\n    area: {\r\n      top: '0%',\r\n      right: '0%',\r\n      left: '0%',\r\n      bottom: '0%'\r\n    },\r\n    singleChannel: false // true: only the red color-channel is read\r\n\r\n  },\r\n  locate: true,\r\n  numOfWorkers: 0,\r\n  decoder: {\r\n    readers: ['code_128_reader'],\r\n    debug: {\r\n      drawBoundingBox: false,\r\n      showFrequency: false,\r\n      drawScanline: false,\r\n      showPattern: false\r\n    }\r\n  },\r\n  locator: {\r\n    halfSample: true,\r\n    patchSize: 'medium',\r\n    // x-small, small, medium, large, x-large\r\n    debug: {\r\n      showCanvas: false,\r\n      showPatches: false,\r\n      showFoundPatches: false,\r\n      showSkeleton: false,\r\n      showLabels: false,\r\n      showPatchLabels: false,\r\n      showRemainingPatchLabels: false,\r\n      boxFromPatches: {\r\n        showTransformed: false,\r\n        showTransformedBox: false,\r\n        showBB: false\r\n      }\r\n    }\r\n  }\r\n};\r\n/* harmony default export */ var config_dev = (DevConfig);\r\n// CONCATENATED MODULE: ./src/config/config.node.ts\r\nvar NodeConfig = {\r\n  inputStream: {\r\n    type: 'ImageStream',\r\n    sequence: false,\r\n    size: 800,\r\n    area: {\r\n      top: '0%',\r\n      right: '0%',\r\n      left: '0%',\r\n      bottom: '0%'\r\n    },\r\n    singleChannel: false // true: only the red color-channel is read\r\n\r\n  },\r\n  locate: true,\r\n  numOfWorkers: 0,\r\n  decoder: {\r\n    readers: ['code_128_reader']\r\n  },\r\n  locator: {\r\n    halfSample: true,\r\n    patchSize: 'medium' // x-small, small, medium, large, x-large\r\n\r\n  }\r\n};\r\n/* harmony default export */ var config_node = (NodeConfig);\r\n// CONCATENATED MODULE: ./src/config/config.prod.ts\r\nvar ProdConfig = {\r\n  inputStream: {\r\n    name: 'Live',\r\n    type: 'LiveStream',\r\n    constraints: {\r\n      width: 640,\r\n      height: 480,\r\n      // aspectRatio: 640/480, // optional\r\n      facingMode: 'environment' // or user\r\n      // deviceId: \"38745983457387598375983759834\"\r\n\r\n    },\r\n    area: {\r\n      top: '0%',\r\n      right: '0%',\r\n      left: '0%',\r\n      bottom: '0%'\r\n    },\r\n    singleChannel: false // true: only the red color-channel is read\r\n\r\n  },\r\n  locate: true,\r\n  numOfWorkers: 4,\r\n  decoder: {\r\n    readers: ['code_128_reader']\r\n  },\r\n  locator: {\r\n    halfSample: true,\r\n    patchSize: 'medium' // x-small, small, medium, large, x-large\r\n\r\n  }\r\n};\r\n/* harmony default export */ var config_prod = (ProdConfig);\r\n// CONCATENATED MODULE: ./src/config/config.ts\r\n\r\n\r\n // @ts-ignore // TODO: this produces a bizarre typescript error\r\n// eslint-disable-next-line no-nested-ternary\r\n\r\nvar QuaggaConfig =   true ? config_dev : 0;\r\n/* harmony default export */ var config_config = (QuaggaConfig);\r\n// EXTERNAL MODULE: ./node_modules/gl-vec2/index.js\r\nvar gl_vec2 = __nested_webpack_require_266069__(7);\r\n\r\n// EXTERNAL MODULE: ./src/common/cv_utils.js + 1 modules\r\nvar cv_utils = __nested_webpack_require_266069__(9);\r\n\r\n// CONCATENATED MODULE: ./src/input/frame_grabber_browser.js\r\n// NOTE FOR ANYONE IN HERE IN THE FUTURE:\r\n// webpack.config.js replaces the frame_grabber module with THIS module when it is building for a Browser environment.\r\n\r\nvar TO_RADIANS = Math.PI / 180;\r\n\r\nfunction adjustCanvasSize(canvas, targetSize) {\r\n  if (canvas.width !== targetSize.x) {\r\n    if (true) {\r\n      console.log('WARNING: canvas-size needs to be adjusted');\r\n    }\r\n\r\n    canvas.width = targetSize.x;\r\n  }\r\n\r\n  if (canvas.height !== targetSize.y) {\r\n    if (true) {\r\n      console.log('WARNING: canvas-size needs to be adjusted');\r\n    }\r\n\r\n    canvas.height = targetSize.y;\r\n  }\r\n}\r\n\r\nvar FrameGrabber = {};\r\n\r\nFrameGrabber.create = function (inputStream, canvas) {\r\n  var _that = {};\r\n\r\n  var _streamConfig = inputStream.getConfig();\r\n\r\n  var _videoSize = Object(cv_utils[\"h\" /* imageRef */])(inputStream.getRealWidth(), inputStream.getRealHeight());\r\n\r\n  var _canvasSize = inputStream.getCanvasSize();\r\n\r\n  var _size = Object(cv_utils[\"h\" /* imageRef */])(inputStream.getWidth(), inputStream.getHeight());\r\n\r\n  var topRight = inputStream.getTopRight();\r\n  var _sx = topRight.x;\r\n  var _sy = topRight.y;\r\n\r\n  var _canvas;\r\n\r\n  var _ctx = null;\r\n  var _data = null;\r\n  _canvas = canvas || document.createElement('canvas');\r\n  _canvas.width = _canvasSize.x;\r\n  _canvas.height = _canvasSize.y;\r\n  _ctx = _canvas.getContext('2d');\r\n  _data = new Uint8Array(_size.x * _size.y);\r\n\r\n  if (true) {\r\n    console.log('FrameGrabber', JSON.stringify({\r\n      size: _size,\r\n      topRight: topRight,\r\n      videoSize: _videoSize,\r\n      canvasSize: _canvasSize\r\n    }));\r\n  }\r\n  /**\r\n   * Uses the given array as frame-buffer\r\n   */\r\n\r\n\r\n  _that.attachData = function (data) {\r\n    _data = data;\r\n  };\r\n  /**\r\n   * Returns the used frame-buffer\r\n   */\r\n\r\n\r\n  _that.getData = function () {\r\n    return _data;\r\n  };\r\n  /**\r\n   * Fetches a frame from the input-stream and puts into the frame-buffer.\r\n   * The image-data is converted to gray-scale and then half-sampled if configured.\r\n   */\r\n\r\n\r\n  _that.grab = function () {\r\n    var doHalfSample = _streamConfig.halfSample;\r\n    var frame = inputStream.getFrame();\r\n    var drawable = frame;\r\n    var drawAngle = 0;\r\n    var ctxData;\r\n\r\n    if (drawable) {\r\n      adjustCanvasSize(_canvas, _canvasSize);\r\n\r\n      if (_streamConfig.type === 'ImageStream') {\r\n        drawable = frame.img;\r\n\r\n        if (frame.tags && frame.tags.orientation) {\r\n          switch (frame.tags.orientation) {\r\n            case 6:\r\n              drawAngle = 90 * TO_RADIANS;\r\n              break;\r\n\r\n            case 8:\r\n              drawAngle = -90 * TO_RADIANS;\r\n              break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (drawAngle !== 0) {\r\n        _ctx.translate(_canvasSize.x / 2, _canvasSize.y / 2);\r\n\r\n        _ctx.rotate(drawAngle);\r\n\r\n        _ctx.drawImage(drawable, -_canvasSize.y / 2, -_canvasSize.x / 2, _canvasSize.y, _canvasSize.x);\r\n\r\n        _ctx.rotate(-drawAngle);\r\n\r\n        _ctx.translate(-_canvasSize.x / 2, -_canvasSize.y / 2);\r\n      } else {\r\n        _ctx.drawImage(drawable, 0, 0, _canvasSize.x, _canvasSize.y);\r\n      }\r\n\r\n      ctxData = _ctx.getImageData(_sx, _sy, _size.x, _size.y).data;\r\n\r\n      if (doHalfSample) {\r\n        Object(cv_utils[\"e\" /* grayAndHalfSampleFromCanvasData */])(ctxData, _size, _data);\r\n      } else {\r\n        Object(cv_utils[\"c\" /* computeGray */])(ctxData, _data, _streamConfig);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  _that.getSize = function () {\r\n    return _size;\r\n  };\r\n\r\n  return _that;\r\n};\r\n\r\n/* harmony default export */ var frame_grabber_browser = (FrameGrabber);\r\n// CONCATENATED MODULE: ./src/input/exif_helper.js\r\n// NOTE: (SOME OF) THIS IS BROWSER ONLY CODE.  Node does not have 'atob' built in, nor XMLHttpRequest.\r\n// How exactly is this set of functions used in Quagga? Do we need the browser specific code? Do we\r\n// need to port any part of this that doesn't work in Node to node?\r\n// Tags scraped from https://github.com/exif-js/exif-js\r\nvar ExifTags = {\r\n  0x0112: 'orientation'\r\n};\r\nvar AvailableTags = Object.keys(ExifTags).map(function (key) {\r\n  return ExifTags[key];\r\n});\r\nfunction findTagsInObjectURL(src) {\r\n  var tags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AvailableTags;\r\n\r\n  if (/^blob:/i.test(src)) {\r\n    return objectURLToBlob(src).then(readToBuffer).then(function (buffer) {\r\n      return findTagsInBuffer(buffer, tags);\r\n    });\r\n  }\r\n\r\n  return Promise.resolve(null);\r\n}\r\nfunction base64ToArrayBuffer(dataUrl) {\r\n  var base64 = dataUrl.replace(/^data:([^;]+);base64,/gmi, '');\r\n  var binary = atob(base64);\r\n  var len = binary.length;\r\n  var buffer = new ArrayBuffer(len);\r\n  var view = new Uint8Array(buffer);\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    view[i] = binary.charCodeAt(i);\r\n  }\r\n\r\n  return buffer;\r\n}\r\n\r\nfunction readToBuffer(blob) {\r\n  return new Promise(function (resolve) {\r\n    var fileReader = new FileReader();\r\n\r\n    fileReader.onload = function (e) {\r\n      return resolve(e.target.result);\r\n    };\r\n\r\n    fileReader.readAsArrayBuffer(blob);\r\n  });\r\n}\r\n\r\nfunction objectURLToBlob(url) {\r\n  return new Promise(function (resolve, reject) {\r\n    var http = new XMLHttpRequest();\r\n    http.open('GET', url, true);\r\n    http.responseType = 'blob';\r\n\r\n    http.onreadystatechange = function () {\r\n      if (http.readyState === XMLHttpRequest.DONE && (http.status === 200 || http.status === 0)) {\r\n        resolve(this.response);\r\n      }\r\n    };\r\n\r\n    http.onerror = reject;\r\n    http.send();\r\n  });\r\n}\r\n\r\nfunction findTagsInBuffer(file) {\r\n  var selectedTags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AvailableTags;\r\n  var dataView = new DataView(file);\r\n  var length = file.byteLength;\r\n  var exifTags = selectedTags.reduce(function (result, selectedTag) {\r\n    var exifTag = Object.keys(ExifTags).filter(function (tag) {\r\n      return ExifTags[tag] === selectedTag;\r\n    })[0];\r\n\r\n    if (exifTag) {\r\n      result[exifTag] = selectedTag;\r\n    }\r\n\r\n    return result;\r\n  }, {});\r\n  var offset = 2;\r\n  var marker;\r\n\r\n  if (dataView.getUint8(0) !== 0xFF || dataView.getUint8(1) !== 0xD8) {\r\n    return false;\r\n  }\r\n\r\n  while (offset < length) {\r\n    if (dataView.getUint8(offset) !== 0xFF) {\r\n      return false;\r\n    }\r\n\r\n    marker = dataView.getUint8(offset + 1);\r\n\r\n    if (marker === 0xE1) {\r\n      return readEXIFData(dataView, offset + 4, exifTags);\r\n    }\r\n\r\n    offset += 2 + dataView.getUint16(offset + 2);\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction readEXIFData(file, start, exifTags) {\r\n  if (getStringFromBuffer(file, start, 4) !== 'Exif') {\r\n    return false;\r\n  }\r\n\r\n  var tiffOffset = start + 6;\r\n  var bigEnd;\r\n\r\n  if (file.getUint16(tiffOffset) === 0x4949) {\r\n    bigEnd = false;\r\n  } else if (file.getUint16(tiffOffset) === 0x4D4D) {\r\n    bigEnd = true;\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  if (file.getUint16(tiffOffset + 2, !bigEnd) !== 0x002A) {\r\n    return false;\r\n  }\r\n\r\n  var firstIFDOffset = file.getUint32(tiffOffset + 4, !bigEnd);\r\n\r\n  if (firstIFDOffset < 0x00000008) {\r\n    return false;\r\n  }\r\n\r\n  var tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, exifTags, bigEnd);\r\n  return tags;\r\n}\r\n\r\nfunction readTags(file, tiffStart, dirStart, strings, bigEnd) {\r\n  var entries = file.getUint16(dirStart, !bigEnd);\r\n  var tags = {};\r\n\r\n  for (var i = 0; i < entries; i++) {\r\n    var entryOffset = dirStart + i * 12 + 2;\r\n    var tag = strings[file.getUint16(entryOffset, !bigEnd)];\r\n\r\n    if (tag) {\r\n      tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\r\n    }\r\n  }\r\n\r\n  return tags;\r\n}\r\n\r\nfunction readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\r\n  var type = file.getUint16(entryOffset + 2, !bigEnd);\r\n  var numValues = file.getUint32(entryOffset + 4, !bigEnd);\r\n\r\n  switch (type) {\r\n    case 3:\r\n      if (numValues === 1) {\r\n        return file.getUint16(entryOffset + 8, !bigEnd);\r\n      }\r\n\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction getStringFromBuffer(buffer, start, length) {\r\n  var outstr = '';\r\n\r\n  for (var n = start; n < start + length; n++) {\r\n    outstr += String.fromCharCode(buffer.getUint8(n));\r\n  }\r\n\r\n  return outstr;\r\n}\r\n// CONCATENATED MODULE: ./src/input/image_loader.js\r\n\r\nvar ImageLoader = {};\r\n\r\nImageLoader.load = function (directory, callback, offset, size, sequence) {\r\n  var htmlImagesSrcArray = new Array(size);\r\n  var htmlImagesArray = new Array(htmlImagesSrcArray.length);\r\n  var i;\r\n  var img;\r\n  var num;\r\n\r\n  if (sequence === false) {\r\n    htmlImagesSrcArray[0] = directory;\r\n  } else {\r\n    for (i = 0; i < htmlImagesSrcArray.length; i++) {\r\n      num = offset + i;\r\n      htmlImagesSrcArray[i] = \"\".concat(directory, \"image-\").concat(\"00\".concat(num).slice(-3), \".jpg\");\r\n    }\r\n  }\r\n\r\n  htmlImagesArray.notLoaded = [];\r\n\r\n  htmlImagesArray.addImage = function (image) {\r\n    htmlImagesArray.notLoaded.push(image);\r\n  };\r\n\r\n  htmlImagesArray.loaded = function (loadedImg) {\r\n    var notloadedImgs = htmlImagesArray.notLoaded;\r\n\r\n    for (var x = 0; x < notloadedImgs.length; x++) {\r\n      if (notloadedImgs[x] === loadedImg) {\r\n        notloadedImgs.splice(x, 1);\r\n\r\n        for (var y = 0; y < htmlImagesSrcArray.length; y++) {\r\n          var imgName = htmlImagesSrcArray[y].substr(htmlImagesSrcArray[y].lastIndexOf('/'));\r\n\r\n          if (loadedImg.src.lastIndexOf(imgName) !== -1) {\r\n            htmlImagesArray[y] = {\r\n              img: loadedImg\r\n            };\r\n            break;\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (notloadedImgs.length === 0) {\r\n      if (true) {\r\n        console.log('Images loaded');\r\n      }\r\n\r\n      if (sequence === false) {\r\n        findTagsInObjectURL(directory, ['orientation']).then(function (tags) {\r\n          htmlImagesArray[0].tags = tags;\r\n          callback(htmlImagesArray);\r\n        })[\"catch\"](function (e) {\r\n          console.log(e);\r\n          callback(htmlImagesArray);\r\n        });\r\n      } else {\r\n        callback(htmlImagesArray);\r\n      }\r\n    }\r\n  };\r\n\r\n  for (i = 0; i < htmlImagesSrcArray.length; i++) {\r\n    img = new Image();\r\n    htmlImagesArray.addImage(img);\r\n    addOnloadHandler(img, htmlImagesArray);\r\n    img.src = htmlImagesSrcArray[i];\r\n  }\r\n};\r\n\r\nfunction addOnloadHandler(img, htmlImagesArray) {\r\n  img.onload = function () {\r\n    htmlImagesArray.loaded(this);\r\n  };\r\n}\r\n\r\n/* harmony default export */ var image_loader = (ImageLoader);\r\n// CONCATENATED MODULE: ./src/input/input_stream/input_stream_browser.ts\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nvar inputStreamFactory = {\r\n  createVideoStream: function createVideoStream(video) {\r\n    var _config = null;\r\n    var _eventNames = ['canrecord', 'ended'];\r\n    var _eventHandlers = {};\r\n\r\n    var _calculatedWidth;\r\n\r\n    var _calculatedHeight;\r\n\r\n    var _topRight = {\r\n      x: 0,\r\n      y: 0,\r\n      type: 'Point'\r\n    };\r\n    var _canvasSize = {\r\n      x: 0,\r\n      y: 0,\r\n      type: 'XYSize'\r\n    };\r\n\r\n    function initSize() {\r\n      var _config2, _config3;\r\n\r\n      var width = video.videoWidth;\r\n      var height = video.videoHeight; // eslint-disable-next-line no-nested-ternary\r\n\r\n      _calculatedWidth = (_config2 = _config) !== null && _config2 !== void 0 && _config2.size ? width / height > 1 ? _config.size : Math.floor(width / height * _config.size) : width; // eslint-disable-next-line no-nested-ternary\r\n\r\n      _calculatedHeight = (_config3 = _config) !== null && _config3 !== void 0 && _config3.size ? width / height > 1 ? Math.floor(height / width * _config.size) : _config.size : height;\r\n      _canvasSize.x = _calculatedWidth;\r\n      _canvasSize.y = _calculatedHeight;\r\n    }\r\n\r\n    var inputStream = {\r\n      getRealWidth: function getRealWidth() {\r\n        return video.videoWidth;\r\n      },\r\n      getRealHeight: function getRealHeight() {\r\n        return video.videoHeight;\r\n      },\r\n      getWidth: function getWidth() {\r\n        return _calculatedWidth;\r\n      },\r\n      getHeight: function getHeight() {\r\n        return _calculatedHeight;\r\n      },\r\n      setWidth: function setWidth(width) {\r\n        _calculatedWidth = width;\r\n      },\r\n      setHeight: function setHeight(height) {\r\n        _calculatedHeight = height;\r\n      },\r\n      setInputStream: function setInputStream(config) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        _config = config; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\r\n        this.setAttribute('src', typeof config.src !== 'undefined' ? config.src : '');\r\n      },\r\n      ended: function ended() {\r\n        return video.ended;\r\n      },\r\n      getConfig: function getConfig() {\r\n        return _config;\r\n      },\r\n      setAttribute: function setAttribute(name, value) {\r\n        if (video) {\r\n          video.setAttribute(name, value);\r\n        }\r\n      },\r\n      pause: function pause() {\r\n        video.pause();\r\n      },\r\n      play: function play() {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        video.play();\r\n      },\r\n      setCurrentTime: function setCurrentTime(time) {\r\n        var _config4;\r\n\r\n        if (((_config4 = _config) === null || _config4 === void 0 ? void 0 : _config4.type) !== 'LiveStream') {\r\n          this.setAttribute('currentTime', time.toString());\r\n        }\r\n      },\r\n      addEventListener: function addEventListener(event, f, bool) {\r\n        if (_eventNames.indexOf(event) !== -1) {\r\n          if (!_eventHandlers[event]) {\r\n            _eventHandlers[event] = [];\r\n          }\r\n\r\n          _eventHandlers[event].push(f);\r\n        } else {\r\n          video.addEventListener(event, f, bool);\r\n        }\r\n      },\r\n      clearEventHandlers: function clearEventHandlers() {\r\n        _eventNames.forEach(function (eventName) {\r\n          var handlers = _eventHandlers[eventName];\r\n\r\n          if (handlers && handlers.length > 0) {\r\n            handlers.forEach(function (handler) {\r\n              video.removeEventListener(eventName, handler);\r\n            });\r\n          }\r\n        });\r\n      },\r\n      trigger: function trigger(eventName, args) {\r\n        var j; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\r\n        var handlers = _eventHandlers[eventName];\r\n\r\n        if (eventName === 'canrecord') {\r\n          initSize();\r\n        }\r\n\r\n        if (handlers && handlers.length > 0) {\r\n          for (j = 0; j < handlers.length; j++) {\r\n            handlers[j].apply(inputStream, args);\r\n          }\r\n        }\r\n      },\r\n      setTopRight: function setTopRight(topRight) {\r\n        _topRight.x = topRight.x;\r\n        _topRight.y = topRight.y;\r\n      },\r\n      getTopRight: function getTopRight() {\r\n        return _topRight;\r\n      },\r\n      setCanvasSize: function setCanvasSize(size) {\r\n        _canvasSize.x = size.x;\r\n        _canvasSize.y = size.y;\r\n      },\r\n      getCanvasSize: function getCanvasSize() {\r\n        return _canvasSize;\r\n      },\r\n      getFrame: function getFrame() {\r\n        return video;\r\n      }\r\n    };\r\n    return inputStream;\r\n  },\r\n  createLiveStream: function createLiveStream(video) {\r\n    if (video) {\r\n      video.setAttribute('autoplay', 'true');\r\n    }\r\n\r\n    var that = inputStreamFactory.createVideoStream(video);\r\n\r\n    that.ended = function ended() {\r\n      return false;\r\n    };\r\n\r\n    return that;\r\n  },\r\n  createImageStream: function createImageStream() {\r\n    var _config = null;\r\n    var width = 0;\r\n    var height = 0;\r\n    var frameIdx = 0;\r\n    var paused = true;\r\n    var loaded = false;\r\n    var imgArray = null;\r\n    var size = 0;\r\n    var offset = 1;\r\n    var baseUrl = null;\r\n    var _ended = false;\r\n    var calculatedWidth;\r\n    var calculatedHeight;\r\n    var _eventNames = ['canrecord', 'ended'];\r\n    var _eventHandlers = {};\r\n    var _topRight = {\r\n      x: 0,\r\n      y: 0,\r\n      type: 'Point'\r\n    };\r\n    var _canvasSize = {\r\n      x: 0,\r\n      y: 0,\r\n      type: 'XYSize'\r\n    };\r\n\r\n    function loadImages() {\r\n      var _config7;\r\n\r\n      loaded = false;\r\n      image_loader.load(baseUrl, function (imgs) {\r\n        var _config5, _config6;\r\n\r\n        imgArray = imgs; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\r\n        if (imgs[0].tags && imgs[0].tags.orientation) {\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n          switch (imgs[0].tags.orientation) {\r\n            case 6:\r\n            case 8:\r\n              width = imgs[0].img.height;\r\n              height = imgs[0].img.width;\r\n              break;\r\n\r\n            default:\r\n              width = imgs[0].img.width;\r\n              height = imgs[0].img.height;\r\n          }\r\n        } else {\r\n          width = imgs[0].img.width;\r\n          height = imgs[0].img.height;\r\n        } // eslint-disable-next-line no-nested-ternary\r\n\r\n\r\n        calculatedWidth = (_config5 = _config) !== null && _config5 !== void 0 && _config5.size ? width / height > 1 ? _config.size : Math.floor(width / height * _config.size) : width; // eslint-disable-next-line no-nested-ternary\r\n\r\n        calculatedHeight = (_config6 = _config) !== null && _config6 !== void 0 && _config6.size ? width / height > 1 ? Math.floor(height / width * _config.size) : _config.size : height;\r\n        _canvasSize.x = calculatedWidth;\r\n        _canvasSize.y = calculatedHeight;\r\n        loaded = true;\r\n        frameIdx = 0;\r\n        setTimeout(function () {\r\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n          publishEvent('canrecord', []);\r\n        }, 0);\r\n      }, offset, size, (_config7 = _config) === null || _config7 === void 0 ? void 0 : _config7.sequence);\r\n    }\r\n\r\n    function publishEvent(eventName, args) {\r\n      var j;\r\n      var handlers = _eventHandlers[eventName];\r\n\r\n      if (handlers && handlers.length > 0) {\r\n        for (j = 0; j < handlers.length; j++) {\r\n          // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n          handlers[j].apply(inputStream, args); // TODO: typescript complains that any[] is not valid for a second arg for apply?!\r\n        }\r\n      }\r\n    } // TODO: any code shared with the first InputStream above should be shared not copied\r\n    // TODO: publishEvent needs access to inputStream, but inputStream needs access to publishEvent\r\n    // TODO: This is why it's a 'var', so it hoists back.  This is ugly, and should be changed.\r\n    // eslint-disable-next-line no-var,vars-on-top\r\n\r\n\r\n    var inputStream = {\r\n      trigger: publishEvent,\r\n      getWidth: function getWidth() {\r\n        return calculatedWidth;\r\n      },\r\n      getHeight: function getHeight() {\r\n        return calculatedHeight;\r\n      },\r\n      setWidth: function setWidth(newWidth) {\r\n        calculatedWidth = newWidth;\r\n      },\r\n      setHeight: function setHeight(newHeight) {\r\n        calculatedHeight = newHeight;\r\n      },\r\n      getRealWidth: function getRealWidth() {\r\n        return width;\r\n      },\r\n      getRealHeight: function getRealHeight() {\r\n        return height;\r\n      },\r\n      setInputStream: function setInputStream(stream) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        _config = stream; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n\r\n        if (stream.sequence === false) {\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\r\n          baseUrl = stream.src;\r\n          size = 1;\r\n        } else {\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\r\n          baseUrl = stream.src; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access\r\n\r\n          size = stream.length;\r\n        }\r\n\r\n        loadImages();\r\n      },\r\n      ended: function ended() {\r\n        return _ended;\r\n      },\r\n      setAttribute: function setAttribute() {},\r\n      getConfig: function getConfig() {\r\n        return _config;\r\n      },\r\n      pause: function pause() {\r\n        paused = true;\r\n      },\r\n      play: function play() {\r\n        paused = false;\r\n      },\r\n      setCurrentTime: function setCurrentTime(time) {\r\n        frameIdx = time;\r\n      },\r\n      addEventListener: function addEventListener(event, f) {\r\n        if (_eventNames.indexOf(event) !== -1) {\r\n          if (!_eventHandlers[event]) {\r\n            _eventHandlers[event] = [];\r\n          }\r\n\r\n          _eventHandlers[event].push(f);\r\n        }\r\n      },\r\n      clearEventHandlers: function clearEventHandlers() {\r\n        Object.keys(_eventHandlers).forEach(function (ind) {\r\n          return delete _eventHandlers[ind];\r\n        });\r\n      },\r\n      setTopRight: function setTopRight(topRight) {\r\n        _topRight.x = topRight.x;\r\n        _topRight.y = topRight.y;\r\n      },\r\n      getTopRight: function getTopRight() {\r\n        return _topRight;\r\n      },\r\n      setCanvasSize: function setCanvasSize(canvasSize) {\r\n        _canvasSize.x = canvasSize.x;\r\n        _canvasSize.y = canvasSize.y;\r\n      },\r\n      getCanvasSize: function getCanvasSize() {\r\n        return _canvasSize;\r\n      },\r\n      getFrame: function getFrame() {\r\n        var frame;\r\n\r\n        if (!loaded) {\r\n          return null;\r\n        }\r\n\r\n        if (!paused) {\r\n          var _imgArray;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n          frame = (_imgArray = imgArray) === null || _imgArray === void 0 ? void 0 : _imgArray[frameIdx];\r\n\r\n          if (frameIdx < size - 1) {\r\n            frameIdx++;\r\n          } else {\r\n            setTimeout(function () {\r\n              _ended = true;\r\n              publishEvent('ended', []);\r\n            }, 0);\r\n          }\r\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n\r\n\r\n        return frame;\r\n      }\r\n    };\r\n    return inputStream;\r\n  }\r\n};\r\n/* harmony default export */ var input_stream_browser = (inputStreamFactory);\r\n// EXTERNAL MODULE: ./src/locator/barcode_locator.js\r\nvar barcode_locator = __nested_webpack_require_266069__(23);\r\n\r\n// CONCATENATED MODULE: ./src/QuaggaContext.ts\r\n\r\n\r\n\r\nvar QuaggaContext_QuaggaContext = /*#__PURE__*/createClass_default()(function QuaggaContext() {\r\n  classCallCheck_default()(this, QuaggaContext);\r\n\r\n  defineProperty_default()(this, \"config\", void 0);\r\n\r\n  defineProperty_default()(this, \"inputStream\", void 0);\r\n\r\n  defineProperty_default()(this, \"framegrabber\", void 0);\r\n\r\n  defineProperty_default()(this, \"inputImageWrapper\", void 0);\r\n\r\n  defineProperty_default()(this, \"stopped\", false);\r\n\r\n  defineProperty_default()(this, \"boxSize\", void 0);\r\n\r\n  defineProperty_default()(this, \"resultCollector\", void 0);\r\n\r\n  defineProperty_default()(this, \"decoder\", void 0);\r\n\r\n  defineProperty_default()(this, \"workerPool\", []);\r\n\r\n  defineProperty_default()(this, \"onUIThread\", true);\r\n\r\n  defineProperty_default()(this, \"canvasContainer\", new QuaggaContext_CanvasContainer());\r\n});\r\nvar QuaggaContext_CanvasInfo = /*#__PURE__*/createClass_default()(function CanvasInfo() {\r\n  classCallCheck_default()(this, CanvasInfo);\r\n\r\n  defineProperty_default()(this, \"image\", void 0);\r\n\r\n  defineProperty_default()(this, \"overlay\", void 0);\r\n});\r\nvar QuaggaContext_CanvasContainer = /*#__PURE__*/createClass_default()(function CanvasContainer() {\r\n  classCallCheck_default()(this, CanvasContainer);\r\n\r\n  defineProperty_default()(this, \"ctx\", void 0);\r\n\r\n  defineProperty_default()(this, \"dom\", void 0);\r\n\r\n  this.ctx = new QuaggaContext_CanvasInfo();\r\n  this.dom = new QuaggaContext_CanvasInfo();\r\n});\r\n// CONCATENATED MODULE: ./src/quagga/getViewPort.ts\r\nfunction getViewPort_getViewPort(target) {\r\n  if (typeof document === 'undefined') {\r\n    return null;\r\n  } // Check if target is already a DOM element\r\n\r\n\r\n  if (target instanceof HTMLElement && target.nodeName && target.nodeType === 1) {\r\n    return target;\r\n  } // Use '#interactive.viewport' as a fallback selector (backwards compatibility)\r\n\r\n\r\n  var selector = typeof target === 'string' ? target : '#interactive.viewport';\r\n  return document.querySelector(selector);\r\n}\r\n// CONCATENATED MODULE: ./src/quagga/initBuffers.ts\r\n\r\n\r\n\r\n// TODO: need typescript def for BarcodeLocator\r\nfunction initBuffers_initBuffers(inputStream, imageWrapper, locator) {\r\n  var inputImageWrapper = imageWrapper || new image_wrapper[\"a\" /* default */]({\r\n    x: inputStream.getWidth(),\r\n    y: inputStream.getHeight(),\r\n    type: 'XYSize'\r\n  });\r\n\r\n  if (true) {\r\n    console.log(\"image wrapper size \".concat(inputImageWrapper.size));\r\n  }\r\n\r\n  var boxSize = [Object(gl_vec2[\"clone\"])([0, 0]), Object(gl_vec2[\"clone\"])([0, inputImageWrapper.size.y]), Object(gl_vec2[\"clone\"])([inputImageWrapper.size.x, inputImageWrapper.size.y]), Object(gl_vec2[\"clone\"])([inputImageWrapper.size.x, 0])];\r\n  barcode_locator[\"a\" /* default */].init(inputImageWrapper, locator);\r\n  return {\r\n    inputImageWrapper: inputImageWrapper,\r\n    boxSize: boxSize\r\n  };\r\n}\r\n// CONCATENATED MODULE: ./src/quagga/initCanvas.ts\r\n\r\n\r\nfunction findOrCreateCanvas(selector, className) {\r\n  var canvas = document.querySelector(selector);\r\n\r\n  if (!canvas) {\r\n    canvas = document.createElement('canvas');\r\n    canvas.className = className;\r\n  }\r\n\r\n  return canvas;\r\n}\r\n\r\nfunction getCanvasAndContext(selector, className) {\r\n  var canvas = findOrCreateCanvas(selector, className);\r\n  var context = canvas.getContext('2d');\r\n  return {\r\n    canvas: canvas,\r\n    context: context\r\n  };\r\n}\r\n\r\nfunction initCanvases(canvasSize) {\r\n  if (typeof document !== 'undefined') {\r\n    var image = getCanvasAndContext('canvas.imgBuffer', 'imgBuffer');\r\n    var overlay = getCanvasAndContext('canvas.drawingBuffer', 'drawingBuffer'); // eslint-disable-next-line no-multi-assign\r\n\r\n    image.canvas.width = overlay.canvas.width = canvasSize.x; // eslint-disable-next-line no-multi-assign\r\n\r\n    image.canvas.height = overlay.canvas.height = canvasSize.y;\r\n    return {\r\n      dom: {\r\n        image: image.canvas,\r\n        overlay: overlay.canvas\r\n      },\r\n      ctx: {\r\n        image: image.context,\r\n        overlay: overlay.context\r\n      }\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction initCanvas_initCanvas(context) {\r\n  var _context$config, _context$config$input, _context$config2, _context$config2$inpu;\r\n\r\n  var viewport = getViewPort_getViewPort(context === null || context === void 0 ? void 0 : (_context$config = context.config) === null || _context$config === void 0 ? void 0 : (_context$config$input = _context$config.inputStream) === null || _context$config$input === void 0 ? void 0 : _context$config$input.target);\r\n  var type = context === null || context === void 0 ? void 0 : (_context$config2 = context.config) === null || _context$config2 === void 0 ? void 0 : (_context$config2$inpu = _context$config2.inputStream) === null || _context$config2$inpu === void 0 ? void 0 : _context$config2$inpu.type;\r\n  if (!type) return null;\r\n  var container = initCanvases(context.inputStream.getCanvasSize());\r\n  if (!container) return {\r\n    dom: {\r\n      image: null,\r\n      overlay: null\r\n    },\r\n    ctx: {\r\n      image: null,\r\n      overlay: null\r\n    }\r\n  };\r\n  var dom = container.dom;\r\n\r\n  if (typeof document !== 'undefined') {\r\n    if (viewport) {\r\n      if (type === 'ImageStream' && !viewport.contains(dom.image)) {\r\n        viewport.appendChild(dom.image);\r\n      }\r\n\r\n      if (!viewport.contains(dom.overlay)) {\r\n        viewport.appendChild(dom.overlay);\r\n      }\r\n    }\r\n  }\r\n\r\n  return container;\r\n}\r\n// CONCATENATED MODULE: ./src/quagga/qworker.ts\r\n\r\n\r\nfunction qworker_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction qworker_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? qworker_ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : qworker_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\n/* Worker functions. These are straight from the original quagga.js file.\r\n * Not presently used, as worker support is non-functional.  Keeping them around temporarily\r\n * to refer to until it is re-implemented. We may be able to fix/use some of this.\r\n */\r\n// TODO: need a typescript interface for FrameGrabber\r\nvar workerPool = [];\r\nfunction updateWorkers(frameGrabber) {\r\n  var availableWorker;\r\n\r\n  if (workerPool.length) {\r\n    availableWorker = workerPool.filter(function (workerThread) {\r\n      return !workerThread.busy;\r\n    })[0];\r\n\r\n    if (availableWorker) {\r\n      frameGrabber.attachData(availableWorker.imageData);\r\n\r\n      if (frameGrabber.grab()) {\r\n        availableWorker.busy = true;\r\n        availableWorker.worker.postMessage({\r\n          cmd: 'process',\r\n          imageData: availableWorker.imageData\r\n        }, [availableWorker.imageData.buffer]);\r\n      }\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction configForWorker(config) {\r\n  return qworker_objectSpread(qworker_objectSpread({}, config), {}, {\r\n    inputStream: qworker_objectSpread(qworker_objectSpread({}, config.inputStream), {}, {\r\n      target: null\r\n    })\r\n  });\r\n} // @ts-ignore\r\n\r\n\r\nfunction workerInterface(factory) {\r\n  if (factory) {\r\n    var Quagga = factory()[\"default\"];\r\n\r\n    if (!Quagga) {\r\n      // @ts-ignore\r\n      self.postMessage({\r\n        'event': 'error',\r\n        message: 'Quagga could not be created'\r\n      });\r\n      return;\r\n    }\r\n  } // @ts-ignore\r\n\r\n\r\n  var imageWrapper; // @ts-ignore\r\n\r\n  function onProcessed(result) {\r\n    self.postMessage({\r\n      'event': 'processed',\r\n      // @ts-ignore\r\n      imageData: imageWrapper.data,\r\n      result: result // @ts-ignore\r\n\r\n    }, [imageWrapper.data.buffer]);\r\n  }\r\n\r\n  function workerInterfaceReady() {\r\n    self.postMessage({\r\n      'event': 'initialized',\r\n      // @ts-ignore\r\n      imageData: imageWrapper.data // @ts-ignore\r\n\r\n    }, [imageWrapper.data.buffer]);\r\n  } // @ts-ignore\r\n\r\n\r\n  self.onmessage = function (e) {\r\n    if (e.data.cmd === 'init') {\r\n      var config = e.data.config;\r\n      config.numOfWorkers = 0;\r\n      imageWrapper = new Quagga.ImageWrapper({\r\n        x: e.data.size.x,\r\n        y: e.data.size.y\r\n      }, new Uint8Array(e.data.imageData));\r\n      Quagga.init(config, workerInterfaceReady, imageWrapper);\r\n      Quagga.onProcessed(onProcessed);\r\n    } else if (e.data.cmd === 'process') {\r\n      // @ts-ignore\r\n      imageWrapper.data = new Uint8Array(e.data.imageData);\r\n      Quagga.start();\r\n    } else if (e.data.cmd === 'setReaders') {\r\n      Quagga.setReaders(e.data.readers);\r\n    } else if (e.data.cmd === 'registerReader') {\r\n      Quagga.registerReader(e.data.name, e.data.reader);\r\n    }\r\n  };\r\n}\r\n\r\nfunction generateWorkerBlob() {\r\n  var blob, factorySource;\r\n  /* jshint ignore:start */\r\n  // @ts-ignore\r\n\r\n  if (typeof __factorySource__ !== 'undefined') {\r\n    // @ts-ignore\r\n    factorySource = __factorySource__; // eslint-disable-line no-undef\r\n  }\r\n  /* jshint ignore:end */\r\n\r\n\r\n  blob = new Blob(['(' + workerInterface.toString() + ')(' + factorySource + ');'], {\r\n    type: 'text/javascript'\r\n  });\r\n  return window.URL.createObjectURL(blob);\r\n}\r\n\r\nfunction initWorker(config, inputStream, cb) {\r\n  var blobURL = generateWorkerBlob();\r\n  var worker = new Worker(blobURL);\r\n  var workerThread = {\r\n    worker: worker,\r\n    imageData: new Uint8Array(inputStream.getWidth() * inputStream.getHeight()),\r\n    busy: true\r\n  };\r\n\r\n  workerThread.worker.onmessage = function (e) {\r\n    if (e.data.event === 'initialized') {\r\n      URL.revokeObjectURL(blobURL);\r\n      workerThread.busy = false;\r\n      workerThread.imageData = new Uint8Array(e.data.imageData);\r\n\r\n      if (true) {\r\n        console.log('Worker initialized');\r\n      }\r\n\r\n      cb(workerThread);\r\n    } else if (e.data.event === 'processed') {\r\n      workerThread.imageData = new Uint8Array(e.data.imageData);\r\n      workerThread.busy = false; // TODO: how to thread publishResult into here?\r\n      // publishResult(e.data.result, workerThread.imageData);\r\n    } else if (e.data.event === 'error') {\r\n      if (true) {\r\n        console.log('Worker error: ' + e.data.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  workerThread.worker.postMessage({\r\n    cmd: 'init',\r\n    size: {\r\n      x: inputStream.getWidth(),\r\n      y: inputStream.getHeight()\r\n    },\r\n    imageData: workerThread.imageData,\r\n    config: configForWorker(config)\r\n  }, [workerThread.imageData.buffer]);\r\n}\r\nfunction adjustWorkerPool(capacity, config, inputStream, cb) {\r\n  var increaseBy = capacity - workerPool.length;\r\n\r\n  if (increaseBy === 0 && cb) {\r\n    cb();\r\n  } else if (increaseBy < 0) {\r\n    var workersToTerminate = workerPool.slice(increaseBy);\r\n    workersToTerminate.forEach(function (workerThread) {\r\n      workerThread.worker.terminate();\r\n\r\n      if (true) {\r\n        console.log('Worker terminated!');\r\n      }\r\n    });\r\n    workerPool = workerPool.slice(0, increaseBy);\r\n\r\n    if (cb) {\r\n      cb();\r\n    }\r\n  } else {\r\n    var workerInitialized = function workerInitialized(workerThread) {\r\n      workerPool.push(workerThread);\r\n\r\n      if (workerPool.length >= capacity && cb) {\r\n        cb();\r\n      }\r\n    };\r\n\r\n    if (config) {\r\n      for (var i = 0; i < increaseBy; i++) {\r\n        initWorker(config, inputStream, workerInitialized);\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction qworker_setReaders(readers) {\r\n  workerPool.forEach(function (workerThread) {\r\n    return workerThread.worker.postMessage({\r\n      cmd: 'setReaders',\r\n      readers: readers\r\n    });\r\n  });\r\n}\r\nfunction qworker_registerReader(name, reader) {\r\n  workerPool.forEach(function (workerThread) {\r\n    return workerThread.worker.postMessage({\r\n      cmd: 'registerReader',\r\n      name: name,\r\n      reader: reader\r\n    });\r\n  });\r\n}\r\n// CONCATENATED MODULE: ./src/quagga/setupInputStream.ts\r\n// TODO: need to create an InputStream typescript interface, so we don't have an \"any\" in the next line\r\nfunction setupInputStream() {\r\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'LiveStream';\r\n  var viewport = arguments.length > 1 ? arguments[1] : undefined;\r\n  var inputStreamFactory = arguments.length > 2 ? arguments[2] : undefined;\r\n\r\n  switch (type) {\r\n    case 'VideoStream':\r\n      {\r\n        var video = document.createElement('video');\r\n        return {\r\n          video: video,\r\n          inputStream: inputStreamFactory.createVideoStream(video)\r\n        };\r\n      }\r\n\r\n    case 'ImageStream':\r\n      return {\r\n        inputStream: inputStreamFactory.createImageStream()\r\n      };\r\n\r\n    case 'LiveStream':\r\n      {\r\n        var _video = null;\r\n\r\n        if (viewport) {\r\n          _video = viewport.querySelector('video');\r\n\r\n          if (!_video) {\r\n            _video = document.createElement('video');\r\n            viewport.appendChild(_video);\r\n          }\r\n        }\r\n\r\n        return {\r\n          video: _video,\r\n          inputStream: inputStreamFactory.createLiveStream(_video)\r\n        };\r\n      }\r\n\r\n    default:\r\n      console.error(\"* setupInputStream invalid type \".concat(type));\r\n      return {\r\n        video: null,\r\n        inputStream: null\r\n      };\r\n  }\r\n}\r\n// CONCATENATED MODULE: ./src/quagga/transform.ts\r\n/* eslint-disable no-param-reassign */\r\nfunction moveBox(box, xOffset, yOffset) {\r\n  var corner = box.length;\r\n\r\n  while (corner--) {\r\n    box[corner][0] += xOffset;\r\n    box[corner][1] += yOffset;\r\n  }\r\n}\r\nfunction moveLine(line, xOffset, yOffset) {\r\n  line[0].x += xOffset;\r\n  line[0].y += yOffset;\r\n  line[1].x += xOffset;\r\n  line[1].y += yOffset;\r\n}\r\n// CONCATENATED MODULE: ./src/quagga/quagga.ts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar quagga_Quagga = /*#__PURE__*/function () {\r\n  function Quagga() {\r\n    var _this = this;\r\n\r\n    classCallCheck_default()(this, Quagga);\r\n\r\n    defineProperty_default()(this, \"context\", new QuaggaContext_QuaggaContext());\r\n\r\n    defineProperty_default()(this, \"canRecord\", function (callback) {\r\n      var _this$context$config;\r\n\r\n      if (!_this.context.config) {\r\n        return;\r\n      }\r\n\r\n      barcode_locator[\"a\" /* default */].checkImageConstraints(_this.context.inputStream, (_this$context$config = _this.context.config) === null || _this$context$config === void 0 ? void 0 : _this$context$config.locator);\r\n\r\n      _this.initCanvas();\r\n\r\n      _this.context.framegrabber = frame_grabber_browser.create(_this.context.inputStream, _this.context.canvasContainer.dom.image);\r\n\r\n      if (_this.context.config.numOfWorkers === undefined) {\r\n        _this.context.config.numOfWorkers = 0;\r\n      }\r\n\r\n      adjustWorkerPool(_this.context.config.numOfWorkers, _this.context.config, _this.context.inputStream, function () {\r\n        var _this$context$config2;\r\n\r\n        if (((_this$context$config2 = _this.context.config) === null || _this$context$config2 === void 0 ? void 0 : _this$context$config2.numOfWorkers) === 0) {\r\n          _this.initializeData();\r\n        }\r\n\r\n        _this.ready(callback);\r\n      });\r\n    });\r\n\r\n    defineProperty_default()(this, \"update\", function () {\r\n      if (_this.context.onUIThread) {\r\n        var workersUpdated = updateWorkers(_this.context.framegrabber);\r\n\r\n        if (!workersUpdated) {\r\n          var _this$context$inputIm;\r\n\r\n          _this.context.framegrabber.attachData((_this$context$inputIm = _this.context.inputImageWrapper) === null || _this$context$inputIm === void 0 ? void 0 : _this$context$inputIm.data);\r\n\r\n          if (_this.context.framegrabber.grab()) {\r\n            if (!workersUpdated) {\r\n              _this.locateAndDecode();\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        var _this$context$inputIm2;\r\n\r\n        _this.context.framegrabber.attachData((_this$context$inputIm2 = _this.context.inputImageWrapper) === null || _this$context$inputIm2 === void 0 ? void 0 : _this$context$inputIm2.data);\r\n\r\n        _this.context.framegrabber.grab();\r\n\r\n        _this.locateAndDecode();\r\n      }\r\n    });\r\n  }\r\n\r\n  createClass_default()(Quagga, [{\r\n    key: \"initBuffers\",\r\n    value: function initBuffers(imageWrapper) {\r\n      if (!this.context.config) {\r\n        return;\r\n      }\r\n\r\n      var _initBuffers2 = initBuffers_initBuffers(this.context.inputStream, imageWrapper, this.context.config.locator),\r\n          inputImageWrapper = _initBuffers2.inputImageWrapper,\r\n          boxSize = _initBuffers2.boxSize;\r\n\r\n      this.context.inputImageWrapper = inputImageWrapper;\r\n      this.context.boxSize = boxSize;\r\n    }\r\n  }, {\r\n    key: \"initializeData\",\r\n    value: function initializeData(imageWrapper) {\r\n      if (!this.context.config) {\r\n        return;\r\n      }\r\n\r\n      this.initBuffers(imageWrapper);\r\n      this.context.decoder = barcode_decoder.create(this.context.config.decoder, this.context.inputImageWrapper);\r\n    }\r\n  }, {\r\n    key: \"getViewPort\",\r\n    value: function getViewPort() {\r\n      if (!this.context.config || !this.context.config.inputStream) {\r\n        return null;\r\n      }\r\n\r\n      var target = this.context.config.inputStream.target;\r\n      return getViewPort_getViewPort(target);\r\n    }\r\n  }, {\r\n    key: \"ready\",\r\n    value: function ready(callback) {\r\n      this.context.inputStream.play();\r\n      callback();\r\n    }\r\n  }, {\r\n    key: \"initCanvas\",\r\n    value: function initCanvas() {\r\n      var container = initCanvas_initCanvas(this.context);\r\n\r\n      if (!container) {\r\n        return;\r\n      }\r\n\r\n      var ctx = container.ctx,\r\n          dom = container.dom;\r\n      this.context.canvasContainer.dom.image = dom.image;\r\n      this.context.canvasContainer.dom.overlay = dom.overlay;\r\n      this.context.canvasContainer.ctx.image = ctx.image;\r\n      this.context.canvasContainer.ctx.overlay = ctx.overlay;\r\n    }\r\n  }, {\r\n    key: \"initInputStream\",\r\n    value: function initInputStream(callback) {\r\n      if (!this.context.config || !this.context.config.inputStream) {\r\n        return;\r\n      }\r\n\r\n      var _this$context$config$ = this.context.config.inputStream,\r\n          inputType = _this$context$config$.type,\r\n          constraints = _this$context$config$.constraints;\r\n\r\n      var _setupInputStream = setupInputStream(inputType, this.getViewPort(), input_stream_browser),\r\n          video = _setupInputStream.video,\r\n          inputStream = _setupInputStream.inputStream;\r\n\r\n      if (inputType === 'LiveStream' && video) {\r\n        camera_access.request(video, constraints).then(function () {\r\n          return inputStream.trigger('canrecord');\r\n        })[\"catch\"](function (err) {\r\n          return callback(err);\r\n        });\r\n      }\r\n\r\n      if (inputStream) {\r\n        inputStream.setAttribute('preload', 'auto');\r\n        inputStream.setInputStream(this.context.config.inputStream);\r\n        inputStream.addEventListener('canrecord', this.canRecord.bind(undefined, callback));\r\n      }\r\n\r\n      this.context.inputStream = inputStream;\r\n    }\r\n  }, {\r\n    key: \"getBoundingBoxes\",\r\n    value: function getBoundingBoxes() {\r\n      var _this$context$config3;\r\n\r\n      return (_this$context$config3 = this.context.config) !== null && _this$context$config3 !== void 0 && _this$context$config3.locate ? barcode_locator[\"a\" /* default */].locate() : [[Object(gl_vec2[\"clone\"])(this.context.boxSize[0]), Object(gl_vec2[\"clone\"])(this.context.boxSize[1]), Object(gl_vec2[\"clone\"])(this.context.boxSize[2]), Object(gl_vec2[\"clone\"])(this.context.boxSize[3])]];\r\n    } // TODO: need a typescript type for result here.\r\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n\r\n  }, {\r\n    key: \"transformResult\",\r\n    value: function transformResult(result) {\r\n      var _this2 = this;\r\n\r\n      var topRight = this.context.inputStream.getTopRight();\r\n      var xOffset = topRight.x;\r\n      var yOffset = topRight.y;\r\n\r\n      if (xOffset === 0 && yOffset === 0) {\r\n        return;\r\n      }\r\n\r\n      if (result.barcodes) {\r\n        // TODO: BarcodeInfo may not be the right type here.\r\n        result.barcodes.forEach(function (barcode) {\r\n          return _this2.transformResult(barcode);\r\n        });\r\n      }\r\n\r\n      if (result.line && result.line.length === 2) {\r\n        moveLine(result.line, xOffset, yOffset);\r\n      }\r\n\r\n      if (result.box) {\r\n        moveBox(result.box, xOffset, yOffset);\r\n      }\r\n\r\n      if (result.boxes && result.boxes.length > 0) {\r\n        for (var i = 0; i < result.boxes.length; i++) {\r\n          moveBox(result.boxes[i], xOffset, yOffset);\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    key: \"addResult\",\r\n    value: function addResult(result, imageData) {\r\n      var _this3 = this;\r\n\r\n      if (!imageData || !this.context.resultCollector) {\r\n        return;\r\n      } // TODO: Figure out what data structure holds a \"barcodes\" result, if any...\r\n\r\n\r\n      if (result.barcodes) {\r\n        result.barcodes.filter(function (barcode) {\r\n          return barcode.codeResult;\r\n        }).forEach(function (barcode) {\r\n          return _this3.addResult(barcode, imageData);\r\n        });\r\n      } else if (result.codeResult) {\r\n        this.context.resultCollector.addResult(imageData, this.context.inputStream.getCanvasSize(), result.codeResult);\r\n      }\r\n    } // eslint-disable-next-line class-methods-use-this\r\n\r\n  }, {\r\n    key: \"hasCodeResult\",\r\n    value: function hasCodeResult(result) {\r\n      return !!(result && (result.barcodes ? result.barcodes.some(function (barcode) {\r\n        return barcode.codeResult;\r\n      }) : result.codeResult));\r\n    } // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n\r\n  }, {\r\n    key: \"publishResult\",\r\n    value: function publishResult() {\r\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n      var imageData = arguments.length > 1 ? arguments[1] : undefined;\r\n      var resultToPublish = result;\r\n\r\n      if (result && this.context.onUIThread) {\r\n        this.transformResult(result);\r\n        this.addResult(result, imageData);\r\n        resultToPublish = result.barcodes || result;\r\n      }\r\n\r\n      events.publish('processed', resultToPublish);\r\n\r\n      if (this.hasCodeResult(result)) {\r\n        events.publish('detected', resultToPublish);\r\n      }\r\n    }\r\n  }, {\r\n    key: \"locateAndDecode\",\r\n    value: function () {\r\n      var _locateAndDecode = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\r\n        var boxes, _this$context$inputIm3, decodeResult, imageResult, _this$context$inputIm4;\r\n\r\n        return regenerator_default.a.wrap(function _callee$(_context) {\r\n          while (1) {\r\n            switch (_context.prev = _context.next) {\r\n              case 0:\r\n                boxes = this.getBoundingBoxes();\r\n\r\n                if (!boxes) {\r\n                  _context.next = 12;\r\n                  break;\r\n                }\r\n\r\n                _context.next = 4;\r\n                return this.context.decoder.decodeFromBoundingBoxes(boxes);\r\n\r\n              case 4:\r\n                _context.t0 = _context.sent;\r\n\r\n                if (_context.t0) {\r\n                  _context.next = 7;\r\n                  break;\r\n                }\r\n\r\n                _context.t0 = {};\r\n\r\n              case 7:\r\n                decodeResult = _context.t0;\r\n                decodeResult.boxes = boxes;\r\n                this.publishResult(decodeResult, (_this$context$inputIm3 = this.context.inputImageWrapper) === null || _this$context$inputIm3 === void 0 ? void 0 : _this$context$inputIm3.data);\r\n                _context.next = 16;\r\n                break;\r\n\r\n              case 12:\r\n                _context.next = 14;\r\n                return this.context.decoder.decodeFromImage(this.context.inputImageWrapper);\r\n\r\n              case 14:\r\n                imageResult = _context.sent;\r\n\r\n                if (imageResult) {\r\n                  this.publishResult(imageResult, (_this$context$inputIm4 = this.context.inputImageWrapper) === null || _this$context$inputIm4 === void 0 ? void 0 : _this$context$inputIm4.data);\r\n                } else {\r\n                  this.publishResult();\r\n                }\r\n\r\n              case 16:\r\n              case \"end\":\r\n                return _context.stop();\r\n            }\r\n          }\r\n        }, _callee, this);\r\n      }));\r\n\r\n      function locateAndDecode() {\r\n        return _locateAndDecode.apply(this, arguments);\r\n      }\r\n\r\n      return locateAndDecode;\r\n    }()\r\n  }, {\r\n    key: \"startContinuousUpdate\",\r\n    value: function startContinuousUpdate() {\r\n      var _this$context$config4,\r\n          _this4 = this;\r\n\r\n      var next = null;\r\n      var delay = 1000 / (((_this$context$config4 = this.context.config) === null || _this$context$config4 === void 0 ? void 0 : _this$context$config4.frequency) || 60);\r\n      this.context.stopped = false;\r\n      var context = this.context;\r\n\r\n      var newFrame = function newFrame(timestamp) {\r\n        next = next || timestamp;\r\n\r\n        if (!context.stopped) {\r\n          if (timestamp >= next) {\r\n            next += delay;\r\n\r\n            _this4.update();\r\n          }\r\n\r\n          window.requestAnimationFrame(newFrame);\r\n        }\r\n      };\r\n\r\n      newFrame(performance.now());\r\n    }\r\n  }, {\r\n    key: \"start\",\r\n    value: function start() {\r\n      var _this$context$config5, _this$context$config6;\r\n\r\n      if (this.context.onUIThread && ((_this$context$config5 = this.context.config) === null || _this$context$config5 === void 0 ? void 0 : (_this$context$config6 = _this$context$config5.inputStream) === null || _this$context$config6 === void 0 ? void 0 : _this$context$config6.type) === 'LiveStream') {\r\n        this.startContinuousUpdate();\r\n      } else {\r\n        this.update();\r\n      }\r\n    }\r\n  }, {\r\n    key: \"stop\",\r\n    value: function () {\r\n      var _stop = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\r\n        var _this$context$config7;\r\n\r\n        return regenerator_default.a.wrap(function _callee2$(_context2) {\r\n          while (1) {\r\n            switch (_context2.prev = _context2.next) {\r\n              case 0:\r\n                this.context.stopped = true;\r\n                adjustWorkerPool(0);\r\n\r\n                if (!((_this$context$config7 = this.context.config) !== null && _this$context$config7 !== void 0 && _this$context$config7.inputStream && this.context.config.inputStream.type === 'LiveStream')) {\r\n                  _context2.next = 6;\r\n                  break;\r\n                }\r\n\r\n                _context2.next = 5;\r\n                return camera_access.release();\r\n\r\n              case 5:\r\n                this.context.inputStream.clearEventHandlers();\r\n\r\n              case 6:\r\n              case \"end\":\r\n                return _context2.stop();\r\n            }\r\n          }\r\n        }, _callee2, this);\r\n      }));\r\n\r\n      function stop() {\r\n        return _stop.apply(this, arguments);\r\n      }\r\n\r\n      return stop;\r\n    }()\r\n  }, {\r\n    key: \"setReaders\",\r\n    value: function setReaders(readers) {\r\n      if (this.context.decoder) {\r\n        this.context.decoder.setReaders(readers);\r\n      }\r\n\r\n      qworker_setReaders(readers);\r\n    }\r\n  }, {\r\n    key: \"registerReader\",\r\n    value: function registerReader(name, reader) {\r\n      barcode_decoder.registerReader(name, reader);\r\n\r\n      if (this.context.decoder) {\r\n        this.context.decoder.registerReader(name, reader);\r\n      }\r\n\r\n      qworker_registerReader(name, reader);\r\n    }\r\n  }]);\r\n\r\n  return Quagga;\r\n}();\r\n\r\n\r\n// CONCATENATED MODULE: ./src/quagga.js\r\n\r\n\r\n // eslint-disable-line no-unused-vars\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar instance = new quagga_Quagga();\r\nvar _context = instance.context;\r\nvar QuaggaJSStaticInterface = {\r\n  init: function init(config, cb, imageWrapper) {\r\n    var quaggaInstance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : instance;\r\n    var promise;\r\n\r\n    if (!cb) {\r\n      promise = new Promise(function (resolve, reject) {\r\n        cb = function cb(err) {\r\n          err ? reject(err) : resolve();\r\n        };\r\n      });\r\n    }\r\n\r\n    quaggaInstance.context.config = merge_default()({}, config_config, config); // TODO #179: pending restructure in Issue #179, we are temp disabling workers\r\n\r\n    if (quaggaInstance.context.config.numOfWorkers > 0) {\r\n      quaggaInstance.context.config.numOfWorkers = 0;\r\n    }\r\n\r\n    if (imageWrapper) {\r\n      quaggaInstance.context.onUIThread = false;\r\n      quaggaInstance.initializeData(imageWrapper);\r\n\r\n      if (cb) {\r\n        cb();\r\n      }\r\n    } else {\r\n      quaggaInstance.initInputStream(cb);\r\n    }\r\n\r\n    return promise;\r\n  },\r\n  start: function start() {\r\n    return instance.start();\r\n  },\r\n  stop: function stop() {\r\n    return instance.stop();\r\n  },\r\n  pause: function pause() {\r\n    _context.stopped = true;\r\n  },\r\n  onDetected: function onDetected(callback) {\r\n    if (!callback || typeof callback !== 'function' && (typeof_default()(callback) !== 'object' || !callback.callback)) {\r\n      console.trace('* warning: Quagga.onDetected called with invalid callback, ignoring');\r\n      return;\r\n    }\r\n\r\n    events.subscribe('detected', callback);\r\n  },\r\n  offDetected: function offDetected(callback) {\r\n    events.unsubscribe('detected', callback);\r\n  },\r\n  onProcessed: function onProcessed(callback) {\r\n    if (!callback || typeof callback !== 'function' && (typeof_default()(callback) !== 'object' || !callback.callback)) {\r\n      console.trace('* warning: Quagga.onProcessed called with invalid callback, ignoring');\r\n      return;\r\n    }\r\n\r\n    events.subscribe('processed', callback);\r\n  },\r\n  offProcessed: function offProcessed(callback) {\r\n    events.unsubscribe('processed', callback);\r\n  },\r\n  setReaders: function setReaders(readers) {\r\n    if (!readers) {\r\n      console.trace('* warning: Quagga.setReaders called with no readers, ignoring');\r\n      return;\r\n    }\r\n\r\n    instance.setReaders(readers);\r\n  },\r\n  registerReader: function registerReader(name, reader) {\r\n    if (!name) {\r\n      console.trace('* warning: Quagga.registerReader called with no name, ignoring');\r\n      return;\r\n    }\r\n\r\n    if (!reader) {\r\n      console.trace('* warning: Quagga.registerReader called with no reader, ignoring');\r\n      return;\r\n    }\r\n\r\n    instance.registerReader(name, reader);\r\n  },\r\n  registerResultCollector: function registerResultCollector(resultCollector) {\r\n    if (resultCollector && typeof resultCollector.addResult === 'function') {\r\n      _context.resultCollector = resultCollector;\r\n    }\r\n  },\r\n\r\n  get canvas() {\r\n    return _context.canvasContainer;\r\n  },\r\n\r\n  decodeSingle: function decodeSingle(config, resultCallback) {\r\n    var _this = this;\r\n\r\n    var quaggaInstance = new quagga_Quagga();\r\n    config = merge_default()({\r\n      inputStream: {\r\n        type: 'ImageStream',\r\n        sequence: false,\r\n        size: 800,\r\n        src: config.src\r\n      },\r\n      numOfWorkers:   true && config.debug ? 0 : 1,\r\n      locator: {\r\n        halfSample: false\r\n      }\r\n    }, config); // TODO #175: restructure worker support so that it will work with typescript using worker-loader\r\n    // https://webpack.js.org/loaders/worker-loader/\r\n\r\n    if (config.numOfWorkers > 0) {\r\n      config.numOfWorkers = 0;\r\n    } // workers require Worker and Blob support presently, so if no Blob or Worker then set\r\n    // workers to 0.\r\n\r\n\r\n    if (config.numOfWorkers > 0 && (typeof Blob === 'undefined' || typeof Worker === 'undefined')) {\r\n      console.warn('* no Worker and/or Blob support - forcing numOfWorkers to 0');\r\n      config.numOfWorkers = 0;\r\n    }\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      try {\r\n        _this.init(config, function () {\r\n          events.once('processed', function (result) {\r\n            quaggaInstance.stop();\r\n\r\n            if (resultCallback) {\r\n              resultCallback.call(null, result);\r\n            }\r\n\r\n            resolve(result);\r\n          }, true);\r\n          quaggaInstance.start();\r\n        }, null, quaggaInstance);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  },\r\n\r\n  // add the usually expected \"default\" for use with require, build step won't allow us to\r\n  // write to module.exports so do it here.\r\n  get default() {\r\n    return QuaggaJSStaticInterface;\r\n  },\r\n\r\n  Readers: reader_namespaceObject,\r\n  CameraAccess: camera_access,\r\n  ImageDebug: image_debug[\"a\" /* default */],\r\n  ImageWrapper: image_wrapper[\"a\" /* default */],\r\n  ResultCollector: result_collector\r\n};\r\n/* harmony default export */ var quagga = __webpack_exports__[\"default\"] = (QuaggaJSStaticInterface); // export BarcodeReader and other utilities for external plugins\r\n\r\n\r\n\r\n/***/ })\r\n/******/ ])[\"default\"];\r\n});\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n//# sourceURL=webpack://test/./src/quagga.min.js?");

/***/ }),

/***/ "./dist/setting.json":
/*!***************************!*\
  !*** ./dist/setting.json ***!
  \***************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"inputStream\":{\"//\":\"スキャンしない範囲\",\"type\":\"LiveStream\",\"target\":\"barcord-scan-area\",\"decodeBarCodeRate\":5,\"successTimeout\":500,\"codeRepetition\":true,\"tryVertical\":true,\"frameRate\":30,\"width\":320,\"height\":640,\"facingMode\":\"environment\",\"frequency\":10,\"area\":{\"top\":\"0%\",\"right\":\"0%\",\"left\":\"0%\",\"bottom\":\"0%\"}},\"//\":\"自動停止時間(秒設定)\",\"decoder\":{\"//\":\"複数検知 精度向上のため無効\",\"readers\":\"code_128_reader\",\"multiple\":false},\"locate\":true,\"locator\":{\"//\":\"バーコード読み取りサイズ(x-small,small,medium,large,x-large)\",\"halfSample\":true,\"patchSize\":\"medium\"},\"debug\":false,\"codeCheckCount\":3,\"scanBoxLineColor\":\"green\",\"scanBoxLineWidth\":2,\"successBoxLineColor\":\"yellow\",\"successBoxLineWidth\":2,\"successLineColor\":\"red\",\"successLineWidth\":5,\"successEntryAudioSource\":\"/medias/scan_entry_succes.mp3\",\"successExitAudioSource\":\"/medias/scan_exit_succes.mp3\",\"scanTimeOut\":180,\"API\":{\"humanResource\":{\"url\":\"http://127.0.0.1:8000/api/resource/barcode/\"},\"record\":{\"url\":\"http://127.0.0.1:8000/api/record/\"}}}');\n\n//# sourceURL=webpack://test/./dist/setting.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;